### YamlMime:ManagedReference
items:
- uid: DulcisX.Core.Extensions.ContainerExtensions
  commentId: T:DulcisX.Core.Extensions.ContainerExtensions
  id: ContainerExtensions
  parent: DulcisX.Core.Extensions
  children:
  - DulcisX.Core.Extensions.ContainerExtensions.GetCOMInstance``1(SimpleInjector.Container)
  - DulcisX.Core.Extensions.ContainerExtensions.RegisterCOMInstance``2(SimpleInjector.Container,DulcisX.Core.IServiceProviders)
  langs:
  - csharp
  - vb
  name: ContainerExtensions
  nameWithType: ContainerExtensions
  fullName: DulcisX.Core.Extensions.ContainerExtensions
  type: Class
  source:
    remote:
      path: src/DulcisX/DulcisX/Core/Extensions/ContainerExtensions.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: ContainerExtensions
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Core/Extensions/ContainerExtensions.cs
    startLine: 8
  assemblies:
  - DulcisX
  namespace: DulcisX.Core.Extensions
  summary: "\n<xref href=\"SimpleInjector.Container\" data-throw-if-not-resolved=\"false\"></xref> specific Extensions.\n"
  example: []
  syntax:
    content: public static class ContainerExtensions
    content.vb: Public Module ContainerExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: DulcisX.Core.Extensions.ContainerExtensions.GetCOMInstance``1(SimpleInjector.Container)
  commentId: M:DulcisX.Core.Extensions.ContainerExtensions.GetCOMInstance``1(SimpleInjector.Container)
  id: GetCOMInstance``1(SimpleInjector.Container)
  isExtensionMethod: true
  parent: DulcisX.Core.Extensions.ContainerExtensions
  langs:
  - csharp
  - vb
  name: GetCOMInstance<TCOMType>(Container)
  nameWithType: ContainerExtensions.GetCOMInstance<TCOMType>(Container)
  fullName: DulcisX.Core.Extensions.ContainerExtensions.GetCOMInstance<TCOMType>(SimpleInjector.Container)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Core/Extensions/ContainerExtensions.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetCOMInstance
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Core/Extensions/ContainerExtensions.cs
    startLine: 16
  assemblies:
  - DulcisX
  namespace: DulcisX.Core.Extensions
  summary: "\nReturns a Com service which is register in the <xref href=\"DulcisX.Core.PackageX.ServiceContainer\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static TCOMType GetCOMInstance<TCOMType>(this Container container)
    parameters:
    - id: container
      type: SimpleInjector.Container
      description: The <xref href="SimpleInjector.Container" data-throw-if-not-resolved="false"></xref> from which the Com service should be retrieved.
    typeParameters:
    - id: TCOMType
      description: The wrapped Com Type service which should be retrieved.
    return:
      type: '{TCOMType}'
      description: The service being requested if available, otherwise null.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCOMInstance(Of TCOMType)(container As Container) As TCOMType
  overload: DulcisX.Core.Extensions.ContainerExtensions.GetCOMInstance*
  nameWithType.vb: ContainerExtensions.GetCOMInstance(Of TCOMType)(Container)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DulcisX.Core.Extensions.ContainerExtensions.GetCOMInstance(Of TCOMType)(SimpleInjector.Container)
  name.vb: GetCOMInstance(Of TCOMType)(Container)
- uid: DulcisX.Core.Extensions.ContainerExtensions.RegisterCOMInstance``2(SimpleInjector.Container,DulcisX.Core.IServiceProviders)
  commentId: M:DulcisX.Core.Extensions.ContainerExtensions.RegisterCOMInstance``2(SimpleInjector.Container,DulcisX.Core.IServiceProviders)
  id: RegisterCOMInstance``2(SimpleInjector.Container,DulcisX.Core.IServiceProviders)
  isExtensionMethod: true
  parent: DulcisX.Core.Extensions.ContainerExtensions
  langs:
  - csharp
  - vb
  name: RegisterCOMInstance<TService, TInterface>(Container, IServiceProviders)
  nameWithType: ContainerExtensions.RegisterCOMInstance<TService, TInterface>(Container, IServiceProviders)
  fullName: DulcisX.Core.Extensions.ContainerExtensions.RegisterCOMInstance<TService, TInterface>(SimpleInjector.Container, DulcisX.Core.IServiceProviders)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Core/Extensions/ContainerExtensions.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: RegisterCOMInstance
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Core/Extensions/ContainerExtensions.cs
    startLine: 26
  assemblies:
  - DulcisX
  namespace: DulcisX.Core.Extensions
  summary: "\nRegisters a <xref href=\"DulcisX.Core.ComContainer%601\" data-throw-if-not-resolved=\"false\"></xref> in the <xref href=\"DulcisX.Core.PackageX.ServiceContainer\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      public static void RegisterCOMInstance<TService, TInterface>(this Container container, IServiceProviders providers)

          where TInterface : class
    parameters:
    - id: container
      type: SimpleInjector.Container
      description: The <xref href="SimpleInjector.Container" data-throw-if-not-resolved="false"></xref> in which the Com service will be registered.
    - id: providers
      type: DulcisX.Core.IServiceProviders
      description: The native <xref href="DulcisX.Core.IServiceProviders" data-throw-if-not-resolved="false"></xref> provided by the environment implemented by the <xref href="DulcisX.Core.PackageX" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TService
      description: The Com service type of the implemention which should be stored.
    - id: TInterface
      description: The implemention type of the Com service which should be retrieved.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RegisterCOMInstance(Of TService, TInterface As Class)(container As Container, providers As IServiceProviders)
  overload: DulcisX.Core.Extensions.ContainerExtensions.RegisterCOMInstance*
  nameWithType.vb: ContainerExtensions.RegisterCOMInstance(Of TService, TInterface)(Container, IServiceProviders)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DulcisX.Core.Extensions.ContainerExtensions.RegisterCOMInstance(Of TService, TInterface)(SimpleInjector.Container, DulcisX.Core.IServiceProviders)
  name.vb: RegisterCOMInstance(Of TService, TInterface)(Container, IServiceProviders)
references:
- uid: SimpleInjector.Container
  commentId: T:SimpleInjector.Container
  parent: SimpleInjector
  isExternal: true
  name: Container
  nameWithType: Container
  fullName: SimpleInjector.Container
- uid: DulcisX.Core.Extensions
  commentId: N:DulcisX.Core.Extensions
  name: DulcisX.Core.Extensions
  nameWithType: DulcisX.Core.Extensions
  fullName: DulcisX.Core.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SimpleInjector
  commentId: N:SimpleInjector
  isExternal: true
  name: SimpleInjector
  nameWithType: SimpleInjector
  fullName: SimpleInjector
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DulcisX.Core.PackageX.ServiceContainer
  commentId: P:DulcisX.Core.PackageX.ServiceContainer
  isExternal: true
- uid: DulcisX.Core.Extensions.ContainerExtensions.GetCOMInstance*
  commentId: Overload:DulcisX.Core.Extensions.ContainerExtensions.GetCOMInstance
  name: GetCOMInstance
  nameWithType: ContainerExtensions.GetCOMInstance
  fullName: DulcisX.Core.Extensions.ContainerExtensions.GetCOMInstance
- uid: '{TCOMType}'
  commentId: '!:TCOMType'
  definition: TCOMType
  name: TCOMType
  nameWithType: TCOMType
  fullName: TCOMType
- uid: TCOMType
  commentId: '!:TCOMType'
  name: TCOMType
  nameWithType: TCOMType
  fullName: TCOMType
- uid: DulcisX.Core.ComContainer`1
  commentId: T:DulcisX.Core.ComContainer`1
  name: ComContainer<TComType>
  nameWithType: ComContainer<TComType>
  fullName: DulcisX.Core.ComContainer<TComType>
  nameWithType.vb: ComContainer(Of TComType)
  fullName.vb: DulcisX.Core.ComContainer(Of TComType)
  name.vb: ComContainer(Of TComType)
  spec.csharp:
  - uid: DulcisX.Core.ComContainer`1
    name: ComContainer
    nameWithType: ComContainer
    fullName: DulcisX.Core.ComContainer
  - name: <
    nameWithType: <
    fullName: <
  - name: TComType
    nameWithType: TComType
    fullName: TComType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: DulcisX.Core.ComContainer`1
    name: ComContainer
    nameWithType: ComContainer
    fullName: DulcisX.Core.ComContainer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TComType
    nameWithType: TComType
    fullName: TComType
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Core.IServiceProviders
  commentId: T:DulcisX.Core.IServiceProviders
  parent: DulcisX.Core
  name: IServiceProviders
  nameWithType: IServiceProviders
  fullName: DulcisX.Core.IServiceProviders
- uid: DulcisX.Core.PackageX
  commentId: T:DulcisX.Core.PackageX
  parent: DulcisX.Core
  name: PackageX
  nameWithType: PackageX
  fullName: DulcisX.Core.PackageX
- uid: DulcisX.Core.Extensions.ContainerExtensions.RegisterCOMInstance*
  commentId: Overload:DulcisX.Core.Extensions.ContainerExtensions.RegisterCOMInstance
  name: RegisterCOMInstance
  nameWithType: ContainerExtensions.RegisterCOMInstance
  fullName: DulcisX.Core.Extensions.ContainerExtensions.RegisterCOMInstance
- uid: DulcisX.Core
  commentId: N:DulcisX.Core
  name: DulcisX.Core
  nameWithType: DulcisX.Core
  fullName: DulcisX.Core

{
  "api/DulcisX.Core.AsyncResult-1.html": {
    "href": "api/DulcisX.Core.AsyncResult-1.html",
    "title": "Class AsyncResult<TResult> | DulcisX Documentation",
    "keywords": "Class AsyncResult<TResult> Contains the result of an asynchronous operation. Inheritance System.Object AsyncResult<TResult> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Core Assembly : DulcisX.dll Syntax public class AsyncResult<TResult> Type Parameters Name Description TResult The type of the result. Methods | Improve this Doc View Source TryGetResult(out TResult) Gets the result of the asynchronous operation. A return value indicates whether the operation succeeded. Declaration public bool TryGetResult(out TResult result) Parameters Type Name Description TResult result The result of the operation. Returns Type Description System.Boolean true if the operation returned a result; otherwise false ."
  },
  "api/DulcisX.Core.Attributes.html": {
    "href": "api/DulcisX.Core.Attributes.html",
    "title": "Namespace DulcisX.Core.Attributes | DulcisX Documentation",
    "keywords": "Namespace DulcisX.Core.Attributes Classes NotImplementedAttribute Marks a class or a member as not yet fully implemented."
  },
  "api/DulcisX.Core.Attributes.NotImplementedAttribute.html": {
    "href": "api/DulcisX.Core.Attributes.NotImplementedAttribute.html",
    "title": "Class NotImplementedAttribute | DulcisX Documentation",
    "keywords": "Class NotImplementedAttribute Marks a class or a member as not yet fully implemented. Inheritance System.Object System.Attribute NotImplementedAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Core.Attributes Assembly : DulcisX.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Event, Inherited = false, AllowMultiple = false)] public sealed class NotImplementedAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source NotImplementedAttribute(String) Initializes a new instance of the NotImplementedAttribute class with a specified reason. Declaration public NotImplementedAttribute(string reason) Parameters Type Name Description System.String reason The text string that describes the reason. Properties | Improve this Doc View Source Reason Gets the reason for the current System.NotImplementedException instance. Declaration public string Reason { get; } Property Value Type Description System.String Implements System.Runtime.InteropServices._Attribute"
  },
  "api/DulcisX.Core.ComContainer.html": {
    "href": "api/DulcisX.Core.ComContainer.html",
    "title": "Class ComContainer | DulcisX Documentation",
    "keywords": "Class ComContainer Provides a simple container for a Com Type. Inheritance System.Object ComContainer Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Core Assembly : DulcisX.dll Syntax public static class ComContainer Methods | Improve this Doc View Source Create<TComType>(TComType) Creates a new ComContainer<TComType> instance. Declaration public static ComContainer<TComType> Create<TComType>(TComType comType) Parameters Type Name Description TComType comType The instance which should wrapped. Returns Type Description ComContainer <TComType> A new ComContainer<TComType> instance with the provided comType . Type Parameters Name Description TComType The type of the Com Type."
  },
  "api/DulcisX.Core.ComContainer-1.html": {
    "href": "api/DulcisX.Core.ComContainer-1.html",
    "title": "Class ComContainer<TComType> | DulcisX Documentation",
    "keywords": "Class ComContainer<TComType> Provides a simple container for a Com Type. Inheritance System.Object ComContainer<TComType> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Core Assembly : DulcisX.dll Syntax public class ComContainer<TComType> Type Parameters Name Description TComType The type of the Com Type. Properties | Improve this Doc View Source Value Gets the wrapped Com instance. Declaration public TComType Value { get; } Property Value Type Description TComType"
  },
  "api/DulcisX.Core.Components.html": {
    "href": "api/DulcisX.Core.Components.html",
    "title": "Namespace DulcisX.Core.Components | DulcisX Documentation",
    "keywords": "Namespace DulcisX.Core.Components Classes InfoBar Wraps around Microsoft.VisualStudio.Shell.Interop.IVsInfoBarHost and Microsoft.VisualStudio.Shell.Interop.IVsInfoBar . InfoBarHandle Points to an InfoBar message and serves as a unique pointer to this message. ResultInfoBarHandle<TIdentifier> Represents a result Handler of an InforBar message. WebBrowser Wraps around the Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService . Interfaces IBaseInfoMessageBuilder Represents the base image builder of an InfoBar message. IButtonIdentifierInfoMessageBuilder Represents the identifier button builder of an InfoBar message. IButtonIdentifierInfoMessageBuilder<TIdentifier> Represents the identifier button builder of an InfoBar message. IButtonInfoMessageBuilder Represents the button builder of an InfoBar message. IContentInfoMessageBuilder Represents the message builder of an InfoBar message. IMoreContentInfoMessageBuilder Represents the optional content message builder of an InfoBar message."
  },
  "api/DulcisX.Core.Components.IBaseInfoMessageBuilder.html": {
    "href": "api/DulcisX.Core.Components.IBaseInfoMessageBuilder.html",
    "title": "Interface IBaseInfoMessageBuilder | DulcisX Documentation",
    "keywords": "Interface IBaseInfoMessageBuilder Represents the base image builder of an InfoBar message. Namespace : DulcisX.Core.Components Assembly : DulcisX.dll Syntax public interface IBaseInfoMessageBuilder Methods | Improve this Doc View Source WithErrorImage() Adds an Error image to the InfoBar message. Declaration IContentInfoMessageBuilder WithErrorImage() Returns Type Description IContentInfoMessageBuilder An IContentInfoMessageBuilder instance. | Improve this Doc View Source WithImage(ImageMoniker) Adds a custom image to the InfoBar message. Declaration IContentInfoMessageBuilder WithImage(ImageMoniker image) Parameters Type Name Description Microsoft.VisualStudio.Imaging.Interop.ImageMoniker image The custom image to be used. Returns Type Description IContentInfoMessageBuilder An IContentInfoMessageBuilder instance. | Improve this Doc View Source WithInfoImage() Adds an Info image to the InfoBar message. Declaration IContentInfoMessageBuilder WithInfoImage() Returns Type Description IContentInfoMessageBuilder An IContentInfoMessageBuilder instance. | Improve this Doc View Source WithWarningImage() Adds a Warning image to the InfoBar message. Declaration IContentInfoMessageBuilder WithWarningImage() Returns Type Description IContentInfoMessageBuilder An IContentInfoMessageBuilder instance."
  },
  "api/DulcisX.Core.Components.IButtonIdentifierInfoMessageBuilder.html": {
    "href": "api/DulcisX.Core.Components.IButtonIdentifierInfoMessageBuilder.html",
    "title": "Interface IButtonIdentifierInfoMessageBuilder | DulcisX Documentation",
    "keywords": "Interface IButtonIdentifierInfoMessageBuilder Represents the identifier button builder of an InfoBar message. Namespace : DulcisX.Core.Components Assembly : DulcisX.dll Syntax public interface IButtonIdentifierInfoMessageBuilder Methods | Improve this Doc View Source WithButton<TIdentifier>(String, TIdentifier) Adds a button with an identifier to the InfoBar message. Declaration IButtonIdentifierInfoMessageBuilder<TIdentifier> WithButton<TIdentifier>(string text, TIdentifier identifier) Parameters Type Name Description System.String text The text to be displayed inside the button. TIdentifier identifier The value which uniquely identifies the button in a InfoBar message. Returns Type Description IButtonIdentifierInfoMessageBuilder <TIdentifier> An IButtonIdentifierInfoMessageBuilder<TIdentifier> instance. Type Parameters Name Description TIdentifier The type of the button identifier."
  },
  "api/DulcisX.Core.Components.IButtonIdentifierInfoMessageBuilder-1.html": {
    "href": "api/DulcisX.Core.Components.IButtonIdentifierInfoMessageBuilder-1.html",
    "title": "Interface IButtonIdentifierInfoMessageBuilder<TIdentifier> | DulcisX Documentation",
    "keywords": "Interface IButtonIdentifierInfoMessageBuilder<TIdentifier> Represents the identifier button builder of an InfoBar message. Namespace : DulcisX.Core.Components Assembly : DulcisX.dll Syntax public interface IButtonIdentifierInfoMessageBuilder<TIdentifier> Type Parameters Name Description TIdentifier he type of the button identifiers. Methods | Improve this Doc View Source Publish() Displays the InfoBar message to the user. Declaration ResultInfoBarHandle<TIdentifier> Publish() Returns Type Description ResultInfoBarHandle <TIdentifier> A new unique ResultInfoBarHandle<TIdentifier> instance pointing to the created InfoBar message. Used to manually remove the InfoBar message in RemoveMessage(InfoBarHandle) . | Improve this Doc View Source WithButton(String, TIdentifier) Adds a button with an identifier to the InfoBar message. Declaration IButtonIdentifierInfoMessageBuilder<TIdentifier> WithButton(string text, TIdentifier identifier) Parameters Type Name Description System.String text The text to be displayed inside the button. TIdentifier identifier The value which uniquely identifies the button in a InfoBar message. Returns Type Description IButtonIdentifierInfoMessageBuilder <TIdentifier> An IButtonIdentifierInfoMessageBuilder<TIdentifier> instance."
  },
  "api/DulcisX.Core.Components.IButtonInfoMessageBuilder.html": {
    "href": "api/DulcisX.Core.Components.IButtonInfoMessageBuilder.html",
    "title": "Interface IButtonInfoMessageBuilder | DulcisX Documentation",
    "keywords": "Interface IButtonInfoMessageBuilder Represents the button builder of an InfoBar message. Namespace : DulcisX.Core.Components Assembly : DulcisX.dll Syntax public interface IButtonInfoMessageBuilder Methods | Improve this Doc View Source Publish(Action) Displays the InfoBar message to the user. Declaration InfoBarHandle Publish(Action cancelCallback = null) Parameters Type Name Description System.Action cancelCallback A callback action which gets called if the user clicks on the close ('x') button. Returns Type Description InfoBarHandle A new unique InfoBarHandle instance pointing to the created InfoBar message. Used to manually remove the InfoBar message in RemoveMessage(InfoBarHandle) . | Improve this Doc View Source WithButton(String, Action, Boolean) Adds a button to the InfoBar message. Declaration IButtonInfoMessageBuilder WithButton(string text, Action callback, bool closeAfterClick = true) Parameters Type Name Description System.String text The text to be displayed inside the button. System.Action callback A callback action which gets called if the user clicks on the button. System.Boolean closeAfterClick Specifies whether or not the InfoBar message should be removed after the user clicked the button. Returns Type Description IButtonInfoMessageBuilder An IButtonInfoMessageBuilder instance. | Improve this Doc View Source WithButton(String, Boolean) Adds a button to the InfoBar message. Declaration IButtonInfoMessageBuilder WithButton(string text, bool closeAfterClick = true) Parameters Type Name Description System.String text The text to be displayed inside the button. System.Boolean closeAfterClick Specifies whether or not the InfoBar message should be removed after the user clicked the button. Returns Type Description IButtonInfoMessageBuilder An IButtonInfoMessageBuilder instance."
  },
  "api/DulcisX.Core.Components.IContentInfoMessageBuilder.html": {
    "href": "api/DulcisX.Core.Components.IContentInfoMessageBuilder.html",
    "title": "Interface IContentInfoMessageBuilder | DulcisX Documentation",
    "keywords": "Interface IContentInfoMessageBuilder Represents the message builder of an InfoBar message. Namespace : DulcisX.Core.Components Assembly : DulcisX.dll Syntax public interface IContentInfoMessageBuilder Methods | Improve this Doc View Source WithHyperlink(String, Action) Adds a hyperlink span to the InfoBar message. Declaration IMoreContentInfoMessageBuilder WithHyperlink(string text, Action callback) Parameters Type Name Description System.String text The text of the hyperlink. System.Action callback A callback action which gets called if the user clicks on the hyperlink. Returns Type Description IMoreContentInfoMessageBuilder An IMoreContentInfoMessageBuilder instance. | Improve this Doc View Source WithHyperlink(String, Uri, Boolean) Adds a hyperlink span to the InfoBar message. Declaration IMoreContentInfoMessageBuilder WithHyperlink(string text, Uri uri, bool openInternally = false) Parameters Type Name Description System.String text The text of the hyperlink. System.Uri uri The uri to which the hyperlink points. System.Boolean openInternally Specifies whether or not the link should be opened in a Visual Studio Browser window. Returns Type Description IMoreContentInfoMessageBuilder An IMoreContentInfoMessageBuilder instance. | Improve this Doc View Source WithText(String, Boolean, Boolean, Boolean) Adds a text span to the InfoBar message. Declaration IMoreContentInfoMessageBuilder WithText(string text, bool bold = false, bool italic = false, bool underline = false) Parameters Type Name Description System.String text The text of the span. System.Boolean bold Specifies whether or not the span should be bolded. System.Boolean italic Specifies whether or not the span should be italicized. System.Boolean underline Specifies whether or not the span should be underlined. Returns Type Description IMoreContentInfoMessageBuilder An IMoreContentInfoMessageBuilder instance."
  },
  "api/DulcisX.Core.Components.IMoreContentInfoMessageBuilder.html": {
    "href": "api/DulcisX.Core.Components.IMoreContentInfoMessageBuilder.html",
    "title": "Interface IMoreContentInfoMessageBuilder | DulcisX Documentation",
    "keywords": "Interface IMoreContentInfoMessageBuilder Represents the optional content message builder of an InfoBar message. Inherited Members IContentInfoMessageBuilder.WithText(String, Boolean, Boolean, Boolean) IContentInfoMessageBuilder.WithHyperlink(String, Uri, Boolean) IContentInfoMessageBuilder.WithHyperlink(String, Action) IButtonInfoMessageBuilder.WithButton(String, Boolean) IButtonInfoMessageBuilder.WithButton(String, Action, Boolean) IButtonInfoMessageBuilder.Publish(Action) IButtonIdentifierInfoMessageBuilder.WithButton<TIdentifier>(String, TIdentifier) Namespace : DulcisX.Core.Components Assembly : DulcisX.dll Syntax public interface IMoreContentInfoMessageBuilder : IContentInfoMessageBuilder, IButtonInfoMessageBuilder, IButtonIdentifierInfoMessageBuilder"
  },
  "api/DulcisX.Core.Components.InfoBar.html": {
    "href": "api/DulcisX.Core.Components.InfoBar.html",
    "title": "Class InfoBar | DulcisX Documentation",
    "keywords": "Class InfoBar Wraps around Microsoft.VisualStudio.Shell.Interop.IVsInfoBarHost and Microsoft.VisualStudio.Shell.Interop.IVsInfoBar . Inheritance System.Object InfoBar Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Core.Components Assembly : DulcisX.dll Syntax public class InfoBar Methods | Improve this Doc View Source NewMessage(Boolean) Instantiates a new InfoBar message. Declaration public IBaseInfoMessageBuilder NewMessage(bool hasCloseButton = true) Parameters Type Name Description System.Boolean hasCloseButton Specifies whether the InfoBar has a 'x' button. Returns Type Description IBaseInfoMessageBuilder An IBaseInfoMessageBuilder instance. | Improve this Doc View Source RemoveMessage(InfoBarHandle) Removes a InfoBar message from the Microsoft.VisualStudio.Shell.Interop.IVsInfoBarHost with the specified InfoBarHandle . Declaration public void RemoveMessage(InfoBarHandle handle) Parameters Type Name Description InfoBarHandle handle Pointer to the InfoBar message which should be removed."
  },
  "api/DulcisX.Core.Components.InfoBarHandle.html": {
    "href": "api/DulcisX.Core.Components.InfoBarHandle.html",
    "title": "Class InfoBarHandle | DulcisX Documentation",
    "keywords": "Class InfoBarHandle Points to an InfoBar message and serves as a unique pointer to this message. Inheritance System.Object InfoBarHandle ResultInfoBarHandle<TIdentifier> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Core.Components Assembly : DulcisX.dll Syntax public class InfoBarHandle"
  },
  "api/DulcisX.Core.Components.ResultInfoBarHandle-1.html": {
    "href": "api/DulcisX.Core.Components.ResultInfoBarHandle-1.html",
    "title": "Class ResultInfoBarHandle<TIdentifier> | DulcisX Documentation",
    "keywords": "Class ResultInfoBarHandle<TIdentifier> Represents a result Handler of an InforBar message. Inheritance System.Object InfoBarHandle ResultInfoBarHandle<TIdentifier> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Core.Components Assembly : DulcisX.dll Syntax public class ResultInfoBarHandle<TIdentifier> : InfoBarHandle Type Parameters Name Description TIdentifier The type of the button identifier. Methods | Improve this Doc View Source WaitForResultAsync(CancellationToken) Asynchronously waits for an result which is produced by the user. Declaration public Task<AsyncResult<TIdentifier>> WaitForResultAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken ct Returns Type Description System.Threading.Tasks.Task < AsyncResult <TIdentifier>> An AsyncResult<TResult> containg the TIdentifier of the clicked button. Events | Improve this Doc View Source OnResult Occurs when the user produces any kind of result. Declaration public event Action<TIdentifier, bool> OnResult Event Type Type Description System.Action <TIdentifier, System.Boolean >"
  },
  "api/DulcisX.Core.Components.WebBrowser.html": {
    "href": "api/DulcisX.Core.Components.WebBrowser.html",
    "title": "Class WebBrowser | DulcisX Documentation",
    "keywords": "Class WebBrowser Wraps around the Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService . Inheritance System.Object WebBrowser Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Core.Components Assembly : DulcisX.dll Syntax public class WebBrowser Methods | Improve this Doc View Source GetInternalBrowserWindows() Gets all Browser window pointers which are opened in Visual Studio. Declaration public IEnumerable<IVsWindowFrame> GetInternalBrowserWindows() Returns Type Description System.Collections.Generic.IEnumerable < Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame > An System.Collections.Generic.IEnumerable<T> containg the opened Browser windows. | Improve this Doc View Source OpenExternal(Uri, __VSCREATEWEBBROWSER, VSPREVIEWRESOLUTION) Opens a Browser tab in the default system Brwoser with the given System.Uri . Declaration public void OpenExternal(Uri uri, __VSCREATEWEBBROWSER creationFlags = __VSCREATEWEBBROWSER.VSCWB_ForceNew, VSPREVIEWRESOLUTION previewFlags = VSPREVIEWRESOLUTION.PR_Default) Parameters Type Name Description System.Uri uri The uri which should be opened in the Browser. Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER creationFlags The creation options. Microsoft.VisualStudio.Shell.Interop.VSPREVIEWRESOLUTION previewFlags The display options. | Improve this Doc View Source OpenInternal(Uri, __VSWBNAVIGATEFLAGS) Opens a Browser window with the given System.Uri from wihtin a Visual Studio Browser. Declaration public IVsWindowFrame OpenInternal(Uri uri, __VSWBNAVIGATEFLAGS flags = (__VSWBNAVIGATEFLAGS)0) Parameters Type Name Description System.Uri uri The uri which should be opened in the Browser. Microsoft.VisualStudio.Shell.Interop.__VSWBNAVIGATEFLAGS flags The navigation options. Returns Type Description Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame A new Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame instance pointing to the newly created Browser window."
  },
  "api/DulcisX.Core.Enums.CopyToOutputDirectory.html": {
    "href": "api/DulcisX.Core.Enums.CopyToOutputDirectory.html",
    "title": "Enum CopyToOutputDirectory | DulcisX Documentation",
    "keywords": "Enum CopyToOutputDirectory Specifies the values of the CopyToOutputDirectory passed to the GetCopyToOutputDirectory() or SetCopyToOutputDirectory(CopyToOutputDirectory) . Namespace : DulcisX.Core.Enums Assembly : DulcisX.dll Syntax public enum CopyToOutputDirectory Fields Name Description Always Specifies that the document will be copied to the output directory. IfNewer Specifies that the document will be copied to the output directory, if the source file is newer. Never Specifies that the document will not be copied to the output directory."
  },
  "api/DulcisX.Core.Enums.DocumentProperty.html": {
    "href": "api/DulcisX.Core.Enums.DocumentProperty.html",
    "title": "Enum DocumentProperty | DulcisX Documentation",
    "keywords": "Enum DocumentProperty Passed to GetItemProperty(UInt32, DocumentProperty) or SetItemProperty(UInt32, DocumentProperty, String) , to specify the property of which the value should be set or retrieved. Namespace : DulcisX.Core.Enums Assembly : DulcisX.dll Syntax public enum DocumentProperty Fields Name Description CopyToOutputDirectory Specifies the Copy to Output Directory property."
  },
  "api/DulcisX.Core.Enums.DocumentType.html": {
    "href": "api/DulcisX.Core.Enums.DocumentType.html",
    "title": "Enum DocumentType | DulcisX Documentation",
    "keywords": "Enum DocumentType Specifies the type of a DocumentNode . Namespace : DulcisX.Core.Enums Assembly : DulcisX.dll Syntax public enum DocumentType Fields Name Description Image The document is an Image. Text The document is a Text document."
  },
  "api/DulcisX.Core.Enums.html": {
    "href": "api/DulcisX.Core.Enums.html",
    "title": "Namespace DulcisX.Core.Enums | DulcisX Documentation",
    "keywords": "Namespace DulcisX.Core.Enums Enums CopyToOutputDirectory Specifies the values of the CopyToOutputDirectory passed to the GetCopyToOutputDirectory() or SetCopyToOutputDirectory(CopyToOutputDirectory) . DocumentProperty Passed to GetItemProperty(UInt32, DocumentProperty) or SetItemProperty(UInt32, DocumentProperty, String) , to specify the property of which the value should be set or retrieved. DocumentType Specifies the type of a DocumentNode . NodeTypes Passed to Hook(NodeTypes, TDelegate) in order to restrict the Nodes which the actions get raised for. StartupOption Represents the startup option for a ProjectNode ."
  },
  "api/DulcisX.Core.Enums.NodeTypes.html": {
    "href": "api/DulcisX.Core.Enums.NodeTypes.html",
    "title": "Enum NodeTypes | DulcisX Documentation",
    "keywords": "Enum NodeTypes Passed to Hook(NodeTypes, TDelegate) in order to restrict the Nodes which the actions get raised for. Namespace : DulcisX.Core.Enums Assembly : DulcisX.dll Syntax [Flags] public enum NodeTypes Fields Name Description All Restricts the EventDistributor<TDelegate> to raise events for all Nodes. Document Restricts the EventDistributor<TDelegate> to raise events for DocumentNode s. Folder Restricts the EventDistributor<TDelegate> to raise events for FolderNode s. MiscellaneousFilesProject Restricts the EventDistributor<TDelegate> to raise events for ProjectNode s which are a MiscellaneousFilesProject. Project Restricts the EventDistributor<TDelegate> to raise events for ProjectNode s. Solution Restricts the EventDistributor<TDelegate> to raise events for SolutionNode s. SolutionFolder Restricts the EventDistributor<TDelegate> to raise events for SolutionFolderNode s. SolutionItemsProject Restricts the EventDistributor<TDelegate> to raise events for ProjectNode s which are a SolutionItemsProject. Unknown Restricts the EventDistributor<TDelegate> to raise events for UnknownNode s. VirtualProject Restricts the EventDistributor<TDelegate> to raise events for ProjectNode s which are a VirtualProject."
  },
  "api/DulcisX.Core.Enums.StartupOption.html": {
    "href": "api/DulcisX.Core.Enums.StartupOption.html",
    "title": "Enum StartupOption | DulcisX Documentation",
    "keywords": "Enum StartupOption Represents the startup option for a ProjectNode . Namespace : DulcisX.Core.Enums Assembly : DulcisX.dll Syntax public enum StartupOption Fields Name Description None The ProjectNode won't start at Application start. Start The ProjectNode will start at Application start. StartWithDebugging The ProjectNode will start at Application start and attach the debugger to the new process."
  },
  "api/DulcisX.Core.Enums.VisualStudio.CommonNodeIds.html": {
    "href": "api/DulcisX.Core.Enums.VisualStudio.CommonNodeIds.html",
    "title": "Class CommonNodeIds | DulcisX Documentation",
    "keywords": "Class CommonNodeIds Common nodes inside an Microsoft.VisualStudio.Shell.Interop.IVsHierarchy . Inheritance System.Object CommonNodeIds Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Core.Enums.VisualStudio Assembly : DulcisX.dll Syntax public static class CommonNodeIds Fields | Improve this Doc View Source MutlipleSelectedNodes Represents a node selection of a collection whic is larger or equal to two. Declaration public const uint MutlipleSelectedNodes = 4294967293U Field Value Type Description System.UInt32 | Improve this Doc View Source Nil Represents no node. Declaration public const uint Nil = 4294967295U Field Value Type Description System.UInt32 | Improve this Doc View Source Project Represents a ProjectNode . Declaration public const uint Project = 4294967294U Field Value Type Description System.UInt32 | Improve this Doc View Source Root Represents the root node of the hierarchy. Declaration public const uint Root = 4294967294U Field Value Type Description System.UInt32 | Improve this Doc View Source Solution Represents a SolutionNode . Declaration public const uint Solution = 4294967294U Field Value Type Description System.UInt32 | Improve this Doc View Source SolutionFolder Represents a SolutionFolderNode . Declaration public const uint SolutionFolder = 4294967294U Field Value Type Description System.UInt32"
  },
  "api/DulcisX.Core.Enums.VisualStudio.CommonStatusCodes.html": {
    "href": "api/DulcisX.Core.Enums.VisualStudio.CommonStatusCodes.html",
    "title": "Class CommonStatusCodes | DulcisX Documentation",
    "keywords": "Class CommonStatusCodes Common HResults of native methods. Inheritance System.Object CommonStatusCodes Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Core.Enums.VisualStudio Assembly : DulcisX.dll Syntax public static class CommonStatusCodes Fields | Improve this Doc View Source Failure Represents a HResult which indicates the generic failure of a native method. Declaration public const int Failure = -2147467259 Field Value Type Description System.Int32 | Improve this Doc View Source Success Represents a HResult which indicates the generic success of a native method. Declaration public const int Success = 0 Field Value Type Description System.Int32"
  },
  "api/DulcisX.Core.Enums.VisualStudio.CommonStreamKeys.html": {
    "href": "api/DulcisX.Core.Enums.VisualStudio.CommonStreamKeys.html",
    "title": "Class CommonStreamKeys | DulcisX Documentation",
    "keywords": "Class CommonStreamKeys Common stream keys in the .suo file. Passed to LoadUserConfiguration(IVsPersistSolutionOpts, String) . Inheritance System.Object CommonStreamKeys Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Core.Enums.VisualStudio Assembly : DulcisX.dll Syntax public static class CommonStreamKeys Fields | Improve this Doc View Source SolutionConfiguration Specifies the solution configuration strean inside the .suo file. Declaration public const string SolutionConfiguration = \"SolutionConfiguration\" Field Value Type Description System.String"
  },
  "api/DulcisX.Core.Enums.VisualStudio.html": {
    "href": "api/DulcisX.Core.Enums.VisualStudio.html",
    "title": "Namespace DulcisX.Core.Enums.VisualStudio | DulcisX Documentation",
    "keywords": "Namespace DulcisX.Core.Enums.VisualStudio Classes CommonNodeIds Common nodes inside an Microsoft.VisualStudio.Shell.Interop.IVsHierarchy . CommonStatusCodes Common HResults of native methods. CommonStreamKeys Common stream keys in the .suo file. Passed to LoadUserConfiguration(IVsPersistSolutionOpts, String) . Enums OpenNodeAttribute Used instead of Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB , Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB2 and Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB3 . It unifies all of the listed enum members. PhysicalNodeRemovedFlags Used instead of Microsoft.VisualStudio.Shell.Interop.__VSREMOVEFILEFLAGS2 ."
  },
  "api/DulcisX.Core.Enums.VisualStudio.OpenNodeAttribute.html": {
    "href": "api/DulcisX.Core.Enums.VisualStudio.OpenNodeAttribute.html",
    "title": "Enum OpenNodeAttribute | DulcisX Documentation",
    "keywords": "Enum OpenNodeAttribute Used instead of Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB , Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB2 and Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB3 . It unifies all of the listed enum members. Namespace : DulcisX.Core.Enums.VisualStudio Assembly : DulcisX.dll Syntax public enum OpenNodeAttribute Fields Name Description AltHierarchyItemID This attribute event is fired by calling the Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.NotifyDocumentChanged(System.UInt32,System.UInt32) method. DocDataIsDirty Flag indicates that the data of the document in the Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable has changed. DocDataIsNotDirty Flag indicates that the data of the document in the Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable has not changed. DocDataIsNotReadOnly The data of the document in the Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable is readable and writable. DocDataIsReadOnly The data of the document in the Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable is read-only. DocDataReloaded This attribute event is fired by calling the Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.NotifyDocumentChanged(System.UInt32,System.UInt32) method. DocumentInitialized A document was added to the Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable in a fully-initialized state, or a document that had the property RDT_PendingInitialization has completed its initialization. Hierarchy Hierarchical position of the document in the Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable . HierarchyInitialized A document that had the property RDT_PendingHierarchyInitialization has completed its hierarchy initialization. ItemID Item identifier of the document in the Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable . MkDocument Full path to the document in the Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable . NOTIFYDOCCHANGEDMASK A mask for the flags passed to the Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.NotifyDocumentChanged(System.UInt32,System.UInt32) method. NotifyDocChangedXMask A mask for the flags passed to the Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable3.NotifyDocumentChangedEx(System.UInt32,System.UInt32) method."
  },
  "api/DulcisX.Core.Enums.VisualStudio.PhysicalNodeRemovedFlags.html": {
    "href": "api/DulcisX.Core.Enums.VisualStudio.PhysicalNodeRemovedFlags.html",
    "title": "Enum PhysicalNodeRemovedFlags | DulcisX Documentation",
    "keywords": "Enum PhysicalNodeRemovedFlags Used instead of Microsoft.VisualStudio.Shell.Interop.__VSREMOVEFILEFLAGS2 . Namespace : DulcisX.Core.Enums.VisualStudio Assembly : DulcisX.dll Syntax [Flags] public enum PhysicalNodeRemovedFlags Fields Name Description Deleted If this flag is set, the file is removed from disk. Removed If this flag is set, the file is removed from the project, but still exists on disk."
  },
  "api/DulcisX.Core.EventSink.html": {
    "href": "api/DulcisX.Core.EventSink.html",
    "title": "Class EventSink | DulcisX Documentation",
    "keywords": "Class EventSink Provides basic logic for the inheritance of native Visual Studio Events. Inheritance System.Object EventSink NodeEventSink Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Core Assembly : DulcisX.dll Syntax public abstract class EventSink : IDisposable Properties | Improve this Doc View Source Cookie Gets the Cookie which identifies the current EventSink . Declaration public uint Cookie { get; } Property Value Type Description System.UInt32 Methods | Improve this Doc View Source Dispose() Disposes the current EventSink . Declaration public abstract void Dispose() | Improve this Doc View Source SetCookie(UInt32) Sets the Cookie of the EventSink . Declaration protected void SetCookie(uint cookie) Parameters Type Name Description System.UInt32 cookie The cookie which is used to identify the EventSink . Implements System.IDisposable"
  },
  "api/DulcisX.Core.Extensions.ContainerExtensions.html": {
    "href": "api/DulcisX.Core.Extensions.ContainerExtensions.html",
    "title": "Class ContainerExtensions | DulcisX Documentation",
    "keywords": "Class ContainerExtensions SimpleInjector.Container specific Extensions. Inheritance System.Object ContainerExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Core.Extensions Assembly : DulcisX.dll Syntax public static class ContainerExtensions Methods | Improve this Doc View Source GetCOMInstance<TCOMType>(Container) Returns a Com service which is register in the ServiceContainer . Declaration public static TCOMType GetCOMInstance<TCOMType>(this Container container) Parameters Type Name Description SimpleInjector.Container container The SimpleInjector.Container from which the Com service should be retrieved. Returns Type Description TCOMType The service being requested if available, otherwise null. Type Parameters Name Description TCOMType The wrapped Com Type service which should be retrieved. | Improve this Doc View Source RegisterCOMInstance<TService, TInterface>(Container, IServiceProviders) Registers a ComContainer<TComType> in the ServiceContainer . Declaration public static void RegisterCOMInstance<TService, TInterface>(this Container container, IServiceProviders providers) where TInterface : class Parameters Type Name Description SimpleInjector.Container container The SimpleInjector.Container in which the Com service will be registered. IServiceProviders providers The native IServiceProviders provided by the environment implemented by the PackageX . Type Parameters Name Description TService The Com service type of the implemention which should be stored. TInterface The implemention type of the Com service which should be retrieved."
  },
  "api/DulcisX.Core.Extensions.html": {
    "href": "api/DulcisX.Core.Extensions.html",
    "title": "Namespace DulcisX.Core.Extensions | DulcisX Documentation",
    "keywords": "Namespace DulcisX.Core.Extensions Classes ContainerExtensions SimpleInjector.Container specific Extensions. VsHierarchyExtensions Microsoft.VisualStudio.Shell.Interop.IVsHierarchy specific Extensions. VsRunningDocumentTableExtensions Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable and Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents specific Extensions."
  },
  "api/DulcisX.Core.Extensions.VsHierarchyExtensions.html": {
    "href": "api/DulcisX.Core.Extensions.VsHierarchyExtensions.html",
    "title": "Class VsHierarchyExtensions | DulcisX Documentation",
    "keywords": "Class VsHierarchyExtensions Microsoft.VisualStudio.Shell.Interop.IVsHierarchy specific Extensions. Inheritance System.Object VsHierarchyExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Core.Extensions Assembly : DulcisX.dll Syntax public static class VsHierarchyExtensions Methods | Improve this Doc View Source GetProperty(IVsHierarchy, UInt32, Int32) Gets a property of a node. Declaration public static uint GetProperty(this IVsHierarchy hierarchy, uint itemId, int propId) Parameters Type Name Description Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The Microsoft.VisualStudio.Shell.Interop.IVsHierarchy of the node. System.UInt32 itemId The identifier for the node. System.Int32 propId The property of which the value should be returned. Returns Type Description System.UInt32 A value containing the property. | Improve this Doc View Source GetProperty<TType>(IVsHierarchy, UInt32, Int32) Gets a property of a node. Declaration public static TType GetProperty<TType>(this IVsHierarchy hierarchy, uint itemId, int propId) Parameters Type Name Description Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The Microsoft.VisualStudio.Shell.Interop.IVsHierarchy of the node. System.UInt32 itemId The identifier for the node. System.Int32 propId The property of which the value should be returned. Returns Type Description TType A value containing the property. Type Parameters Name Description TType The type to which the value of the property should be casted to. | Improve this Doc View Source GetPropertyObject(IVsHierarchy, UInt32, Int32) Gets a property of a node. Declaration public static object GetPropertyObject(this IVsHierarchy hierarchy, uint itemId, int propId) Parameters Type Name Description Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The Microsoft.VisualStudio.Shell.Interop.IVsHierarchy of the node. System.UInt32 itemId The identifier for the node. System.Int32 propId The property of which the value should be returned. Returns Type Description System.Object A value boxed in an object containing the property. | Improve this Doc View Source IsContainer(IVsHierarchy, UInt32) Gets a value indicating whether a node is a container. Declaration public static bool IsContainer(this IVsHierarchy hierarchy, uint itemId) Parameters Type Name Description Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The Microsoft.VisualStudio.Shell.Interop.IVsHierarchy of the node. System.UInt32 itemId The identifier for the node. Returns Type Description System.Boolean true if the node is a container; otherwise false . | Improve this Doc View Source TryGetNestedHierarchy(IVsHierarchy, UInt32, out IVsHierarchy) Gets the nested Microsoft.VisualStudio.Shell.Interop.IVsHierarchy of an Microsoft.VisualStudio.Shell.Interop.IVsHierarchy . A return value indicates whether the operation succeeded. Declaration public static bool TryGetNestedHierarchy(this IVsHierarchy hierarchy, uint itemId, out IVsHierarchy nestedHierarchy) Parameters Type Name Description Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The Microsoft.VisualStudio.Shell.Interop.IVsHierarchy of the which the child should be retrieved. System.UInt32 itemId The identifier for the node of which the child should be retrieved. Microsoft.VisualStudio.Shell.Interop.IVsHierarchy nestedHierarchy The chil Microsoft.VisualStudio.Shell.Interop.IVsHierarchy . Returns Type Description System.Boolean true if the operation suceeded a result; otherwise false . | Improve this Doc View Source TryGetParentHierarchy(IVsHierarchy, out IVsHierarchy) Gets the parent Microsoft.VisualStudio.Shell.Interop.IVsHierarchy of an Microsoft.VisualStudio.Shell.Interop.IVsHierarchy . A return value indicates whether the operation succeeded. Declaration public static bool TryGetParentHierarchy(this IVsHierarchy hierarchy, out IVsHierarchy parentHierarchy) Parameters Type Name Description Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The Microsoft.VisualStudio.Shell.Interop.IVsHierarchy of the which the parent should be retrieved. Microsoft.VisualStudio.Shell.Interop.IVsHierarchy parentHierarchy The parent Microsoft.VisualStudio.Shell.Interop.IVsHierarchy . Returns Type Description System.Boolean true if the operation returned a result; otherwise false . | Improve this Doc View Source TryGetProperty(IVsHierarchy, UInt32, Int32, out UInt32) Gets a property of a node. A return value indicates whether the operation succeeded. Declaration public static bool TryGetProperty(this IVsHierarchy hierarchy, uint itemId, int propId, out uint value) Parameters Type Name Description Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The Microsoft.VisualStudio.Shell.Interop.IVsHierarchy of the node. System.UInt32 itemId The identifier for the node. System.Int32 propId The property of which the value should be returned. System.UInt32 value The value of the property. Returns Type Description System.Boolean true if the operation returned a result; otherwise false . | Improve this Doc View Source TryGetProperty<TType>(IVsHierarchy, UInt32, Int32, out TType) Gets a property of a node. A return value indicates whether the operation succeeded. Declaration public static bool TryGetProperty<TType>(this IVsHierarchy hierarchy, uint itemId, int propId, out TType value) Parameters Type Name Description Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The Microsoft.VisualStudio.Shell.Interop.IVsHierarchy of the node. System.UInt32 itemId The identifier for the node. System.Int32 propId The property of which the value should be returned. TType value The value of the property. Returns Type Description System.Boolean true if the operation returned a result; otherwise false . Type Parameters Name Description TType The type to which the value of the property should be casted to. | Improve this Doc View Source TryGetPropertyObject(IVsHierarchy, UInt32, Int32, out Object) Gets a property of a node. A return value indicates whether the operation succeeded. Declaration public static bool TryGetPropertyObject(this IVsHierarchy hierarchy, uint itemId, int propId, out object value) Parameters Type Name Description Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The Microsoft.VisualStudio.Shell.Interop.IVsHierarchy of the node. System.UInt32 itemId The identifier for the node. System.Int32 propId The property of which the value should be returned. System.Object value The value of the property boxed in an object. Returns Type Description System.Boolean true if the operation returned a result; otherwise false . | Improve this Doc View Source TrySetProperty(IVsHierarchy, UInt32, Int32, Object) Sets a property of a node. A return value indicates whether the operation succeeded. Declaration public static bool TrySetProperty(this IVsHierarchy hierarchy, uint itemId, int propId, object value) Parameters Type Name Description Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The Microsoft.VisualStudio.Shell.Interop.IVsHierarchy of the node. System.UInt32 itemId The identifier for the node. System.Int32 propId The property of which the value should be returned. System.Object value The value which should be set as the new value of the property. Returns Type Description System.Boolean true if the operation returned a result; otherwise false ."
  },
  "api/DulcisX.Core.Extensions.VsRunningDocumentTableExtensions.html": {
    "href": "api/DulcisX.Core.Extensions.VsRunningDocumentTableExtensions.html",
    "title": "Class VsRunningDocumentTableExtensions | DulcisX Documentation",
    "keywords": "Class VsRunningDocumentTableExtensions Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable and Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents specific Extensions. Inheritance System.Object VsRunningDocumentTableExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Core.Extensions Assembly : DulcisX.dll Syntax public static class VsRunningDocumentTableExtensions Methods | Improve this Doc View Source GetNode(IVsRunningDocumentTable, UInt32, SolutionNode) Returns an IPhysicalNode for the given document cookie. Declaration public static IPhysicalNode GetNode(this IVsRunningDocumentTable rdt, uint docCookie, SolutionNode solution) Parameters Type Name Description Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable rdt The running document table of the current environment. System.UInt32 docCookie The document cookie, which identfies the node within the Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable . SolutionNode solution The solution of the current environment, usually Solution Returns Type Description IPhysicalNode A new instance of an IPhysicalNode for the given document cookie."
  },
  "api/DulcisX.Core.html": {
    "href": "api/DulcisX.Core.html",
    "title": "Namespace DulcisX.Core | DulcisX Documentation",
    "keywords": "Namespace DulcisX.Core Classes AsyncResult<TResult> Contains the result of an asynchronous operation. ComContainer Provides a simple container for a Com Type. ComContainer<TComType> Provides a simple container for a Com Type. EventSink Provides basic logic for the inheritance of native Visual Studio Events. PackageX Registers a new Package and provides all the Visual Studio Services to the environment. VisualStudioInstance Represents the current Visual Studio Instance. Interfaces IContainerConfiguration Allows the configuration of the ServiceContainer . IServiceProviders"
  },
  "api/DulcisX.Core.IContainerConfiguration.html": {
    "href": "api/DulcisX.Core.IContainerConfiguration.html",
    "title": "Interface IContainerConfiguration | DulcisX Documentation",
    "keywords": "Interface IContainerConfiguration Allows the configuration of the ServiceContainer . Namespace : DulcisX.Core Assembly : DulcisX.dll Syntax public interface IContainerConfiguration Methods | Improve this Doc View Source ConfigureServices(PackageX, Container) Configures the services of the see ServiceContainer . Declaration void ConfigureServices(PackageX package, Container container) Parameters Type Name Description PackageX package SimpleInjector.Container container"
  },
  "api/DulcisX.Core.IServiceProviders.html": {
    "href": "api/DulcisX.Core.IServiceProviders.html",
    "title": "Interface IServiceProviders | DulcisX Documentation",
    "keywords": "Interface IServiceProviders Inherited Members System.IServiceProvider.GetService(System.Type) Microsoft.VisualStudio.Shell.IAsyncServiceProvider.GetServiceAsync(System.Type) Namespace : DulcisX.Core Assembly : DulcisX.dll Syntax public interface IServiceProviders : IServiceProvider, IAsyncServiceProvider"
  },
  "api/DulcisX.Core.PackageX.html": {
    "href": "api/DulcisX.Core.PackageX.html",
    "title": "Class PackageX | DulcisX Documentation",
    "keywords": "Class PackageX Registers a new Package and provides all the Visual Studio Services to the environment. Inheritance System.Object Microsoft.VisualStudio.Shell.Package Microsoft.VisualStudio.Shell.AsyncPackage PackageX Implements Microsoft.VisualStudio.Shell.Interop.IVsPackage Microsoft.VisualStudio.OLE.Interop.IServiceProvider Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts System.ComponentModel.Design.IServiceContainer Microsoft.VisualStudio.Shell.Interop.IVsUserSettings Microsoft.VisualStudio.Shell.Interop.IVsUserSettingsMigration Microsoft.VisualStudio.Shell.Interop.IVsUserSettingsQuery Microsoft.VisualStudio.Shell.Interop.IVsToolWindowFactory Microsoft.VisualStudio.Shell.Interop.IVsToolboxItemProvider Microsoft.VisualStudio.Shell.Interop.IVsToolboxItemProvider2 Microsoft.VisualStudio.Shell.Interop.IAsyncServiceProvider Microsoft.VisualStudio.Shell.Interop.IAsyncLoadablePackageInitialize Microsoft.VisualStudio.Shell.IAsyncServiceProvider2 Microsoft.VisualStudio.Shell.IAsyncServiceContainer Microsoft.VisualStudio.Shell.Interop.IVsAsyncToolWindowFactory Microsoft.VisualStudio.Shell.Interop.IVsAsyncToolWindowFactoryProvider IServiceProviders System.IServiceProvider Microsoft.VisualStudio.Shell.IAsyncServiceProvider Inherited Members Microsoft.VisualStudio.Shell.AsyncPackage.GetServiceAsync(System.Type) Microsoft.VisualStudio.Shell.AsyncPackage.GetServiceAsync(System.Type, System.Boolean) Microsoft.VisualStudio.Shell.AsyncPackage.AddService(System.Type, Microsoft.VisualStudio.Shell.AsyncServiceCreatorCallback) Microsoft.VisualStudio.Shell.AsyncPackage.AddService(System.Type, Microsoft.VisualStudio.Shell.AsyncServiceCreatorCallback, System.Boolean) Microsoft.VisualStudio.Shell.AsyncPackage.AddService(System.Type, Microsoft.VisualStudio.Shell.AsyncServiceCreatorWithProgressCallback, System.Boolean) Microsoft.VisualStudio.Shell.AsyncPackage.AddService(System.Type, Microsoft.VisualStudio.Shell.AsyncServiceCreatorWithProgressCallback) Microsoft.VisualStudio.Shell.AsyncPackage.RemoveService(System.Type) Microsoft.VisualStudio.Shell.AsyncPackage.RemoveService(System.Type, System.Boolean) Microsoft.VisualStudio.Shell.AsyncPackage.GetAsyncToolWindowFactory(System.Guid) Microsoft.VisualStudio.Shell.AsyncPackage.InitializeToolWindowAsync(System.Type, System.Int32, System.Threading.CancellationToken) Microsoft.VisualStudio.Shell.AsyncPackage.GetToolWindowTitle(System.Type, System.Int32) Microsoft.VisualStudio.Shell.AsyncPackage.FindToolWindowAsync(System.Type, System.Int32, System.Boolean, System.Threading.CancellationToken) Microsoft.VisualStudio.Shell.AsyncPackage.FindWindowPaneAsync(System.Type, System.Int32, System.Boolean, System.Threading.CancellationToken) Microsoft.VisualStudio.Shell.AsyncPackage.ShowToolWindowAsync(System.Type, System.Int32, System.Boolean, System.Threading.CancellationToken) Microsoft.VisualStudio.Shell.AsyncPackage.GetService(System.Type) Microsoft.VisualStudio.Shell.AsyncPackage.Initialize() Microsoft.VisualStudio.Shell.AsyncPackage.DisposalToken Microsoft.VisualStudio.Shell.AsyncPackage.JoinableTaskFactory Microsoft.VisualStudio.Shell.AsyncPackage.JoinableTaskCollection Microsoft.VisualStudio.Shell.Package.AddOptionKey(System.String) Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsUserSettings.ExportSettings(System.String, Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter) Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsUserSettingsMigration.MigrateSettings(Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader, Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter, System.String) Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsUserSettings.ImportSettings(System.String, Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader, System.UInt32, System.Int32) Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsUserSettingsQuery.NeedExport(System.String, System.Int32) Microsoft.VisualStudio.Shell.Package.GetAutomationObject(System.String) Microsoft.VisualStudio.Shell.Package.GetDialogPage(System.Type) Microsoft.VisualStudio.Shell.Package.IsLocalService(System.Type) Microsoft.VisualStudio.Shell.Package.QueryClose(System.Boolean) Microsoft.VisualStudio.Shell.Package.GetProviderLocale() Microsoft.VisualStudio.Shell.Package.CreateInstance(System.Guid, System.Guid, System.Type) Microsoft.VisualStudio.Shell.Package.GetOutputPane(System.Guid, System.String) Microsoft.VisualStudio.Shell.Package.OnLoadOptions(System.String, System.IO.Stream) Microsoft.VisualStudio.Shell.Package.OnSaveOptions(System.String, System.IO.Stream) Microsoft.VisualStudio.Shell.Package.ParseToolboxResource(System.IO.TextReader, System.Resources.ResourceManager) Microsoft.VisualStudio.Shell.Package.ParseToolboxResource(System.IO.TextReader, System.Guid) Microsoft.VisualStudio.Shell.Package.RegisterEditorFactory(Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory) Microsoft.VisualStudio.Shell.Package.RegisterProjectFactory(Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory) Microsoft.VisualStudio.Shell.Package.ShowOptionPage(System.Type) Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.Exec(System.Guid, System.UInt32, System.UInt32, System.IntPtr, System.IntPtr) Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.QueryStatus(System.Guid, System.UInt32, Microsoft.VisualStudio.OLE.Interop.OLECMD[], System.IntPtr) Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.OLE.Interop.IServiceProvider.QueryService(System.Guid, System.Guid, System.IntPtr) Microsoft.VisualStudio.Shell.Package.System.ComponentModel.Design.IServiceContainer.AddService(System.Type, System.Object) Microsoft.VisualStudio.Shell.Package.System.ComponentModel.Design.IServiceContainer.AddService(System.Type, System.Object, System.Boolean) Microsoft.VisualStudio.Shell.Package.System.ComponentModel.Design.IServiceContainer.AddService(System.Type, System.ComponentModel.Design.ServiceCreatorCallback) Microsoft.VisualStudio.Shell.Package.System.ComponentModel.Design.IServiceContainer.AddService(System.Type, System.ComponentModel.Design.ServiceCreatorCallback, System.Boolean) Microsoft.VisualStudio.Shell.Package.System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type) Microsoft.VisualStudio.Shell.Package.System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type, System.Boolean) Microsoft.VisualStudio.Shell.Package.System.IServiceProvider.GetService(System.Type) Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPackage.Close() Microsoft.VisualStudio.Shell.Package.CreateTool(System.Guid) Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsToolWindowFactory.CreateToolWindow(System.Guid, System.UInt32) Microsoft.VisualStudio.Shell.Package.CreateToolWindow(System.Guid, System.Int32) Microsoft.VisualStudio.Shell.Package.CreateToolWindow(System.Type, System.Int32) Microsoft.VisualStudio.Shell.Package.CreateToolWindow(System.Type, System.Int32, System.Object) Microsoft.VisualStudio.Shell.Package.InstantiateToolWindow(System.Type) Microsoft.VisualStudio.Shell.Package.InstantiateToolWindow(System.Type, System.Object) Microsoft.VisualStudio.Shell.Package.CreateToolWindow(System.Type, System.Int32, System.UInt32) Microsoft.VisualStudio.Shell.Package.CreateToolWindow(System.Type, System.Int32, System.UInt32, System.Object, System.Guid) Microsoft.VisualStudio.Shell.Package.FindToolWindow(System.Type, System.Int32, System.Boolean) Microsoft.VisualStudio.Shell.Package.FindWindowPane(System.Type, System.Int32, System.Boolean) Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPackage.GetAutomationObject(System.String, System.Object) Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPackage.GetPropertyPage(System.Guid, Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE[]) Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPackage.QueryClose(System.Int32) Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPackage.ResetDefaults(System.UInt32) Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPackage.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider) Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts.LoadUserOptions(Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence, System.UInt32) Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts.ReadUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream, System.String) Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts.SaveUserOptions(Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence) Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts.WriteUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream, System.String) Microsoft.VisualStudio.Shell.Package.GetToolboxItemData(System.String, System.Windows.Forms.DataFormats.Format) Microsoft.VisualStudio.Shell.Package.GetToolboxItemDataAsync(System.String, System.Windows.Forms.DataFormats.Format) Microsoft.VisualStudio.Shell.Package.GetGlobalService(System.Type) Microsoft.VisualStudio.Shell.Package.IsExperimentalInstance(System.IServiceProvider) Microsoft.VisualStudio.Shell.Package.ApplicationRegistryRoot Microsoft.VisualStudio.Shell.Package.UserDataPath Microsoft.VisualStudio.Shell.Package.UserLocalDataPath Microsoft.VisualStudio.Shell.Package.UserRegistryRoot Microsoft.VisualStudio.Shell.Package.Zombied Microsoft.VisualStudio.Shell.Package.ToolboxInitialized Microsoft.VisualStudio.Shell.Package.ToolboxUpgraded System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Core Assembly : DulcisX.dll Syntax public abstract class PackageX : AsyncPackage, IVsPackage, IServiceProvider, IOleCommandTarget, IVsPersistSolutionOpts, IServiceContainer, IVsUserSettings, IVsUserSettingsMigration, IVsUserSettingsQuery, IVsToolWindowFactory, IVsToolboxItemProvider, IVsToolboxItemProvider2, IAsyncServiceProvider, IAsyncLoadablePackageInitialize, IAsyncServiceProvider2, IAsyncServiceContainer, IVsAsyncToolWindowFactory, IVsAsyncToolWindowFactoryProvider, IServiceProviders, IServiceProvider, IAsyncServiceProvider Constructors | Improve this Doc View Source PackageX() Initializes a new instance of the PackageX class. Declaration protected PackageX() | Improve this Doc View Source PackageX(Assembly[]) Initializes a new instance of the PackageX class with a list of assemblies which contain IContainerConfiguration s. Declaration protected PackageX(params Assembly[] containerConfigurationAssemblies) Parameters Type Name Description System.Reflection.Assembly [] containerConfigurationAssemblies An Array which contains all assemblies witch contain IContainerConfiguration s. Properties | Improve this Doc View Source InfoBar Gets the InfoBar of the environment. Declaration public InfoBar InfoBar { get; } Property Value Type Description InfoBar | Improve this Doc View Source ServiceContainer Gets the SimpleInjector.Container which holds package and user specifc services. Declaration public Container ServiceContainer { get; } Property Value Type Description SimpleInjector.Container | Improve this Doc View Source Solution Gets the currently open Solution. Declaration public SolutionNode Solution { get; } Property Value Type Description SolutionNode | Improve this Doc View Source StatusBar Gets the Microsoft.VisualStudio.Shell.Interop.IVsStatusbar of the environment. Declaration public IVsStatusbar StatusBar { get; } Property Value Type Description Microsoft.VisualStudio.Shell.Interop.IVsStatusbar | Improve this Doc View Source VSInstance Gets the VisualStudioInstance of the environment. Declaration public VisualStudioInstance VSInstance { get; } Property Value Type Description VisualStudioInstance | Improve this Doc View Source WebBrowser Gets the WebBrowser of the environment. Declaration public WebBrowser WebBrowser { get; } Property Value Type Description WebBrowser Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override sealed void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Microsoft.VisualStudio.Shell.AsyncPackage.Dispose(System.Boolean) | Improve this Doc View Source GetGlobalService<TService>() Returns a service which is registered in the native Global Service Container. Declaration public TService GetGlobalService<TService>() where TService : class Returns Type Description TService The service being requested if available, otherwise null. Type Parameters Name Description TService The type which should be retrieved. | Improve this Doc View Source GetGlobalService<TBaseService, TService>() Returns a service which is registered in the native Global Service Container. Declaration public TService GetGlobalService<TBaseService, TService>() where TBaseService : class where TService : class Returns Type Description TService The service being requested if available, otherwise null. Type Parameters Name Description TBaseService The service type of the implemention which should be retrieved. TService The implemention type of the service which should be retrieved. | Improve this Doc View Source InitializeAsync(CancellationToken, IProgress<ServiceProgressData>) Declaration protected override sealed Task InitializeAsync(CancellationToken cancellationToken, IProgress<ServiceProgressData> progress) Parameters Type Name Description System.Threading.CancellationToken cancellationToken System.IProgress < Microsoft.VisualStudio.Shell.ServiceProgressData > progress Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.VisualStudio.Shell.AsyncPackage.InitializeAsync(System.Threading.CancellationToken, System.IProgress<Microsoft.VisualStudio.Shell.ServiceProgressData>) Events | Improve this Doc View Source OnDisposing Occurs when the environment disposes the Package. Declaration public event Action OnDisposing Event Type Type Description System.Action | Improve this Doc View Source OnInitializeAsync Occurs when the environment initializes the Package. Declaration public event Func<CancellationToken, IProgress<ServiceProgressData>, Task> OnInitializeAsync Event Type Type Description System.Func < System.Threading.CancellationToken , System.IProgress < Microsoft.VisualStudio.Shell.ServiceProgressData >, System.Threading.Tasks.Task > Implements Microsoft.VisualStudio.Shell.Interop.IVsPackage Microsoft.VisualStudio.OLE.Interop.IServiceProvider Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts System.ComponentModel.Design.IServiceContainer Microsoft.VisualStudio.Shell.Interop.IVsUserSettings Microsoft.VisualStudio.Shell.Interop.IVsUserSettingsMigration Microsoft.VisualStudio.Shell.Interop.IVsUserSettingsQuery Microsoft.VisualStudio.Shell.Interop.IVsToolWindowFactory Microsoft.VisualStudio.Shell.Interop.IVsToolboxItemProvider Microsoft.VisualStudio.Shell.Interop.IVsToolboxItemProvider2 Microsoft.VisualStudio.Shell.Interop.IAsyncServiceProvider Microsoft.VisualStudio.Shell.Interop.IAsyncLoadablePackageInitialize Microsoft.VisualStudio.Shell.IAsyncServiceProvider2 Microsoft.VisualStudio.Shell.IAsyncServiceContainer Microsoft.VisualStudio.Shell.Interop.IVsAsyncToolWindowFactory Microsoft.VisualStudio.Shell.Interop.IVsAsyncToolWindowFactoryProvider IServiceProviders System.IServiceProvider Microsoft.VisualStudio.Shell.IAsyncServiceProvider"
  },
  "api/DulcisX.Core.VisualStudioInstance.html": {
    "href": "api/DulcisX.Core.VisualStudioInstance.html",
    "title": "Class VisualStudioInstance | DulcisX Documentation",
    "keywords": "Class VisualStudioInstance Represents the current Visual Studio Instance. Inheritance System.Object VisualStudioInstance Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Core Assembly : DulcisX.dll Syntax public class VisualStudioInstance Methods | Improve this Doc View Source GetInstallDirectory() Gets the Install Directory of the current VisualStudioInstance . Declaration public string GetInstallDirectory() Returns Type Description System.String A string that contains the absolute path of the Install Directory. | Improve this Doc View Source GetLocalAppDataDirectory() Gets the Local AppData Directory of the current VisualStudioInstance . Declaration public string GetLocalAppDataDirectory() Returns Type Description System.String A string that contains the absolute path of the Local AppData Directory. | Improve this Doc View Source GetProjectDirectory() Gets the Project Directory of the current VisualStudioInstance . Declaration public string GetProjectDirectory() Returns Type Description System.String A string that contains the absolute path of the Project Directory. | Improve this Doc View Source GetReleaseDescription() Gets the Release Description of the current VisualStudioInstance . Declaration public string GetReleaseDescription() Returns Type Description System.String A string that contains the Release Description. | Improve this Doc View Source GetReleaseVersion() Gets the Release Version of the current VisualStudioInstance . Declaration public string GetReleaseVersion() Returns Type Description System.String A string that contains the Release Version. | Improve this Doc View Source GetVisualStudioDirectory() Gets the Visual Studio Directory of the current VisualStudioInstance . Declaration public string GetVisualStudioDirectory() Returns Type Description System.String A string that contains the absolute path of the Visual Studio Directory. | Improve this Doc View Source IsElevatedInstance() Gets a value indicating whether the current VisualStudioInstance is running as an elevated process. Declaration public bool IsElevatedInstance() Returns Type Description System.Boolean true if the process is elevated; otherwise false . | Improve this Doc View Source IsPrereleaseVersion() Gets a value indicating whether the version of the current VisualStudioInstance is a pre-release version. Declaration public bool IsPrereleaseVersion() Returns Type Description System.Boolean true if the instance a pre-release version; otherwise false . | Improve this Doc View Source RestartInstance(Boolean) Restarts the current VisualStudioInstance . Declaration public void RestartInstance(bool restartAsElevated = false) Parameters Type Name Description System.Boolean restartAsElevated Determines whether the new instance should be elevated or not."
  },
  "api/DulcisX.Exceptions.html": {
    "href": "api/DulcisX.Exceptions.html",
    "title": "Namespace DulcisX.Exceptions | DulcisX Documentation",
    "keywords": "Namespace DulcisX.Exceptions Classes InvalidHierarchyItemException The exception that is thrown for invalid calls to class members with the wrong Hierarchy type. NoFlagsAllowedException The exception that is thrown for methods which got passed a flags enum which is not allowed. OperationNotSuccessfulException The exception that is thrown for calls to class members which encounter an invald HResult."
  },
  "api/DulcisX.Exceptions.InvalidHierarchyItemException.html": {
    "href": "api/DulcisX.Exceptions.InvalidHierarchyItemException.html",
    "title": "Class InvalidHierarchyItemException | DulcisX Documentation",
    "keywords": "Class InvalidHierarchyItemException The exception that is thrown for invalid calls to class members with the wrong Hierarchy type. Inheritance System.Object System.Exception InvalidHierarchyItemException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : DulcisX.Exceptions Assembly : DulcisX.dll Syntax [Serializable] public class InvalidHierarchyItemException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source InvalidHierarchyItemException() Initializes a new instance of InvalidHierarchyItemException class. Declaration public InvalidHierarchyItemException() | Improve this Doc View Source InvalidHierarchyItemException(SerializationInfo, StreamingContext) Initializes a new instance of InvalidHierarchyItemException class. Declaration protected InvalidHierarchyItemException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Exceptions Type Condition System.ArgumentNullException info is null. System.Runtime.Serialization.SerializationException The class name is null or System.Exception.HResult is zero (0). | Improve this Doc View Source InvalidHierarchyItemException(String) Initializes a new instance of InvalidHierarchyItemException class. Declaration public InvalidHierarchyItemException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc View Source InvalidHierarchyItemException(String, Exception) Initializes a new instance of InvalidHierarchyItemException class. Declaration public InvalidHierarchyItemException(string message, Exception inner) Parameters Type Name Description System.String message The message that describes the error. System.Exception inner The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/DulcisX.Exceptions.NoFlagsAllowedException.html": {
    "href": "api/DulcisX.Exceptions.NoFlagsAllowedException.html",
    "title": "Class NoFlagsAllowedException | DulcisX Documentation",
    "keywords": "Class NoFlagsAllowedException The exception that is thrown for methods which got passed a flags enum which is not allowed. Inheritance System.Object System.Exception NoFlagsAllowedException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : DulcisX.Exceptions Assembly : DulcisX.dll Syntax [Serializable] public class NoFlagsAllowedException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source NoFlagsAllowedException() Initializes a new instance of NoFlagsAllowedException class. Declaration public NoFlagsAllowedException() | Improve this Doc View Source NoFlagsAllowedException(SerializationInfo, StreamingContext) Initializes a new instance of NoFlagsAllowedException class. Declaration protected NoFlagsAllowedException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Exceptions Type Condition System.ArgumentNullException info is null. System.Runtime.Serialization.SerializationException The class name is null or System.Exception.HResult is zero (0). | Improve this Doc View Source NoFlagsAllowedException(String) Initializes a new instance of NoFlagsAllowedException class. Declaration public NoFlagsAllowedException(string enumType) Parameters Type Name Description System.String enumType The invalid enum. | Improve this Doc View Source NoFlagsAllowedException(String, Exception) Initializes a new instance of NoFlagsAllowedException class. Declaration public NoFlagsAllowedException(string message, Exception inner) Parameters Type Name Description System.String message The message that describes the error. System.Exception inner The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/DulcisX.Exceptions.OperationNotSuccessfulException.html": {
    "href": "api/DulcisX.Exceptions.OperationNotSuccessfulException.html",
    "title": "Class OperationNotSuccessfulException | DulcisX Documentation",
    "keywords": "Class OperationNotSuccessfulException The exception that is thrown for calls to class members which encounter an invald HResult. Inheritance System.Object System.Exception OperationNotSuccessfulException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : DulcisX.Exceptions Assembly : DulcisX.dll Syntax [Serializable] public class OperationNotSuccessfulException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source OperationNotSuccessfulException() Initializes a new instance of OperationNotSuccessfulException class. Declaration public OperationNotSuccessfulException() | Improve this Doc View Source OperationNotSuccessfulException(SerializationInfo, StreamingContext) Initializes a new instance of OperationNotSuccessfulException class. Declaration protected OperationNotSuccessfulException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Exceptions Type Condition System.ArgumentNullException info is null. System.Runtime.Serialization.SerializationException The class name is null or System.Exception.HResult is zero (0). | Improve this Doc View Source OperationNotSuccessfulException(String) Initializes a new instance of OperationNotSuccessfulException class. Declaration public OperationNotSuccessfulException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc View Source OperationNotSuccessfulException(String, Exception) Initializes a new instance of OperationNotSuccessfulException class. Declaration public OperationNotSuccessfulException(string message, Exception inner) Parameters Type Name Description System.String message The message that describes the error. System.Exception inner The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/DulcisX.Helpers.ExtendedHierarchyUtilities.html": {
    "href": "api/DulcisX.Helpers.ExtendedHierarchyUtilities.html",
    "title": "Class ExtendedHierarchyUtilities | DulcisX Documentation",
    "keywords": "Class ExtendedHierarchyUtilities Extends the Microsoft.Internal.VisualStudio.PlatformUI.HierarchyUtilities class. Inheritance System.Object ExtendedHierarchyUtilities Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Helpers Assembly : DulcisX.dll Syntax public static class ExtendedHierarchyUtilities Methods | Improve this Doc View Source IsMiscellaneousFilesProject(IVsHierarchy) Gets a value indicating whether a Microsoft.VisualStudio.Shell.Interop.IVsHierarchy is a Miscellaneous Files Project. Declaration public static bool IsMiscellaneousFilesProject(IVsHierarchy hierarchy) Parameters Type Name Description Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The hierarchy which should be tested. Returns Type Description System.Boolean true if the hierarchy is a Miscellaneous Files Project; otherwise false . | Improve this Doc View Source IsNodeType(IVsHierarchy, Guid) Gets a value indicating whether a Microsoft.VisualStudio.Shell.Interop.IVsHierarchy matches a given Microsoft.VisualStudio.VSConstants.CLSID . Declaration public static bool IsNodeType(IVsHierarchy hierarchy, Guid clsidGuid) Parameters Type Name Description Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The hierarchy which should be tested. System.Guid clsidGuid The Microsoft.VisualStudio.VSConstants.CLSID guid which should be tested for. Returns Type Description System.Boolean true if the hierarchy matches the given Microsoft.VisualStudio.VSConstants.CLSID ; otherwise false . | Improve this Doc View Source IsRealProject(IVsHierarchy) Gets a value indicating whether a Microsoft.VisualStudio.Shell.Interop.IVsHierarchy is a real Project. The Microsoft.Internal.VisualStudio.PlatformUI.HierarchyUtilities.IsProject(Microsoft.VisualStudio.Shell.IVsHierarchyItemIdentity) method returns true for Solution Folders, which this method doesn't. Declaration public static bool IsRealProject(IVsHierarchy hierarchy) Parameters Type Name Description Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The hierarchy which should be tested. Returns Type Description System.Boolean true if the hierarchy is a real Project; otherwise false . | Improve this Doc View Source IsSolutionItemsProject(IVsHierarchy) Gets a value indicating whether a Microsoft.VisualStudio.Shell.Interop.IVsHierarchy is a Solution Items Project. Declaration public static bool IsSolutionItemsProject(IVsHierarchy hierarchy) Parameters Type Name Description Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The hierarchy which should be tested. Returns Type Description System.Boolean true if the hierarchy is a Solution Items Project; otherwise false ."
  },
  "api/DulcisX.Helpers.html": {
    "href": "api/DulcisX.Helpers.html",
    "title": "Namespace DulcisX.Helpers | DulcisX Documentation",
    "keywords": "Namespace DulcisX.Helpers Classes ExtendedHierarchyUtilities Extends the Microsoft.Internal.VisualStudio.PlatformUI.HierarchyUtilities class. VsConverter Converts native method value results to their appropriate .Net Type and vice versa. VsHelper Provides useful helper methods across the Visual Studio SDK."
  },
  "api/DulcisX.Helpers.VsConverter.html": {
    "href": "api/DulcisX.Helpers.VsConverter.html",
    "title": "Class VsConverter | DulcisX Documentation",
    "keywords": "Class VsConverter Converts native method value results to their appropriate .Net Type and vice versa. Inheritance System.Object VsConverter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Helpers Assembly : DulcisX.dll Syntax public static class VsConverter Methods | Improve this Doc View Source AsBoolean(Int32) Converts an System.Int32 to a System.Boolean . Declaration public static bool AsBoolean(int value) Parameters Type Name Description System.Int32 value The value which should be converted. Returns Type Description System.Boolean A System.Boolean representation of the given System.Int32 . | Improve this Doc View Source FromBoolean(Boolean) Converts a System.Boolean to an System.Int32 . Declaration public static int FromBoolean(bool value) Parameters Type Name Description System.Boolean value The value which should be converted. Returns Type Description System.Int32 An System.Int32 representation of the given System.Boolean ."
  },
  "api/DulcisX.Helpers.VsHelper.html": {
    "href": "api/DulcisX.Helpers.VsHelper.html",
    "title": "Class VsHelper | DulcisX Documentation",
    "keywords": "Class VsHelper Provides useful helper methods across the Visual Studio SDK. Inheritance System.Object VsHelper Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Helpers Assembly : DulcisX.dll Syntax public static class VsHelper Methods | Improve this Doc View Source IsItemIdNil(UInt32) Gets a value indicating whether the identifier of the node is Nil. Declaration public static bool IsItemIdNil(uint itemId) Parameters Type Name Description System.UInt32 itemId The identifier of the node which should be checked. Returns Type Description System.Boolean true if the identifier is Nil; otherwise false ."
  },
  "api/DulcisX.Nodes.AddedPhysicalNode-2.html": {
    "href": "api/DulcisX.Nodes.AddedPhysicalNode-2.html",
    "title": "Class AddedPhysicalNode<TNodeType, TFlag> | DulcisX Documentation",
    "keywords": "Class AddedPhysicalNode<TNodeType, TFlag> Represents a newly added IPhysicalNode . Inheritance System.Object ChangedNodeBase <TNodeType, TFlag> AddedPhysicalNode<TNodeType, TFlag> Inherited Members ChangedNodeBase<TNodeType, TFlag>.Node ChangedNodeBase<TNodeType, TFlag>.Flag System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Nodes Assembly : DulcisX.dll Syntax public class AddedPhysicalNode<TNodeType, TFlag> : ChangedNodeBase<TNodeType, TFlag> where TNodeType : IPhysicalNode where TFlag : struct, Enum Type Parameters Name Description TNodeType The type of the node which got changed. TFlag The enumeration which specifies what happend to the IPhysicalNode ."
  },
  "api/DulcisX.Nodes.BaseNode.html": {
    "href": "api/DulcisX.Nodes.BaseNode.html",
    "title": "Class BaseNode | DulcisX Documentation",
    "keywords": "Class BaseNode Represents the most basic Hierarchy Node. Inheritance System.Object BaseNode ProjectItemNode SolutionItemNode UnknownNode Implements INamedNode IBaseNode Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Nodes Assembly : DulcisX.dll Syntax public abstract class BaseNode : INamedNode, IBaseNode Constructors | Improve this Doc View Source BaseNode(SolutionNode, IVsHierarchy, UInt32) Initializes a new instance of the BaseNode class. Declaration protected BaseNode(SolutionNode solution, IVsHierarchy hierarchy, uint itemId) Parameters Type Name Description SolutionNode solution The Solution in which the Node sits in. Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The Hierarchy in which the Node sits in. System.UInt32 itemId The Unique Identifier for the Node in the hierarchy . Properties | Improve this Doc View Source ItemId Gets the Unique Identifier for the Node in the UnderlyingHierarchy . Declaration public uint ItemId { get; } Property Value Type Description System.UInt32 | Improve this Doc View Source NodeType Gets the Type of current Node. Declaration public abstract NodeTypes NodeType { get; } Property Value Type Description NodeTypes | Improve this Doc View Source ParentSolution Gets the Solution in which the Node sits in. Declaration public virtual SolutionNode ParentSolution { get; } Property Value Type Description SolutionNode | Improve this Doc View Source UnderlyingHierarchy Gets the Hierarchy in which the Node sits in. Declaration public IVsHierarchy UnderlyingHierarchy { get; } Property Value Type Description Microsoft.VisualStudio.Shell.Interop.IVsHierarchy Methods | Improve this Doc View Source AsHierarchyItem() Returns the Microsoft.VisualStudio.Shell.IVsHierarchyItem which represents the current Node. Declaration public IVsHierarchyItem AsHierarchyItem() Returns Type Description Microsoft.VisualStudio.Shell.IVsHierarchyItem The the matching Microsoft.VisualStudio.Shell.IVsHierarchyItem . | Improve this Doc View Source GetChildren() Returns all immediate children Nodes of the current Node. Declaration public abstract IEnumerable<BaseNode> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable < BaseNode > An System.Collections.Generic.IEnumerable<T> with the children. | Improve this Doc View Source GetDisplayName() Returns the name displayed in the Visual Studio Solution Explorer. Declaration public string GetDisplayName() Returns Type Description System.String A string containg the display name of the Node. | Improve this Doc View Source GetParent() Returns the immediate parent Node of the current Node. Declaration public abstract BaseNode GetParent() Returns Type Description BaseNode The parent if any could be found, otherwise null. | Improve this Doc View Source GetParent(NodeTypes) Returns the first parent Node of the current Node, matching the given nodeType . Declaration public virtual BaseNode GetParent(NodeTypes nodeType) Parameters Type Name Description NodeTypes nodeType The Node type which should be serached for. Returns Type Description BaseNode The matching parent if any could be found, otherwise null. | Improve this Doc View Source IsTypeMatching(NodeTypes) Declaration public bool IsTypeMatching(NodeTypes nodeType) Parameters Type Name Description NodeTypes nodeType Returns Type Description System.Boolean Implements INamedNode IBaseNode"
  },
  "api/DulcisX.Nodes.ChangedNodeBase-2.html": {
    "href": "api/DulcisX.Nodes.ChangedNodeBase-2.html",
    "title": "Class ChangedNodeBase<TNodeType, TFlag> | DulcisX Documentation",
    "keywords": "Class ChangedNodeBase<TNodeType, TFlag> Represents a changed INamedNode . Inheritance System.Object ChangedNodeBase<TNodeType, TFlag> AddedPhysicalNode<TNodeType, TFlag> ChangedPhysicalSccNode<TNodeType, TFlag> RenamedPhysicalNode<TNodeType, TFlag> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Nodes Assembly : DulcisX.dll Syntax public abstract class ChangedNodeBase<TNodeType, TFlag> where TNodeType : INamedNode where TFlag : struct, Enum Type Parameters Name Description TNodeType The type of the node which got changed. TFlag The enumeration which specifies what happend to the INamedNode . Constructors | Improve this Doc View Source ChangedNodeBase(TNodeType, TFlag) Initializes a new instance of the ChangedNodeBase<TNodeType, TFlag> class. Declaration protected ChangedNodeBase(TNodeType node, TFlag flag) Parameters Type Name Description TNodeType node The Node which got changed. TFlag flag The enumeration which specifies what happend. Properties | Improve this Doc View Source Flag Gets the enumeration which specifies what happend to the INamedNode . Declaration public TFlag Flag { get; } Property Value Type Description TFlag | Improve this Doc View Source Node Gets the node which got changed. Declaration public TNodeType Node { get; } Property Value Type Description TNodeType"
  },
  "api/DulcisX.Nodes.ChangedPhysicalSccNode-2.html": {
    "href": "api/DulcisX.Nodes.ChangedPhysicalSccNode-2.html",
    "title": "Class ChangedPhysicalSccNode<TNodeType, TFlag> | DulcisX Documentation",
    "keywords": "Class ChangedPhysicalSccNode<TNodeType, TFlag> Represents an IPhysicalNode which Source Control state changed. Inheritance System.Object ChangedNodeBase <TNodeType, TFlag> ChangedPhysicalSccNode<TNodeType, TFlag> Inherited Members ChangedNodeBase<TNodeType, TFlag>.Node ChangedNodeBase<TNodeType, TFlag>.Flag System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Nodes Assembly : DulcisX.dll Syntax public class ChangedPhysicalSccNode<TNodeType, TFlag> : ChangedNodeBase<TNodeType, TFlag> where TNodeType : IPhysicalNode where TFlag : struct, Enum Type Parameters Name Description TNodeType The type of the node which got changed. TFlag The enumeration which specifies what happend to the IPhysicalNode ."
  },
  "api/DulcisX.Nodes.DocumentNode.html": {
    "href": "api/DulcisX.Nodes.DocumentNode.html",
    "title": "Class DocumentNode | DulcisX Documentation",
    "keywords": "Class DocumentNode Represents a document within a ProjectNode . Inheritance System.Object BaseNode ProjectItemNode DocumentNode Implements IPhysicalNode INamedNode IBaseNode Inherited Members ProjectItemNode.GetParentProject() ProjectItemNode.GetParent() ProjectItemNode.GetParent(NodeTypes) ProjectItemNode.GetChildren() ProjectItemNode.GetDefaultNamespace() BaseNode.ParentSolution BaseNode.UnderlyingHierarchy BaseNode.ItemId BaseNode.GetDisplayName() BaseNode.AsHierarchyItem() BaseNode.IsTypeMatching(NodeTypes) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Nodes Assembly : DulcisX.dll Syntax public class DocumentNode : ProjectItemNode, IPhysicalNode, INamedNode, IBaseNode Constructors | Improve this Doc View Source DocumentNode(SolutionNode, ProjectNode, UInt32) Initializes a new instance of the DocumentNode class. Declaration public DocumentNode(SolutionNode solution, ProjectNode project, uint itemId) Parameters Type Name Description SolutionNode solution The Solution in which the DocumentNode sits in. ProjectNode project The Project in which the DocumentNode sits in. System.UInt32 itemId The Unique Identifier for the DocumentNode in the project . | Improve this Doc View Source DocumentNode(SolutionNode, IVsHierarchy, UInt32) Initializes a new instance of the DocumentNode class. Declaration public DocumentNode(SolutionNode solution, IVsHierarchy hierarchy, uint itemId) Parameters Type Name Description SolutionNode solution The Solution in which the DocumentNode sits in. Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The Hierarchy of the Project in which the DocumentNode sits in. System.UInt32 itemId The Unique Identifier for the DocumentNode in the hierarchy . Properties | Improve this Doc View Source NodeType Gets the Type of current Node. Declaration public override NodeTypes NodeType { get; } Property Value Type Description NodeTypes Overrides BaseNode.NodeType Methods | Improve this Doc View Source ChangedSinceLastUserSave() Gets a value indicating whether the current DocumentNode was renamed since the last save in Visual Studio. Declaration public bool ChangedSinceLastUserSave() Returns Type Description System.Boolean true if the DocumentNode was renamed; otherwise false . | Improve this Doc View Source ChangeExtension(String) Changes the extension of the physical file of the current DocumentNode and updates the name in the Solution Explorer. Declaration public DocumentNode ChangeExtension(string extension) Parameters Type Name Description System.String extension A string containg the new extension of the file. Returns Type Description DocumentNode A new instance of a DocumentNode representing the renamed Document. | Improve this Doc View Source GetBuildAction() Returns the Build Action for the current DocumentNode . Declaration public string GetBuildAction() Returns Type Description System.String A string containing the Build Action value. | Improve this Doc View Source GetCopyToOutputDirectory() Returns the CopyToOutputDirectory for the current DocumentNode . Declaration public CopyToOutputDirectory GetCopyToOutputDirectory() Returns Type Description CopyToOutputDirectory An CopyToOutputDirectory enumeration with the current value. | Improve this Doc View Source GetDocumentType() Returns the type of the current DocumentNode , determined by the extension of the file. Declaration public DocumentType GetDocumentType() Returns Type Description DocumentType A DocumentType enumeration. | Improve this Doc View Source GetFileName() Returns the name of the file, including the extension. Declaration public string GetFileName() Returns Type Description System.String A string containg the name of the file. | Improve this Doc View Source GetFullName() Returns the full name of the file. Declaration public string GetFullName() Returns Type Description System.String A string containg the full name of the file. | Improve this Doc View Source IsReadonly() Gets a value indicating whether the current DocumentNode is read-only. Declaration public bool IsReadonly() Returns Type Description System.Boolean true if the DocumentNode is read-only; otherwise false . | Improve this Doc View Source Rename(String) Renames the physical file of the current DocumentNode and updates the name in the Solution Explorer. Declaration public DocumentNode Rename(string newName) Parameters Type Name Description System.String newName A string containg the new name of the file. Can include extension of the file, but not necessarily. Returns Type Description DocumentNode true if the operation suceeded a result; otherwise false . | Improve this Doc View Source Save(Boolean) Saves any changes to the current DocumentNode content of the file. Declaration public void Save(bool forceSave = false) Parameters Type Name Description System.Boolean forceSave Determines whether to force the file save operation or not. | Improve this Doc View Source SetCopyToOutputDirectory(CopyToOutputDirectory) Sets the current Output Directory settings. Declaration public void SetCopyToOutputDirectory(CopyToOutputDirectory copyToOutputDirectory) Parameters Type Name Description CopyToOutputDirectory copyToOutputDirectory The CopyToOutputDirectory settings. Implements IPhysicalNode INamedNode IBaseNode"
  },
  "api/DulcisX.Nodes.Events.CancelTraslaterToken.html": {
    "href": "api/DulcisX.Nodes.Events.CancelTraslaterToken.html",
    "title": "Class CancelTraslaterToken | DulcisX Documentation",
    "keywords": "Class CancelTraslaterToken Allows for cancellation of an operation. Inheritance System.Object CancelTraslaterToken Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Nodes.Events Assembly : DulcisX.dll Syntax public class CancelTraslaterToken Properties | Improve this Doc View Source CancelRequested Gets a value indicating whether the operation was requested to cancel or not. Declaration public bool CancelRequested { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Cancel() Reuqests to cancel the current operation. Declaration public void Cancel()"
  },
  "api/DulcisX.Nodes.Events.EventDistributor-1.html": {
    "href": "api/DulcisX.Nodes.Events.EventDistributor-1.html",
    "title": "Class EventDistributor<TDelegate> | DulcisX Documentation",
    "keywords": "Class EventDistributor<TDelegate> Distributes native events between delegates given the NodeTypes . This is a wrapper around events. Inheritance System.Object EventDistributor<TDelegate> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Nodes.Events Assembly : DulcisX.dll Syntax public sealed class EventDistributor<TDelegate> where TDelegate : Delegate Type Parameters Name Description TDelegate Methods | Improve this Doc View Source Hook(NodeTypes, TDelegate) Hooks a callback method to the event. Declaration public void Hook(NodeTypes nodeTypes, TDelegate callback) Parameters Type Name Description NodeTypes nodeTypes The Node types on which to call the callback methods. TDelegate callback The callback which should be called at the raise of the event. | Improve this Doc View Source Hook(NodeTypes, TDelegate[]) Hooks callback methods to the event. Declaration public void Hook(NodeTypes nodeTypes, params TDelegate[] callbacks) Parameters Type Name Description NodeTypes nodeTypes The Node types on which to call the callback methods. TDelegate[] callbacks A list of callbacks which should be called at the raise of the event. | Improve this Doc View Source UnHook(NodeTypes, TDelegate) UnHooks a callback method from the event. Declaration public void UnHook(NodeTypes nodeTypes, TDelegate callback) Parameters Type Name Description NodeTypes nodeTypes The Node types on which to remove the callback method. TDelegate callback The callback which should be removed from the event. | Improve this Doc View Source UnHook(NodeTypes, TDelegate[]) UnHooks callback methods from the event. Declaration public void UnHook(NodeTypes nodeTypes, params TDelegate[] callbacks) Parameters Type Name Description NodeTypes nodeTypes The Node types on which to remove the callback methods. TDelegate[] callbacks The callbacks which should be removed from the event. | Improve this Doc View Source UnHookAll() UnHooks all callback methods, from all Node type, from the event. Declaration public void UnHookAll() | Improve this Doc View Source UnHookAll(NodeTypes) UnHooks all callback methods from the event. Declaration public void UnHookAll(NodeTypes nodeTypes) Parameters Type Name Description NodeTypes nodeTypes The Node types from which all callback methods should be removed."
  },
  "api/DulcisX.Nodes.Events.html": {
    "href": "api/DulcisX.Nodes.Events.html",
    "title": "Namespace DulcisX.Nodes.Events | DulcisX Documentation",
    "keywords": "Namespace DulcisX.Nodes.Events Classes CancelTraslaterToken Allows for cancellation of an operation. EventDistributor<TDelegate> Distributes native events between delegates given the NodeTypes . This is a wrapper around events. NodeEventSink Provides basic logic for the inheritance of native Visual Studio Node Events. Interfaces INodeSelectionEvents Provides events, which occur on Solution Explorer Node selection changes. Provided by the Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents interface. IOpenNodeEvents Provides events, which occur on changes to Nodes which are in the Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable . IProjectNodeChangeEvents Provides events, which occur on changes to ProjectItemNode s within all ProjectNode s. Provided by the Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2 interface. ISolutionBuildEvents Provides events, which occur on build changes in a SolutionNode . Provided by the Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents interface. ISolutionEvents Provides generic events, which occur in a SolutionNode . Provided by the Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents interface. ISolutionLoadEvents Provides events, which occur on SolutionNode load. Provided by the Microsoft.VisualStudio.Shell.Interop.IVsSolutionLoadEvents interface."
  },
  "api/DulcisX.Nodes.Events.INodeSelectionEvents.html": {
    "href": "api/DulcisX.Nodes.Events.INodeSelectionEvents.html",
    "title": "Interface INodeSelectionEvents | DulcisX Documentation",
    "keywords": "Interface INodeSelectionEvents Provides events, which occur on Solution Explorer Node selection changes. Provided by the Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents interface. Namespace : DulcisX.Nodes.Events Assembly : DulcisX.dll Syntax public interface INodeSelectionEvents Events | Improve this Doc View Source OnSelected Occurs when user selected Nodes in the Solution Explorer change. Declaration event Action<IEnumerable<BaseNode>> OnSelected Event Type Type Description System.Action < System.Collections.Generic.IEnumerable < BaseNode >>"
  },
  "api/DulcisX.Nodes.Events.IOpenNodeEvents.html": {
    "href": "api/DulcisX.Nodes.Events.IOpenNodeEvents.html",
    "title": "Interface IOpenNodeEvents | DulcisX Documentation",
    "keywords": "Interface IOpenNodeEvents Provides events, which occur on changes to Nodes which are in the Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable . Namespace : DulcisX.Nodes.Events Assembly : DulcisX.dll Syntax public interface IOpenNodeEvents Properties | Improve this Doc View Source OnAttributeChanged Occurs when any attributes on an IPhysicalNode get changed. Declaration EventDistributor<Action<IPhysicalNode, OpenNodeAttribute>> OnAttributeChanged { get; } Property Value Type Description EventDistributor < System.Action < IPhysicalNode , OpenNodeAttribute >> | Improve this Doc View Source OnMoved Occurs when an IPhysicalNode gets moved. Declaration EventDistributor<Action<IPhysicalNode, string, string>> OnMoved { get; } Property Value Type Description EventDistributor < System.Action < IPhysicalNode , System.String , System.String >> | Improve this Doc View Source OnNodeLocked Occurs when an IPhysicalNode gets locked. Declaration EventDistributor<Action<IPhysicalNode, _VSRDTFLAGS, uint, uint>> OnNodeLocked { get; } Property Value Type Description EventDistributor < System.Action < IPhysicalNode , Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS , System.UInt32 , System.UInt32 >> | Improve this Doc View Source OnNodeUnlocked Occurs when an IPhysicalNode gets unlocked. Declaration EventDistributor<Action<IPhysicalNode, _VSRDTFLAGS, uint, uint>> OnNodeUnlocked { get; } Property Value Type Description EventDistributor < System.Action < IPhysicalNode , Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS , System.UInt32 , System.UInt32 >> | Improve this Doc View Source OnNodeWindowHidden Occurs when an IPhysicalNode has a Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame which got hidden. Declaration EventDistributor<Action<IPhysicalNode, IVsWindowFrame>> OnNodeWindowHidden { get; } Property Value Type Description EventDistributor < System.Action < IPhysicalNode , Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame >> | Improve this Doc View Source OnNodeWindowShow Occurs when an IPhysicalNode gets opened in an Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame . Declaration EventDistributor<Action<IPhysicalNode, bool, IVsWindowFrame>> OnNodeWindowShow { get; } Property Value Type Description EventDistributor < System.Action < IPhysicalNode , System.Boolean , Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame >> | Improve this Doc View Source OnRenamed Occurs when an IPhysicalNode gets renamed. Declaration EventDistributor<Action<IPhysicalNode, string, string>> OnRenamed { get; } Property Value Type Description EventDistributor < System.Action < IPhysicalNode , System.String , System.String >> | Improve this Doc View Source OnSave Occurs when an IPhysicalNode gets saved. Declaration EventDistributor<Action<IPhysicalNode>> OnSave { get; } Property Value Type Description EventDistributor < System.Action < IPhysicalNode >> | Improve this Doc View Source OnSaved Occurs when an IPhysicalNode gets saved. Declaration EventDistributor<Action<IPhysicalNode>> OnSaved { get; } Property Value Type Description EventDistributor < System.Action < IPhysicalNode >>"
  },
  "api/DulcisX.Nodes.Events.IProjectNodeChangeEvents.html": {
    "href": "api/DulcisX.Nodes.Events.IProjectNodeChangeEvents.html",
    "title": "Interface IProjectNodeChangeEvents | DulcisX Documentation",
    "keywords": "Interface IProjectNodeChangeEvents Provides events, which occur on changes to ProjectItemNode s within all ProjectNode s. Provided by the Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2 interface. Namespace : DulcisX.Nodes.Events Assembly : DulcisX.dll Syntax public interface IProjectNodeChangeEvents Events | Improve this Doc View Source OnDocumentsAdded Occurs when DocumentNode (s) get added to a ProjectNode . Declaration event Action<IEnumerable<AddedPhysicalNode<DocumentNode, VSADDFILEFLAGS>>> OnDocumentsAdded Event Type Type Description System.Action < System.Collections.Generic.IEnumerable < AddedPhysicalNode < DocumentNode , Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS >>> | Improve this Doc View Source OnDocumentSccStatusChanged Occurs when the source control status of IPhysicalNode (s) change. Declaration event Action<IEnumerable<ChangedPhysicalSccNode<IPhysicalNode, __SccStatus>>> OnDocumentSccStatusChanged Event Type Type Description System.Action < System.Collections.Generic.IEnumerable < ChangedPhysicalSccNode < IPhysicalNode , Microsoft.VisualStudio.Shell.Interop.__SccStatus >>> | Improve this Doc View Source OnDocumentsRemoved Occurs when DocumentNode (s) get removed from a ProjectNode . Declaration event Action<IEnumerable<RemovedPhysicalNode<PhysicalNodeRemovedFlags>>> OnDocumentsRemoved Event Type Type Description System.Action < System.Collections.Generic.IEnumerable < RemovedPhysicalNode < PhysicalNodeRemovedFlags >>> | Improve this Doc View Source OnDocumentsRenamed Occurs when DocumentNode (s) get renamed. Declaration event Action<IEnumerable<RenamedPhysicalNode<DocumentNode, VSRENAMEFILEFLAGS>>> OnDocumentsRenamed Event Type Type Description System.Action < System.Collections.Generic.IEnumerable < RenamedPhysicalNode < DocumentNode , Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS >>> | Improve this Doc View Source OnFoldersAdded Occurs when FolderNode (s) get added to a ProjectNode . Declaration event Action<IEnumerable<AddedPhysicalNode<FolderNode, VSADDDIRECTORYFLAGS>>> OnFoldersAdded Event Type Type Description System.Action < System.Collections.Generic.IEnumerable < AddedPhysicalNode < FolderNode , Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS >>> | Improve this Doc View Source OnFoldersRemoved Occurs when FolderNode (s) get added from a ProjectNode . Declaration event Action<IEnumerable<RemovedPhysicalNode<PhysicalNodeRemovedFlags>>> OnFoldersRemoved Event Type Type Description System.Action < System.Collections.Generic.IEnumerable < RemovedPhysicalNode < PhysicalNodeRemovedFlags >>> | Improve this Doc View Source OnFoldersRenamed Occurs when FolderNode (s) get renamed. Declaration event Action<IEnumerable<RenamedPhysicalNode<FolderNode, VSRENAMEDIRECTORYFLAGS>>> OnFoldersRenamed Event Type Type Description System.Action < System.Collections.Generic.IEnumerable < RenamedPhysicalNode < FolderNode , Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS >>>"
  },
  "api/DulcisX.Nodes.Events.ISolutionBuildEvents.html": {
    "href": "api/DulcisX.Nodes.Events.ISolutionBuildEvents.html",
    "title": "Interface ISolutionBuildEvents | DulcisX Documentation",
    "keywords": "Interface ISolutionBuildEvents Provides events, which occur on build changes in a SolutionNode . Provided by the Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents interface. Namespace : DulcisX.Nodes.Events Assembly : DulcisX.dll Syntax public interface ISolutionBuildEvents Properties | Improve this Doc View Source OnProjectConfigurationChanged Occurs when a ProjectNode build configuration changed. Declaration EventDistributor<Action<ProjectNode>> OnProjectConfigurationChanged { get; } Property Value Type Description EventDistributor < System.Action < ProjectNode >> Events | Improve this Doc View Source OnProjectsConfigurationBuild Occurs before the first ProjectNode got build. Declaration event Action<CancelTraslaterToken> OnProjectsConfigurationBuild Event Type Type Description System.Action < CancelTraslaterToken > | Improve this Doc View Source OnSolutionBuild Occurs before a SolutionNode gets build. Declaration event Action<CancelTraslaterToken> OnSolutionBuild Event Type Type Description System.Action < CancelTraslaterToken > | Improve this Doc View Source OnSolutionBuildCancel Occurs when a SolutionNode build got cancled. Declaration event Action OnSolutionBuildCancel Event Type Type Description System.Action | Improve this Doc View Source OnSolutionBuilt Occurs when a SolutionNode got built. Declaration event Action<bool, bool, bool> OnSolutionBuilt Event Type Type Description System.Action < System.Boolean , System.Boolean , System.Boolean >"
  },
  "api/DulcisX.Nodes.Events.ISolutionEvents.html": {
    "href": "api/DulcisX.Nodes.Events.ISolutionEvents.html",
    "title": "Interface ISolutionEvents | DulcisX Documentation",
    "keywords": "Interface ISolutionEvents Provides generic events, which occur in a SolutionNode . Provided by the Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents interface. Inherited Members ISolutionLoadEvents.OnBackgroundSolutionLoad ISolutionLoadEvents.OnBackgroundSolutionLoaded Namespace : DulcisX.Nodes.Events Assembly : DulcisX.dll Syntax public interface ISolutionEvents : ISolutionLoadEvents Properties | Improve this Doc View Source OnProjectClose Occurs when a ProjectNode gets closed in a SolutionNode . This either happens on Project unload or Project removal. Declaration EventDistributor<Action<ProjectNode, bool>> OnProjectClose { get; } Property Value Type Description EventDistributor < System.Action < ProjectNode , System.Boolean >> | Improve this Doc View Source OnProjectLoaded Occurs when a ProjectNode got loaded. Declaration EventDistributor<Action<ProjectNode, ProjectNode>> OnProjectLoaded { get; } Property Value Type Description EventDistributor < System.Action < ProjectNode , ProjectNode >> | Improve this Doc View Source OnProjectOpened Occurs when a ProjectNode gets opened in a SolutionNode . This either happens on Project reload or Project addition. Declaration EventDistributor<Action<ProjectNode, bool>> OnProjectOpened { get; } Property Value Type Description EventDistributor < System.Action < ProjectNode , System.Boolean >> | Improve this Doc View Source OnProjectRenamed Occurs when a ProjectNode got renamed. Declaration EventDistributor<Action<ProjectNode>> OnProjectRenamed { get; } Property Value Type Description EventDistributor < System.Action < ProjectNode >> | Improve this Doc View Source OnProjectUnload Occurs when a ProjectNode got unloaded. Declaration EventDistributor<Action<ProjectNode, ProjectNode>> OnProjectUnload { get; } Property Value Type Description EventDistributor < System.Action < ProjectNode , ProjectNode >> | Improve this Doc View Source OnQueryProjectClose Occurs when someone asks to close a ProjectNode . Declaration EventDistributor<Action<ProjectNode, bool, CancelTraslaterToken>> OnQueryProjectClose { get; } Property Value Type Description EventDistributor < System.Action < ProjectNode , System.Boolean , CancelTraslaterToken >> | Improve this Doc View Source OnQueryProjectUnload Occurs when someone asks to unload a ProjectNode . Declaration EventDistributor<Action<ProjectNode, CancelTraslaterToken>> OnQueryProjectUnload { get; } Property Value Type Description EventDistributor < System.Action < ProjectNode , CancelTraslaterToken >> Events | Improve this Doc View Source OnProjectAdd Occurs when a ProjectNode got added to the SolutionNode . Declaration event Action<ProjectNode> OnProjectAdd Event Type Type Description System.Action < ProjectNode > | Improve this Doc View Source OnProjectRemove Occurs when a ProjectNode got removed to the SolutionNode . Declaration event Action<ProjectNode> OnProjectRemove Event Type Type Description System.Action < ProjectNode > | Improve this Doc View Source OnQuerySolutionClose Occurs when someone asks to close the Solution. Declaration event Action<CancelTraslaterToken> OnQuerySolutionClose Event Type Type Description System.Action < CancelTraslaterToken > | Improve this Doc View Source OnSolutionClose Occurs when before the Solution closes. Declaration event Action OnSolutionClose Event Type Type Description System.Action | Improve this Doc View Source OnSolutionClosed Occurs when the Solution closed. Declaration event Action OnSolutionClosed Event Type Type Description System.Action | Improve this Doc View Source OnSolutionOpened Occurs when a the Solution opened. Declaration event Action<bool> OnSolutionOpened Event Type Type Description System.Action < System.Boolean > | Improve this Doc View Source OnSolutionRenamed Occurs when the Solution got renamed. Declaration event Action<string, string> OnSolutionRenamed Event Type Type Description System.Action < System.String , System.String >"
  },
  "api/DulcisX.Nodes.Events.ISolutionLoadEvents.html": {
    "href": "api/DulcisX.Nodes.Events.ISolutionLoadEvents.html",
    "title": "Interface ISolutionLoadEvents | DulcisX Documentation",
    "keywords": "Interface ISolutionLoadEvents Provides events, which occur on SolutionNode load. Provided by the Microsoft.VisualStudio.Shell.Interop.IVsSolutionLoadEvents interface. Namespace : DulcisX.Nodes.Events Assembly : DulcisX.dll Syntax public interface ISolutionLoadEvents Events | Improve this Doc View Source OnBackgroundSolutionLoad Occurs when the solution starts loading in the background. Declaration event Action<string> OnBackgroundSolutionLoad Event Type Type Description System.Action < System.String > | Improve this Doc View Source OnBackgroundSolutionLoaded Occurs when the solution completed loading in the background. Declaration event Action OnBackgroundSolutionLoaded Event Type Type Description System.Action"
  },
  "api/DulcisX.Nodes.Events.NodeEventSink.html": {
    "href": "api/DulcisX.Nodes.Events.NodeEventSink.html",
    "title": "Class NodeEventSink | DulcisX Documentation",
    "keywords": "Class NodeEventSink Provides basic logic for the inheritance of native Visual Studio Node Events. Inheritance System.Object EventSink NodeEventSink Implements System.IDisposable Inherited Members EventSink.Cookie EventSink.SetCookie(UInt32) EventSink.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Nodes.Events Assembly : DulcisX.dll Syntax public abstract class NodeEventSink : EventSink, IDisposable Constructors | Improve this Doc View Source NodeEventSink(SolutionNode) Initializes a new instance of the FolderNode class. Declaration protected NodeEventSink(SolutionNode solution) Parameters Type Name Description SolutionNode solution The Solution Node of the Solution Explorer. Properties | Improve this Doc View Source Solution Gets the Solution Node of the Solution Explorer. Declaration protected SolutionNode Solution { get; } Property Value Type Description SolutionNode Implements System.IDisposable"
  },
  "api/DulcisX.Nodes.FolderNode.html": {
    "href": "api/DulcisX.Nodes.FolderNode.html",
    "title": "Class FolderNode | DulcisX Documentation",
    "keywords": "Class FolderNode Represents a folder within a ProjectNode . Inheritance System.Object BaseNode ProjectItemNode FolderNode Implements IPhysicalNode INamedNode IBaseNode Inherited Members ProjectItemNode.GetParentProject() ProjectItemNode.GetParent() ProjectItemNode.GetParent(NodeTypes) ProjectItemNode.GetChildren() ProjectItemNode.GetDefaultNamespace() BaseNode.ParentSolution BaseNode.UnderlyingHierarchy BaseNode.ItemId BaseNode.GetDisplayName() BaseNode.AsHierarchyItem() BaseNode.IsTypeMatching(NodeTypes) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Nodes Assembly : DulcisX.dll Syntax public class FolderNode : ProjectItemNode, IPhysicalNode, INamedNode, IBaseNode Constructors | Improve this Doc View Source FolderNode(SolutionNode, ProjectNode, UInt32) Initializes a new instance of the FolderNode class. Declaration public FolderNode(SolutionNode solution, ProjectNode project, uint itemId) Parameters Type Name Description SolutionNode solution The Solution in which the FolderNode sits in. ProjectNode project The Project in which the FolderNode sits in. System.UInt32 itemId The Unique Identifier for the FolderNode in the project . | Improve this Doc View Source FolderNode(SolutionNode, IVsHierarchy, UInt32) Initializes a new instance of the FolderNode class. Declaration public FolderNode(SolutionNode solution, IVsHierarchy hierarchy, uint itemId) Parameters Type Name Description SolutionNode solution The Solution in which the FolderNode sits in. Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The Hierarchy of the Project in which the FolderNode sits in. System.UInt32 itemId The Unique Identifier for the FolderNode in the hierarchy . Properties | Improve this Doc View Source NodeType Gets the Type of current Node. Declaration public override NodeTypes NodeType { get; } Property Value Type Description NodeTypes Overrides BaseNode.NodeType Methods | Improve this Doc View Source GetFileName() Returns the name of the file, including the extension. Declaration public string GetFileName() Returns Type Description System.String A string containg the name of the file. | Improve this Doc View Source GetFullName() Returns the full name of the file. Declaration public string GetFullName() Returns Type Description System.String A string containg the full name of the file. Implements IPhysicalNode INamedNode IBaseNode"
  },
  "api/DulcisX.Nodes.html": {
    "href": "api/DulcisX.Nodes.html",
    "title": "Namespace DulcisX.Nodes | DulcisX Documentation",
    "keywords": "Namespace DulcisX.Nodes Classes AddedPhysicalNode<TNodeType, TFlag> Represents a newly added IPhysicalNode . BaseNode Represents the most basic Hierarchy Node. ChangedNodeBase<TNodeType, TFlag> Represents a changed INamedNode . ChangedPhysicalSccNode<TNodeType, TFlag> Represents an IPhysicalNode which Source Control state changed. DocumentNode Represents a document within a ProjectNode . FolderNode Represents a folder within a ProjectNode . ProjectItemNode Represents the most basic ProjectNode children Node. ProjectNode Represents a project within a SolutionNode . RemovedPhysicalNode<TFlag> Represents a removed IPhysicalNode . RenamedPhysicalNode<TNodeType, TFlag> Represents a renamed IPhysicalNode . SelectedNodesCollection A wrapper for the Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection , gets access to the selected nodes in the Solution Explorer. SolutionFolderNode Represents a Solution Folder within a SolutionNode . SolutionItemNode Represents the most basic SolutionNode children Node. SolutionNode Represents a Solution, which is the root of Node of the Solution Explorer. UnknownNode Represents a Node which couldn't be identified. Interfaces IBaseNode Represents the most basic Hierarchy Node. INamedNode Represents a Node which has a name. IPhysicalNode Represents a Node which exists physically on disk."
  },
  "api/DulcisX.Nodes.IBaseNode.html": {
    "href": "api/DulcisX.Nodes.IBaseNode.html",
    "title": "Interface IBaseNode | DulcisX Documentation",
    "keywords": "Interface IBaseNode Represents the most basic Hierarchy Node. Namespace : DulcisX.Nodes Assembly : DulcisX.dll Syntax public interface IBaseNode Properties | Improve this Doc View Source ItemId Gets the Unique Identifier for the Node in the UnderlyingHierarchy . Declaration uint ItemId { get; } Property Value Type Description System.UInt32 | Improve this Doc View Source NodeType Gets the Type of current Node. Declaration [Obsolete(\"This method should be replaced with type comparison.\")] NodeTypes NodeType { get; } Property Value Type Description NodeTypes | Improve this Doc View Source ParentSolution Gets the Solution in which the Node sits in. Declaration SolutionNode ParentSolution { get; } Property Value Type Description SolutionNode | Improve this Doc View Source UnderlyingHierarchy Gets the Hierarchy in which the Node sits in. Declaration IVsHierarchy UnderlyingHierarchy { get; } Property Value Type Description Microsoft.VisualStudio.Shell.Interop.IVsHierarchy Methods | Improve this Doc View Source AsHierarchyItem() Returns the Microsoft.VisualStudio.Shell.IVsHierarchyItem which represents the current Node. Declaration IVsHierarchyItem AsHierarchyItem() Returns Type Description Microsoft.VisualStudio.Shell.IVsHierarchyItem The the matching Microsoft.VisualStudio.Shell.IVsHierarchyItem . | Improve this Doc View Source GetChildren() Returns all immediate children Nodes of the current Node. Declaration IEnumerable<BaseNode> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable < BaseNode > An System.Collections.Generic.IEnumerable<T> with the children. | Improve this Doc View Source GetParent() Returns the immediate parent Node of the current Node. Declaration BaseNode GetParent() Returns Type Description BaseNode The parent if any could be found, otherwise null. | Improve this Doc View Source GetParent(NodeTypes) Returns the first parent Node of the current Node, matching the given nodeType . Declaration BaseNode GetParent(NodeTypes nodeType) Parameters Type Name Description NodeTypes nodeType The Node type which should be serached for. Returns Type Description BaseNode The matching parent if any could be found, otherwise null. | Improve this Doc View Source IsTypeMatching(NodeTypes) Declaration [Obsolete(\"This method should be replaced with type comparison.\")] bool IsTypeMatching(NodeTypes nodeType) Parameters Type Name Description NodeTypes nodeType Returns Type Description System.Boolean"
  },
  "api/DulcisX.Nodes.INamedNode.html": {
    "href": "api/DulcisX.Nodes.INamedNode.html",
    "title": "Interface INamedNode | DulcisX Documentation",
    "keywords": "Interface INamedNode Represents a Node which has a name. Inherited Members IBaseNode.ParentSolution IBaseNode.UnderlyingHierarchy IBaseNode.ItemId IBaseNode.NodeType IBaseNode.GetParent() IBaseNode.GetParent(NodeTypes) IBaseNode.AsHierarchyItem() IBaseNode.GetChildren() IBaseNode.IsTypeMatching(NodeTypes) Namespace : DulcisX.Nodes Assembly : DulcisX.dll Syntax public interface INamedNode : IBaseNode Methods | Improve this Doc View Source GetDisplayName() Returns the name displayed in the Visual Studio Solution Explorer. Declaration string GetDisplayName() Returns Type Description System.String A string containg the display name of the Node."
  },
  "api/DulcisX.Nodes.IPhysicalNode.html": {
    "href": "api/DulcisX.Nodes.IPhysicalNode.html",
    "title": "Interface IPhysicalNode | DulcisX Documentation",
    "keywords": "Interface IPhysicalNode Represents a Node which exists physically on disk. Inherited Members INamedNode.GetDisplayName() IBaseNode.ParentSolution IBaseNode.UnderlyingHierarchy IBaseNode.ItemId IBaseNode.NodeType IBaseNode.GetParent() IBaseNode.GetParent(NodeTypes) IBaseNode.AsHierarchyItem() IBaseNode.GetChildren() IBaseNode.IsTypeMatching(NodeTypes) Namespace : DulcisX.Nodes Assembly : DulcisX.dll Syntax public interface IPhysicalNode : INamedNode, IBaseNode Methods | Improve this Doc View Source GetFileName() Returns the name of the file, including the extension. Declaration string GetFileName() Returns Type Description System.String A string containg the name of the file. | Improve this Doc View Source GetFullName() Returns the full name of the file. Declaration string GetFullName() Returns Type Description System.String A string containg the full name of the file."
  },
  "api/DulcisX.Nodes.ProjectItemNode.html": {
    "href": "api/DulcisX.Nodes.ProjectItemNode.html",
    "title": "Class ProjectItemNode | DulcisX Documentation",
    "keywords": "Class ProjectItemNode Represents the most basic ProjectNode children Node. Inheritance System.Object BaseNode ProjectItemNode DocumentNode FolderNode Implements INamedNode IBaseNode Inherited Members BaseNode.ParentSolution BaseNode.UnderlyingHierarchy BaseNode.ItemId BaseNode.NodeType BaseNode.GetDisplayName() BaseNode.AsHierarchyItem() BaseNode.IsTypeMatching(NodeTypes) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Nodes Assembly : DulcisX.dll Syntax public abstract class ProjectItemNode : BaseNode, INamedNode, IBaseNode Constructors | Improve this Doc View Source ProjectItemNode(SolutionNode, ProjectNode, UInt32) Initializes a new instance of the ProjectItemNode class. Declaration protected ProjectItemNode(SolutionNode solution, ProjectNode project, uint itemId) Parameters Type Name Description SolutionNode solution The Solution in which the Node sits in. ProjectNode project The Project in which the Node sits in. System.UInt32 itemId The Unique Identifier for the Node in the project . | Improve this Doc View Source ProjectItemNode(SolutionNode, IVsHierarchy, UInt32) Initializes a new instance of the ProjectItemNode class. Declaration protected ProjectItemNode(SolutionNode solution, IVsHierarchy hierarchy, uint itemId) Parameters Type Name Description SolutionNode solution The Solution in which the Node sits in. Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The Hierarchy of the Project in which the ProjectItemNode sits in. System.UInt32 itemId The Unique Identifier for the ProjectItemNode in the hierarchy . Methods | Improve this Doc View Source GetChildren() Returns all immediate children Nodes of the current Node. Declaration public override IEnumerable<BaseNode> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable < BaseNode > An System.Collections.Generic.IEnumerable<T> with the children. Overrides BaseNode.GetChildren() | Improve this Doc View Source GetDefaultNamespace() Returns the default namespace for the current Node. Declaration public string GetDefaultNamespace() Returns Type Description System.String A string which contains the default namespace for the current Node. | Improve this Doc View Source GetParent() Returns the immediate parent Node of the current Node. Declaration public override BaseNode GetParent() Returns Type Description BaseNode The parent if any could be found, otherwise null. Overrides BaseNode.GetParent() | Improve this Doc View Source GetParent(NodeTypes) Returns the first parent Node of the current Node, matching the given nodeType . Declaration public override BaseNode GetParent(NodeTypes nodeType) Parameters Type Name Description NodeTypes nodeType The Node type which should be serached for. Returns Type Description BaseNode The matching parent if any could be found, otherwise null. Overrides BaseNode.GetParent(NodeTypes) | Improve this Doc View Source GetParentProject() Returns the Project in which the Nodes sits in. Declaration public ProjectNode GetParentProject() Returns Type Description ProjectNode The parent Project in which the Nodes sits in. Implements INamedNode IBaseNode"
  },
  "api/DulcisX.Nodes.ProjectNode.html": {
    "href": "api/DulcisX.Nodes.ProjectNode.html",
    "title": "Class ProjectNode | DulcisX Documentation",
    "keywords": "Class ProjectNode Represents a project within a SolutionNode . Inheritance System.Object BaseNode SolutionItemNode ProjectNode Implements IPhysicalNode INamedNode IBaseNode Inherited Members SolutionItemNode.GetParent() SolutionItemNode.GetAllChildrenAsync(CancellationToken) SolutionItemNode.GetAllChildrenAsync(Predicate<BaseNode>, CancellationToken) BaseNode.ParentSolution BaseNode.UnderlyingHierarchy BaseNode.ItemId BaseNode.GetDisplayName() BaseNode.GetParent(NodeTypes) BaseNode.AsHierarchyItem() BaseNode.IsTypeMatching(NodeTypes) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Nodes Assembly : DulcisX.dll Syntax public class ProjectNode : SolutionItemNode, IPhysicalNode, INamedNode, IBaseNode Constructors | Improve this Doc View Source ProjectNode(SolutionNode, IVsHierarchy, NodeTypes) Initializes a new instance of the ProjectNode class. Declaration public ProjectNode(SolutionNode solution, IVsHierarchy hierarchy, NodeTypes nodeType = NodeTypes.Project) Parameters Type Name Description SolutionNode solution The Solution in which the ProjectNode sits in. Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The Hierarchy of the Project. NodeTypes nodeType The type of the current Project. Properties | Improve this Doc View Source NodeType Gets the Type of current Node. Declaration public override NodeTypes NodeType { get; } Property Value Type Description NodeTypes Overrides BaseNode.NodeType | Improve this Doc View Source UnderlyingProject Gets the native Microsoft.VisualStudio.Shell.Interop.IVsProject for the current ProjectNode . Declaration public IVsProject UnderlyingProject { get; } Property Value Type Description Microsoft.VisualStudio.Shell.Interop.IVsProject | Improve this Doc View Source VsBuildPropertyStorage Gets the projects Microsoft.VisualStudio.Shell.Interop.IVsBuildPropertyStorage . Declaration public IVsBuildPropertyStorage VsBuildPropertyStorage { get; } Property Value Type Description Microsoft.VisualStudio.Shell.Interop.IVsBuildPropertyStorage Methods | Improve this Doc View Source AddExistingDocument(FolderNode, String) Adds a file which exists on disk to the current ProjectNode - Declaration public VSADDRESULT AddExistingDocument(FolderNode parentNode, string fullName) Parameters Type Name Description FolderNode parentNode The FolderNode in which the file should be placed in. System.String fullName The full name of the file on disk. Returns Type Description Microsoft.VisualStudio.Shell.Interop.VSADDRESULT An Microsoft.VisualStudio.Shell.Interop.VSADDRESULT enumeration which indicates if the operation succeeded. | Improve this Doc View Source AddExistingDocument(String) Adds a file which exists on disk to the current ProjectNode - Declaration public VSADDRESULT AddExistingDocument(string fullName) Parameters Type Name Description System.String fullName The full name of the file on disk. Returns Type Description Microsoft.VisualStudio.Shell.Interop.VSADDRESULT An Microsoft.VisualStudio.Shell.Interop.VSADDRESULT enumeration which indicates if the operation succeeded. | Improve this Doc View Source CreateDocument(FolderNode, String) Creates a new DocumentNode in the current ProjectNode - Declaration public VSADDRESULT CreateDocument(FolderNode parentNode, string name) Parameters Type Name Description FolderNode parentNode The FolderNode in which the new DocumentNode should be placed in. System.String name The name of the new DocumentNode . Returns Type Description Microsoft.VisualStudio.Shell.Interop.VSADDRESULT An Microsoft.VisualStudio.Shell.Interop.VSADDRESULT enumeration which indicates if the operation succeeded. | Improve this Doc View Source CreateDocument(String) Creates a new DocumentNode in the current ProjectNode - Declaration public VSADDRESULT CreateDocument(string name) Parameters Type Name Description System.String name The name of the new DocumentNode . Returns Type Description Microsoft.VisualStudio.Shell.Interop.VSADDRESULT An Microsoft.VisualStudio.Shell.Interop.VSADDRESULT enumeration which indicates if the operation succeeded. | Improve this Doc View Source GetChildren() Returns all immediate children Nodes of the current Node. Declaration public override IEnumerable<BaseNode> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable < BaseNode > An System.Collections.Generic.IEnumerable<T> with the children. Overrides SolutionItemNode.GetChildren() | Improve this Doc View Source GetFileName() Returns the name of the file, including the extension. Declaration public string GetFileName() Returns Type Description System.String A string containg the name of the file. | Improve this Doc View Source GetFullName() Returns the full name of the file. Declaration public string GetFullName() Returns Type Description System.String A string containg the full name of the file. | Improve this Doc View Source GetGuid() Returns the Unique Identifier for the current ProjectNode in the SolutionNode . Declaration public Guid GetGuid() Returns Type Description System.Guid The Unique Identifier. | Improve this Doc View Source GetItemProperty(UInt32, DocumentProperty) Returns the value of the given DocumentProperty on a ProjectItemNode . Declaration public string GetItemProperty(uint itemId, DocumentProperty documentProperty) Parameters Type Name Description System.UInt32 itemId The Unique Identifier of the ProjectItemNode . DocumentProperty documentProperty The property of which its value should be retrieved. Returns Type Description System.String The value of the DocumentProperty . | Improve this Doc View Source GetOutputTypeAction() Returns the Project output type for the current ProjectNode . Declaration public __VSPROJOUTPUTTYPE GetOutputTypeAction() Returns Type Description Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE An Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE enumeration with the current value. | Improve this Doc View Source IsLoaded() Gets a value indicating whether the current ProjectNode is loaded. Declaration public bool IsLoaded() Returns Type Description System.Boolean true if the ProjectNode is loaded; otherwise false . | Improve this Doc View Source SaveAllChildren(Boolean) Saves the project file and all children within the current ProjectNode . Declaration public void SaveAllChildren(bool forceSave = false) Parameters Type Name Description System.Boolean forceSave Determines whether to force the file save operation or not. | Improve this Doc View Source SetItemProperty(UInt32, DocumentProperty, String) Sets the value of the given DocumentProperty on a ProjectItemNode . Declaration public void SetItemProperty(uint itemId, DocumentProperty documentProperty, string value) Parameters Type Name Description System.UInt32 itemId The Unique Identifier of the ProjectItemNode . DocumentProperty documentProperty The property of which its value should be retrieved. System.String value The string value to which the specified documentProperty should change to. | Improve this Doc View Source SetOutputTypeAction(__VSPROJOUTPUTTYPE) Sets the current Project output type. Declaration public void SetOutputTypeAction(__VSPROJOUTPUTTYPE outputType) Parameters Type Name Description Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE outputType The Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE settings. | Improve this Doc View Source TryGetPhysicalNode<TNode>(String, out TNode) Removes a ProjectItemNode from the current ProjectNode and removes it physically from the disk. A return value indicates whether the operation succeeded. Declaration public bool TryGetPhysicalNode<TNode>(string fullName, out TNode node) where TNode : class, IPhysicalNode Parameters Type Name Description System.String fullName A string containg the full name aka. the document moniker. TNode node The IPhysicalNode with the given fullName . Returns Type Description System.Boolean A return value indicates whether the operation succeeded. Type Parameters Name Description TNode The physical node which represents the fullName . | Improve this Doc View Source TryRemoveChildren(ProjectItemNode, out Int32) Removes a ProjectItemNode from the current ProjectNode and removes it physically from the disk. A return value indicates whether the operation succeeded. Declaration public bool TryRemoveChildren(ProjectItemNode node, out int errorCode) Parameters Type Name Description ProjectItemNode node The ProjectItemNode which should be removed. System.Int32 errorCode The error code, if the operation did not succeed, otherwise 0. Returns Type Description System.Boolean A return value indicates whether the operation succeeded. Implements IPhysicalNode INamedNode IBaseNode"
  },
  "api/DulcisX.Nodes.RemovedPhysicalNode-1.html": {
    "href": "api/DulcisX.Nodes.RemovedPhysicalNode-1.html",
    "title": "Class RemovedPhysicalNode<TFlag> | DulcisX Documentation",
    "keywords": "Class RemovedPhysicalNode<TFlag> Represents a removed IPhysicalNode . Inheritance System.Object RemovedPhysicalNode<TFlag> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Nodes Assembly : DulcisX.dll Syntax public class RemovedPhysicalNode<TFlag> where TFlag : struct, Enum Type Parameters Name Description TFlag The enumeration which specifies what happend to the IPhysicalNode . Properties | Improve this Doc View Source Flag Gets the enumeration which specifies what happend to the IPhysicalNode . Declaration public TFlag Flag { get; } Property Value Type Description TFlag | Improve this Doc View Source FullName Gets a string which contains the full name of the removed IPhysicalNode . Declaration public string FullName { get; } Property Value Type Description System.String | Improve this Doc View Source ParentProject Gets the project in which the IPhysicalNode was. Declaration public ProjectNode ParentProject { get; } Property Value Type Description ProjectNode"
  },
  "api/DulcisX.Nodes.RenamedPhysicalNode-2.html": {
    "href": "api/DulcisX.Nodes.RenamedPhysicalNode-2.html",
    "title": "Class RenamedPhysicalNode<TNodeType, TFlag> | DulcisX Documentation",
    "keywords": "Class RenamedPhysicalNode<TNodeType, TFlag> Represents a renamed IPhysicalNode . Inheritance System.Object ChangedNodeBase <TNodeType, TFlag> RenamedPhysicalNode<TNodeType, TFlag> Inherited Members ChangedNodeBase<TNodeType, TFlag>.Node ChangedNodeBase<TNodeType, TFlag>.Flag System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Nodes Assembly : DulcisX.dll Syntax public class RenamedPhysicalNode<TNodeType, TFlag> : ChangedNodeBase<TNodeType, TFlag> where TNodeType : IPhysicalNode where TFlag : struct, Enum Type Parameters Name Description TNodeType The type of the node which got changed. TFlag The enumeration which specifies what happend to the IPhysicalNode . Properties | Improve this Doc View Source NewFullName Gets the new full name of the renamed IPhysicalNode . Declaration public string NewFullName { get; } Property Value Type Description System.String | Improve this Doc View Source OldFullName Gets the old full name of the renamed IPhysicalNode . Declaration public string OldFullName { get; } Property Value Type Description System.String"
  },
  "api/DulcisX.Nodes.SelectedNodesCollection.html": {
    "href": "api/DulcisX.Nodes.SelectedNodesCollection.html",
    "title": "Class SelectedNodesCollection | DulcisX Documentation",
    "keywords": "Class SelectedNodesCollection A wrapper for the Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection , gets access to the selected nodes in the Solution Explorer. Inheritance System.Object SelectedNodesCollection Implements System.Collections.Generic.IEnumerable < BaseNode > System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Nodes Assembly : DulcisX.dll Syntax public class SelectedNodesCollection : IEnumerable<BaseNode>, IEnumerable Methods | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<BaseNode> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < BaseNode > | Improve this Doc View Source GetMultiSelection(IVsMultiItemSelect, SolutionNode) Returns all selected nodes is an Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect in the multiSelect . Declaration public static IEnumerable<BaseNode> GetMultiSelection(IVsMultiItemSelect multiSelect, SolutionNode solution) Parameters Type Name Description Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect multiSelect The native Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect interface containg the selected Nodes. SolutionNode solution The Solution in which the Nodes sit in. Returns Type Description System.Collections.Generic.IEnumerable < BaseNode > An System.Collections.Generic.IEnumerable<T> with the selected Nodes. | Improve this Doc View Source GetSelection(IVsMultiItemSelect, IVsHierarchy, UInt32, SolutionNode) Returns all selected nodes. Declaration public static IEnumerable<BaseNode> GetSelection(IVsMultiItemSelect multiSelect, IVsHierarchy hierarchy, uint itemId, SolutionNode solution) Parameters Type Name Description Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect multiSelect The native Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect interface containg the selected Nodes. Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The hierarchy which could contain the selected Node. System.UInt32 itemId The potential Unique Identifier for the selected Node in the hierarchy . SolutionNode solution The Solution in which the Nodes sit in. Returns Type Description System.Collections.Generic.IEnumerable < BaseNode > An System.Collections.Generic.IEnumerable<T> with the selected Nodes. | Improve this Doc View Source GetSingleSelection(IVsHierarchy, UInt32, SolutionNode) Returns the single selected node in the Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect . Declaration public static BaseNode GetSingleSelection(IVsHierarchy hierarchy, uint itemId, SolutionNode solution) Parameters Type Name Description Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The hierarchy which contains the selected Node. System.UInt32 itemId The Unique Identifier for the selected Node in the hierarchy . SolutionNode solution The Solution in which the Nodes sit in. Returns Type Description BaseNode An System.Collections.Generic.IEnumerable<T> with the selected Nodes. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/DulcisX.Nodes.SolutionFolderNode.html": {
    "href": "api/DulcisX.Nodes.SolutionFolderNode.html",
    "title": "Class SolutionFolderNode | DulcisX Documentation",
    "keywords": "Class SolutionFolderNode Represents a Solution Folder within a SolutionNode . Inheritance System.Object BaseNode SolutionItemNode SolutionFolderNode Implements INamedNode IBaseNode Inherited Members SolutionItemNode.GetParent() SolutionItemNode.GetChildren() SolutionItemNode.GetAllChildrenAsync(CancellationToken) SolutionItemNode.GetAllChildrenAsync(Predicate<BaseNode>, CancellationToken) BaseNode.ParentSolution BaseNode.UnderlyingHierarchy BaseNode.ItemId BaseNode.GetDisplayName() BaseNode.GetParent(NodeTypes) BaseNode.AsHierarchyItem() BaseNode.IsTypeMatching(NodeTypes) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Nodes Assembly : DulcisX.dll Syntax public class SolutionFolderNode : SolutionItemNode, INamedNode, IBaseNode Constructors | Improve this Doc View Source SolutionFolderNode(SolutionNode, IVsHierarchy) Initializes a new instance of the SolutionFolderNode class. Declaration public SolutionFolderNode(SolutionNode solution, IVsHierarchy hierarchy) Parameters Type Name Description SolutionNode solution The Solution in which the SolutionFolderNode sits in. Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The Hierarchy of the SolutionFolderNode itself. Properties | Improve this Doc View Source NodeType Gets the Type of current Node. Declaration public override NodeTypes NodeType { get; } Property Value Type Description NodeTypes Overrides BaseNode.NodeType Implements INamedNode IBaseNode"
  },
  "api/DulcisX.Nodes.SolutionItemNode.html": {
    "href": "api/DulcisX.Nodes.SolutionItemNode.html",
    "title": "Class SolutionItemNode | DulcisX Documentation",
    "keywords": "Class SolutionItemNode Represents the most basic SolutionNode children Node. Inheritance System.Object BaseNode SolutionItemNode ProjectNode SolutionFolderNode SolutionNode Implements INamedNode IBaseNode Inherited Members BaseNode.ParentSolution BaseNode.UnderlyingHierarchy BaseNode.ItemId BaseNode.NodeType BaseNode.GetDisplayName() BaseNode.GetParent(NodeTypes) BaseNode.AsHierarchyItem() BaseNode.IsTypeMatching(NodeTypes) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Nodes Assembly : DulcisX.dll Syntax public abstract class SolutionItemNode : BaseNode, INamedNode, IBaseNode Constructors | Improve this Doc View Source SolutionItemNode(SolutionNode, IVsHierarchy, UInt32) Initializes a new instance of the SolutionItemNode class. Declaration protected SolutionItemNode(SolutionNode solution, IVsHierarchy hierarchy, uint itemId) Parameters Type Name Description SolutionNode solution The Solution in which the SolutionItemNode sits in. Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The Hierarchy of the SolutionItemNode itself. System.UInt32 itemId The Unique Identifier for the SolutionItemNode in the hierarchy . Methods | Improve this Doc View Source GetAllChildrenAsync(Predicate<BaseNode>, CancellationToken) Asynchronously gets a flat list of filtered nodes that exist within the current node. Declaration public Task<IEnumerable<BaseNode>> GetAllChildrenAsync(Predicate<BaseNode> predicate, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Predicate < BaseNode > predicate A function to test each node for a condition. System.Threading.CancellationToken cancellationToken A cancellation token that can be used to cancel the asynchronous request. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IEnumerable < BaseNode >> A task that when complete provides the flattened set of hierarchy items. Remarks This method will never return, if being called in an OnInitializeAsync callback. You should instead wrap it in an Microsoft.VisualStudio.Threading.JoinableTaskFactory.RunAsync(System.Func{System.Threading.Tasks.Task}) call. | Improve this Doc View Source GetAllChildrenAsync(CancellationToken) Asynchronously gets a flat list of nodes that exist within the current node. Declaration public Task<IEnumerable<BaseNode>> GetAllChildrenAsync(CancellationToken ct = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken ct A cancellation token that can be used to cancel the asynchronous request. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IEnumerable < BaseNode >> A task that when complete provides the flattened set of hierarchy items. Remarks This method will never return, if being called in an OnInitializeAsync callback. You should instead wrap it in an Microsoft.VisualStudio.Threading.JoinableTaskFactory.RunAsync(System.Func{System.Threading.Tasks.Task}) call. | Improve this Doc View Source GetChildren() Returns all immediate children Nodes of the current Node. Declaration public override IEnumerable<BaseNode> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable < BaseNode > An System.Collections.Generic.IEnumerable<T> with the children. Overrides BaseNode.GetChildren() | Improve this Doc View Source GetParent() Returns the immediate parent Node of the current Node. Declaration public override BaseNode GetParent() Returns Type Description BaseNode The parent if any could be found, otherwise null. Overrides BaseNode.GetParent() Implements INamedNode IBaseNode"
  },
  "api/DulcisX.Nodes.SolutionNode.html": {
    "href": "api/DulcisX.Nodes.SolutionNode.html",
    "title": "Class SolutionNode | DulcisX Documentation",
    "keywords": "Class SolutionNode Represents a Solution, which is the root of Node of the Solution Explorer. Inheritance System.Object BaseNode SolutionItemNode SolutionNode Implements IPhysicalNode INamedNode IBaseNode Inherited Members SolutionItemNode.GetChildren() SolutionItemNode.GetAllChildrenAsync(CancellationToken) SolutionItemNode.GetAllChildrenAsync(Predicate<BaseNode>, CancellationToken) BaseNode.UnderlyingHierarchy BaseNode.ItemId BaseNode.GetDisplayName() BaseNode.AsHierarchyItem() BaseNode.IsTypeMatching(NodeTypes) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Nodes Assembly : DulcisX.dll Syntax public class SolutionNode : SolutionItemNode, IPhysicalNode, INamedNode, IBaseNode Constructors | Improve this Doc View Source SolutionNode(IVsSolution, IServiceProviders, Container) Initializes a new instance of the SolutionNode class. Declaration public SolutionNode(IVsSolution solution, IServiceProviders serviceProviders, Container container) Parameters Type Name Description Microsoft.VisualStudio.Shell.Interop.IVsSolution solution The native representation of the Solution. IServiceProviders serviceProviders The environments services SimpleInjector.Container container A Conainer which holds package and user specifc services. Properties | Improve this Doc View Source NodeSelectionEvents Provides access to a INodeSelectionEvents instance. Declaration public INodeSelectionEvents NodeSelectionEvents { get; } Property Value Type Description INodeSelectionEvents | Improve this Doc View Source NodeType Gets the Type of current Node. Declaration public override NodeTypes NodeType { get; } Property Value Type Description NodeTypes Overrides BaseNode.NodeType | Improve this Doc View Source OpenNodeEvents Provides access to a IOpenNodeEvents instance. Declaration public IOpenNodeEvents OpenNodeEvents { get; } Property Value Type Description IOpenNodeEvents | Improve this Doc View Source ParentSolution Gets the Solution in which the Node sits in. Declaration public override SolutionNode ParentSolution { get; } Property Value Type Description SolutionNode Overrides BaseNode.ParentSolution | Improve this Doc View Source ProjectNodeChangedEvents Provides access to a IProjectNodeChangeEvents instance. Declaration public IProjectNodeChangeEvents ProjectNodeChangedEvents { get; } Property Value Type Description IProjectNodeChangeEvents | Improve this Doc View Source SelectedNodes Gets a SelectedNodes instance for the current Solution Explorer. Declaration public SelectedNodesCollection SelectedNodes { get; } Property Value Type Description SelectedNodesCollection | Improve this Doc View Source ServiceContainer Gets the SimpleInjector.Container which holds package and user specifc services. Declaration public Container ServiceContainer { get; } Property Value Type Description SimpleInjector.Container | Improve this Doc View Source ServiceProviders Gets the IServiceProviders which hold the environments services. Declaration public IServiceProviders ServiceProviders { get; } Property Value Type Description IServiceProviders | Improve this Doc View Source SolutionBuildEvents Provides access to a Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents instance. Declaration public ISolutionBuildEvents SolutionBuildEvents { get; } Property Value Type Description ISolutionBuildEvents | Improve this Doc View Source SolutionEvents Provides access to a Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents instance. Declaration public ISolutionEvents SolutionEvents { get; } Property Value Type Description ISolutionEvents | Improve this Doc View Source UnderlyingSolution Gets the native Microsoft.VisualStudio.Shell.Interop.IVsSolution for the current SolutionNode . Declaration public IVsSolution UnderlyingSolution { get; } Property Value Type Description Microsoft.VisualStudio.Shell.Interop.IVsSolution Methods | Improve this Doc View Source GetAllProjects() Returns all projects in the current SolutionNode . Declaration public IEnumerable<ProjectNode> GetAllProjects() Returns Type Description System.Collections.Generic.IEnumerable < ProjectNode > An System.Collections.Generic.IEnumerable<T> containing all projects. | Improve this Doc View Source GetFileName() Returns the name of the file, including the extension. Declaration public string GetFileName() Returns Type Description System.String A string containg the name of the file. | Improve this Doc View Source GetFullName() Returns the full name of the file. Declaration public string GetFullName() Returns Type Description System.String A string containg the full name of the file. | Improve this Doc View Source GetParent() Returns the immediate parent Node of the current Node. Declaration public override BaseNode GetParent() Returns Type Description BaseNode The parent if any could be found, otherwise null. Overrides SolutionItemNode.GetParent() Remarks This method will always return null. A SolutionNode can't have any parents. | Improve this Doc View Source GetParent(NodeTypes) Returns the first parent Node of the current Node, matching the given nodeType . Declaration public override BaseNode GetParent(NodeTypes nodeType) Parameters Type Name Description NodeTypes nodeType The Node type which should be serached for. Returns Type Description BaseNode The matching parent if any could be found, otherwise null. Overrides BaseNode.GetParent(NodeTypes) Remarks This method will always return null. A SolutionNode can't have any parents. | Improve this Doc View Source GetProject(IVsHierarchy) Returns a new ProjectNode instance given the hierarchy of the project. Declaration public ProjectNode GetProject(IVsHierarchy hierarchy) Parameters Type Name Description Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The hierarchy of the project. Returns Type Description ProjectNode A new ProjectNode instance. | Improve this Doc View Source GetProject(Guid) Returns a new ProjectNode instance given the projectGuid of the project. Declaration public ProjectNode GetProject(Guid projectGuid) Parameters Type Name Description System.Guid projectGuid The guid of the project. Returns Type Description ProjectNode A new ProjectNode instance. | Improve this Doc View Source GetProject(String) Returns a new ProjectNode instance given the uniqueName of the project. Declaration public ProjectNode GetProject(string uniqueName) Parameters Type Name Description System.String uniqueName The unique name, aka. the full name, of the project. Returns Type Description ProjectNode A new ProjectNode instance. | Improve this Doc View Source GetStartupProjects() Returns all startup projects in the current SolutionNode . Declaration public IEnumerable<(ProjectNode Project, StartupOption Options)> GetStartupProjects() Returns Type Description System.Collections.Generic.IEnumerable < System.ValueTuple < ProjectNode , StartupOption >> An System.Collections.Generic.IEnumerable<T> containing all startup projects. | Improve this Doc View Source IsSolutionFullyLoaded() Gets a value indicating whether the current SolutionNode is fully loaded. Declaration public bool IsSolutionFullyLoaded() Returns Type Description System.Boolean true if the Solution is fully loaded; otherwise false . | Improve this Doc View Source IsTempSolution() Gets a value indicating whether the current SolutionNode is a temporary Solution. Declaration public bool IsTempSolution() Returns Type Description System.Boolean true if the Solution is temporary; otherwise false . | Improve this Doc View Source LoadUserConfiguration(IVsPersistSolutionOpts, String) Loads the user configuration specified in the .suo file. Declaration public void LoadUserConfiguration(IVsPersistSolutionOpts persistanceSolutionOptions, string streamKey) Parameters Type Name Description Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts persistanceSolutionOptions The Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts instance which handels all persistance operations. System.String streamKey The identifier for the stream to load. Usually any of the values in the CommonStreamKeys class. | Improve this Doc View Source SaveAllChildren(Boolean) Saves the solution file and all children within the current SolutionNode . Declaration public void SaveAllChildren(bool forceSave = false) Parameters Type Name Description System.Boolean forceSave Determines whether to force the file save operation or not. Implements IPhysicalNode INamedNode IBaseNode"
  },
  "api/DulcisX.Nodes.UnknownNode.html": {
    "href": "api/DulcisX.Nodes.UnknownNode.html",
    "title": "Class UnknownNode | DulcisX Documentation",
    "keywords": "Class UnknownNode Represents a Node which couldn't be identified. Inheritance System.Object BaseNode UnknownNode Implements INamedNode IBaseNode Inherited Members BaseNode.ParentSolution BaseNode.UnderlyingHierarchy BaseNode.ItemId BaseNode.GetDisplayName() BaseNode.GetParent(NodeTypes) BaseNode.AsHierarchyItem() BaseNode.IsTypeMatching(NodeTypes) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : DulcisX.Nodes Assembly : DulcisX.dll Syntax public class UnknownNode : BaseNode, INamedNode, IBaseNode Constructors | Improve this Doc View Source UnknownNode(SolutionNode, IVsHierarchy, UInt32) Initializes a new instance of the UnknownNode class. Declaration public UnknownNode(SolutionNode solution, IVsHierarchy hierarchy, uint itemId) Parameters Type Name Description SolutionNode solution The Solution in which the UnknownNode sits in. Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy The Hierarchy in which the UnknownNode sits in. System.UInt32 itemId The Unique Identifier for the UnknownNode in the hierarchy . Properties | Improve this Doc View Source NodeType Gets the Type of current Node. Declaration public override NodeTypes NodeType { get; } Property Value Type Description NodeTypes Overrides BaseNode.NodeType Methods | Improve this Doc View Source GetChildren() Returns all immediate children Nodes of the current Node. Declaration public override IEnumerable<BaseNode> GetChildren() Returns Type Description System.Collections.Generic.IEnumerable < BaseNode > An System.Collections.Generic.IEnumerable<T> with the children. Overrides BaseNode.GetChildren() Remarks A UnknownNode doesn't support the iteration of any children. | Improve this Doc View Source GetParent() Returns the immediate parent Node of the current Node. Declaration public override BaseNode GetParent() Returns Type Description BaseNode The parent if any could be found, otherwise null. Overrides BaseNode.GetParent() Implements INamedNode IBaseNode"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Documentation | DulcisX Documentation",
    "keywords": "API Documentation This is the place, which lists all the available Types of DulcisX."
  },
  "guides/getting_started/first-extension.html": {
    "href": "guides/getting_started/first-extension.html",
    "title": "Your First Extension | DulcisX Documentation",
    "keywords": "Making your fist Extension with DulcisX In this example you will learn how you make your first extension with this package. The extension will listen on File saves and will show a message upon the raise of this event. What will you learn? In this example you will learn how to hook callback methods to events which are provided by DulcisX. Using the Hierarchy system of the Visual Studio Solution Explorer. Displaying messages to the user in the InfoBar. Step 1: Setting up the environment If you have already installed the 'Visual Studio Extension development' module to Visual Studio, you can skip to Step 2. Open up the Windows Search and enter 'Visual Studio Installer', next up identify your version of Visual Studio which you want to use for Extension development. After you have have identified your version you want to modify click on 'Modify' and scroll to the very bottom of the appearing window. If not already ticked, check the 'Visual Studio extension development' box and click on 'Modify' in the bottom right corner. Step 2: Creating the new Project Now open up Visual Studio and click on 'Create a new project'. On the appearance of the window enter 'VSIX Project C#' and select the first result. Enter a name for your Project, in my case I'll use 'MyFirstExtension'. Next up open up the 'MyFirstExtensionPackage.cs' file, this is the heart of your extension. Step 3: Understanding the template The PackageRegistration attribute tells Visual Studio that this is the entry point for your extension, where as the Guid attribute uniquely identifies the extension between all the others. The InitializeAsync method is the start of your application. It will get called after the package got loaded by the Visual Studio environment. Step 4: Configure the template At the very top of your file add a using statement to DulcisX.Core and instead of inheriting from Package , inherit from PackageX . This will provide you access to all the DulcisX API's. For now you can delete the Package Members region, as we will be using custom events from PackageX . Add a constructor to your class in which we will append our file save event. Place the following code in your class: public MyFirstExtensionPackage() { this.Solution.OpenNodeEvents.OnSaved.Hook(NodeTypes.Document, OnDocumentSaved); } private void OnDocumentSaved(IPhysicalNode node) { } Note Normally in C# appending a callback method to an event is done with the += operator, however for some events in DulcisX this is not the case. The file save operation can occur for different types of Nodes. Therefore the first parameter of the .Hook method restricts the Nodes which can invoke the provided callback. This ensures that the IPhysicalNode of the callback parameter is always of the type(s) passed as the first parameter. Also you should add the ProvideAutoLoad attribute to your class, in order to allow your extension to be automatically loaded in the background by Visual Studio. This would look something like the folllowing. [ProvideAutoLoad(VSConstants.UICONTEXT.SolutionExists_string, PackageAutoLoadFlags.BackgroundLoad)] Additionally it will ensure that the extension is only loaded if a Solution exists. Step 5: Show the message upon File Save PackageX exposes the InfoBar property which allows you to publish messages in the Visual Studio InfoBar. This package uses a Builder construct to construct the message, which would look something like the following. You should place this in the OnDocumentSaved callback method. this.InfoBar.NewMessage() .WithInfoImage() .WithText(\"The \") .WithText(node.GetFullName(), underline: true) .WithText(\" file got saved.\") .WithButton(\"Okay\") .Publish(); This would result in something like you can see below. The full Code Below you can see what we end up with, the code will of course differ to yours. using DulcisX.Core; using DulcisX.Core.Enums; using DulcisX.Nodes; using Microsoft.VisualStudio; using Microsoft.VisualStudio.Shell; using System.Runtime.InteropServices; namespace DulcisX.SDKTesting { [PackageRegistration(UseManagedResourcesOnly = true, AllowsBackgroundLoading = true)] [Guid(PackageGuidString)] [ProvideAutoLoad(VSConstants.UICONTEXT.SolutionExists_string, PackageAutoLoadFlags.BackgroundLoad)] public sealed class MyFirstExtensionPackage : PackageX { public const string PackageGuidString = \"8a3d2f48-ee2b-4b8e-aa2b-430e3e2fc24e\"; public MyFirstExtensionPackage() { this.Solution.OpenNodeEvents.OnSaved.Hook(NodeTypes.Document, OnDocumentSaved); } private void OnDocumentSaved(IPhysicalNode node) { this.InfoBar.NewMessage() .WithInfoImage() .WithText(\"The \") .WithText(node.GetFullName(), underline: true) .WithText(\" file got saved.\") .WithButton(\"Okay\") .Publish(); } } } Step 6: Start and Debug your Extension You can just Start/Debug a Visual Studio Extension as any other .Net Application, by clicking 'Start' in Visual Studio. This will start a Visual Studio Experimental instance which will not interfere with any current settings to your current Visual Studio settings. You will now want to open any project in which you want to test your extension. That's it, your first extension up and running. It wasn't that hard right? Note If you click in the bottom left corner on the loading symbol, you can see the loading progress of your Extension."
  },
  "guides/getting_started/installation.html": {
    "href": "guides/getting_started/installation.html",
    "title": "Installing DulcisX | DulcisX Documentation",
    "keywords": "DulcisX Installation Supported Platforms DulcisX targets .Net Framework 4.8 , that means that all projects which use this package need to target .Net Framework 4.8 as well. Unfortunately the VSIX Project template targets .Net Framework 4.7.2 , therefor you will need to change that. Editing the .csproj properties page Editing the .csproj file Right click the Project file and click on 'Properties' Select the 'Application' tab Change the 'Target Framework' to .Net Framework 4.8 . If you don't see that option, you can install it from here . Open the .csproj file Change <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion> to <TargetFrameworkVersion>v4.8</TargetFrameworkVersion> Save <!-- The following content might differ to yours. --> <?xml version=\"1.0\" encoding=\"utf-8\"?> <Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"> <!--...--> <PropertyGroup> <Configuration Condition=\" '$(Configuration)' == '' \">Debug</Configuration> <Platform Condition=\" '$(Platform)' == '' \">AnyCPU</Platform> <SchemaVersion>2.0</SchemaVersion> <ProjectTypeGuids><!--Your Guid--></ProjectTypeGuids> <ProjectGuid><!--Your Guid--></ProjectGuid> <OutputType>Library</OutputType> <AppDesignerFolder>Properties</AppDesignerFolder> <RootNamespace><!--Your Name--></RootNamespace> <AssemblyName><!--Your Name--></AssemblyName> <!--Change this:--> <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion> <!--To This:--> <TargetFrameworkVersion>v4.8</TargetFrameworkVersion> <GeneratePkgDefFile>true</GeneratePkgDefFile> <UseCodebase>true</UseCodebase> <IncludeAssemblyInVSIXContainer>true</IncludeAssemblyInVSIXContainer> <IncludeDebugSymbolsInVSIXContainer>false</IncludeDebugSymbolsInVSIXContainer> <IncludeDebugSymbolsInLocalVSIXDeployment>false</IncludeDebugSymbolsInLocalVSIXDeployment> <CopyBuildOutputToOutputDirectory>true</CopyBuildOutputToOutputDirectory> <CopyOutputSymbolsToOutputDirectory>true</CopyOutputSymbolsToOutputDirectory> <StartAction>Program</StartAction> <StartProgram Condition=\"'$(DevEnvDir)' != ''\">$(DevEnvDir)devenv.exe</StartProgram> <StartArguments>/rootsuffix Exp</StartArguments> </PropertyGroup> <!--...--> </Project> Installation from NuGet DulcisX is distributed through the official NuGet feed as a lot of the other packages, which makes its install as easy as its get. Warning For now DuclisX is published under the pre-release tag and might still contain bugs or other issues, if you encounter something please create an issue over on GitHub. Using Visual Studio Using the Nuget Package Manager Right click on 'References', and select 'Manage NuGet packages' Check the 'include prerelease' checkbox In the \"Browse\" tab, search for DulcisX Click install. Click on 'Tools', 'Nuget Package Manager' and 'Package Manager Console' Enter Install-Package DulcisX"
  },
  "guides/getting_started/principles.html": {
    "href": "guides/getting_started/principles.html",
    "title": "DulcisX Principles | DulcisX Documentation",
    "keywords": "Principles Solution Explorer/Hierarchy System All nodes provided by DuclisX only represent the current position of the node in the Hierarchy . This means that when a document gets renamed or the location gets changed, the given instance becomes invalid . Also comparing Nodes is not save . DuclisX doesn't cache any Nodes nor any of its properties. A Node returned by an event will never be the same as any other instance of a Node returned by a method or other class members. Note If you want to still compare two nodes with each other, you can either try comparing the results of GetFullPath for IPhysicalNodes or comparing the ItemId and the UnderlyingHierarchy . Note The SoltionNode class is the only Node, which will always update itself on changes to itself. Therefore comparing two Solution instances returned by DulcisX are always equal. Creation of Objects All the API's exposed by DulcisX utilize lazy initialization , this ensures that instantiating a new object is a relatively inexpensive operation. Additionally for that reason, parts of the package you do not use, don't allocate any additional memory. Caching of Methods and Properties DuclisX doesn't use Properties for detailed information about the state of the object, since this would require the package to keep track of changes to objects. Therefor such information is exposed through methods. This also means, that you should temporarily store information returned by methods on your own . Properties on the other hands, will never retrieve their value for every request. It will usually load its value on the first value request. This basically means, that Properties cache their values and there is no need to temporarily store its value. Note Events provided by DuclisX, provide access to an IEnumerable<T> which is internally cached. This means, that reiterating an already visited item, will not re-evaluate the value of the item and instead return a cached version."
  },
  "guides/introduction/intro.html": {
    "href": "guides/introduction/intro.html",
    "title": "Introduction to DulcisX | DulcisX Documentation",
    "keywords": "Introduction Welcome to the documentation, there are a few requirements your skills should meet. Pretty solid understanding of C#, if not take a look at the C# Programming Guide Basic understanding of how Visual Studio Extensions work, otherwise you should take the First Extension Guide which will teach you some basics. In the guides section you can find information on how to install DulcisX and articles which help you to get started. You need more help? Feel free to create a GitHub issue or join the Discord Server ."
  },
  "index.html": {
    "href": "index.html",
    "title": "Home | DulcisX Documentation",
    "keywords": "DulcisX Documentation DulcisX translates to Sweet Extension and this is the goal for this Project, making the experience of developing Visual Studio Extensions sweat. It allows you to get your extension done faster and doesn't bother you with ugly or missing API's."
  },
  "sdk/helper_classes/com-utilities.html": {
    "href": "sdk/helper_classes/com-utilities.html",
    "title": "ComUtilities | DulcisX Documentation",
    "keywords": "ComUtilities - Official API Documentation A class providing miscellaneous methods used when interacting with unmanaged code (COM objects) and interop types. Description There is no description available, if you want to change that create an issue ."
  },
  "sdk/helper_classes/error-handler.html": {
    "href": "sdk/helper_classes/error-handler.html",
    "title": "ErrorHandler | DulcisX Documentation",
    "keywords": "ErrorHandler - Official API Documentation Provides methods for dealing with common COM error codes. Description There is no description available, if you want to change that create an issue ."
  },
  "sdk/helper_classes/hierachy-utilities.html": {
    "href": "sdk/helper_classes/hierachy-utilities.html",
    "title": "HierarchyUtilities | DulcisX Documentation",
    "keywords": "HierarchyUtilities - Official API Documentation Provides access to helper methods with anything regarding to the IVsHierarchy . Description There is no description available, if you want to change that create an issue ."
  },
  "sdk/introduction/intro.html": {
    "href": "sdk/introduction/intro.html",
    "title": "Introduction to the SDK Documentation | DulcisX Documentation",
    "keywords": "SDK Documentation Introduction Not only does DulcisX try to provide a solid documentation about itself, but also providing additional resources and information to the Visual Studio SDK. It mainly tries to show of all the classes which are already provided by the SDK, but are well hidden. Helpful Resources Official Sources API Documentation of the Visual Studio SDK Visual Studio 2019 Extensibility SDK Guides Visual Studio SDK Extensibility Samples You need more help? Feel free to create a GitHub issue or join the Discord Server ."
  },
  "sdk/status_codes/status-codes.html": {
    "href": "sdk/status_codes/status-codes.html",
    "title": "SDK Status Codes | DulcisX Documentation",
    "keywords": "SDK Status Codes The Visual Studio SDK return status codes such called HResult 's all over the place in form of integers. These status codes will also be occasionally returned by the package. Anyhow these status codes are not very well documented, so here is the full known list of these status codes. This information was collected from the official docs, which are available here . Name Description StatusCode VS_E_PROJECTALREADYEXISTS VS specific error HRESULT for \"Project already exists\". -2147213344 VS_E_PACKAGENOTLOADED VS specific error HRESULT for \"Package not loaded\". -2147213343 VS_E_PROJECTNOTLOADED VS specific error HRESULT for \"Project not loaded\". -2147213342 VS_E_SOLUTIONNOTOPEN VS specific error HRESULT for \"Solution not open\". -2147213341 VS_E_SOLUTIONALREADYOPEN VS specific error HRESULT for \"Solution already open\". -2147213340 VS_E_PROJECTMIGRATIONFAILED VS specific error HRESULT for \"Project configuration failed\". -2147213339 VS_E_INCOMPATIBLEDOCDATA VS specific error HRESULT for \"Incompatible document data\". -2147213334 VS_E_UNSUPPORTEDFORMAT VS specific error HRESULT for \"Unsupported format\". -2147213333 VS_E_WIZARDBACKBUTTONPRESS VS specific error HRESULT for \"Wizard back button pressed\". -2147213313 VS_S_PROJECTFORWARDED VS specific success HRESULT for \"Project forwarded\". 270320 VS_S_TBXMARKER VS specific success HRESULT for \"Toolbox marker\". 270321 VS_E_INCOMPATIBLEPROJECT VS Specific error HRESULT for a project not supported by current edition of the product -2147213309 VS_E_INCOMPATIBLECLASSICPROJECT VS Specific error HRESULT for a non-Windows Store app project, which is not supported by the VS Express SKU -2147213308 VS_E_INCOMPATIBLEPROJECT_UNSUPPORTED_OS VS Specific error HRESULT for a project not supported in the current OS version, for example Windows Store app projects require Windows 8 or higher -2147213307 VS_E_PROMPTREQUIRED VS specific error HRESULT code returned when an attempt to do a save using RDTSAVEOPT_SileSave fails because source control requires a UI prompt in order to make the file to be saved editable -2147213306 VS_E_CIRCULARTASKDEPENDENCY VS specific error HRESULT code returned when an attempt to do a task wait operation would result in a deadlock due to circular dependency -2147213305 VS_S_PROJECT_SAFEREPAIRREQUIRED VS specific success HRESULT returned when a safe-repair is required. A safe-repair is one which is not a real full upgrade but merely a repair to make the project asset compatible without the risk of issues being encountered by the previous versions of the product 270322 VS_S_PROJECT_UNSAFEREPAIRREQUIRED VS specific success HRESULT returned when an unsafe-repair is required. An usafe-repair is one which is not a full upgrade, but with a risk of issues being encountered by the newer or previous version of the product. For example if a newer dependent SDK is not currently installed 270323 VS_S_PROJECT_ONEWAYUPGRADEREQUIRED VS specific success HRESULT returned when a one-way upgrade is required. A one-way upgrade is a full upgrade which will make the project incompatible with the previous version of the product 270324 VS_S_INCOMPATIBLEPROJECT VS specific success HRESULT returned when a project is not supported by current edition of the product 270325 OLE_E_OLEVERB A legacy OLE error. -2147221504 OLE_E_ADVF A legacy OLE error. -2147221503 OLE_E_ENUM_NOMORE A legacy OLE error. -2147221502 OLE_E_ADVISENOTSUPPORTED A legacy OLE error. -2147221501 OLE_E_NOCONNECTION A legacy OLE error. -2147221500 OLE_E_NOTRUNNING A legacy OLE error. -2147221499 OLE_E_NOCACHE A legacy OLE error. -2147221498 OLE_E_BLANK A legacy OLE error. -2147221497 OLE_E_CLASSDIFF A legacy OLE error. -2147221496 OLE_E_CANT_GETMONIKER A legacy OLE error. -2147221495 OLE_E_CANT_BINDTOSOURCE A legacy OLE error. -2147221494 OLE_E_STATIC The cache is for a static object and it already has a cache node. -2147221493 OLE_E_PROMPTSAVECANCELLED The user was prompted to save but chose the Cancel button from the prompt message box. -2147221492 OLE_E_INVALIDRECT A legacy OLE error. -2147221491 OLE_E_WRONGCOMPOBJ The versions of COMPOBJ.DLL and OLE2.DLL on your machine are incompatible with each other. -2147221490 OLE_E_INVALIDHWND A legacy OLE error. -2147221489 OLE_E_NOT_INPLACEACTIVE A legacy OLE error. -2147221488 OLE_E_CANTCONVERT A legacy OLE error. -2147221487 OLE_E_NOSTORAGE A legacy OLE error. -2147221486 DISP_E_UNKNOWNINTERFACE A return value that indicates that the interface identifier passed in riid is not equal to IID_NULL. -2147352575 DISP_E_MEMBERNOTFOUND A return value indicating that the requested member does not exist, or the call to Invoke tried to set the value of a read-only property. -2147352573 DISP_E_PARAMNOTFOUND A return value that indicates that one of the parameter DISPIDs does not correspond to a parameter on the method. -2147352572 DISP_E_TYPEMISMATCH A return value that indicates that one or more of the parameters could not be coerced. -2147352571 DISP_E_UNKNOWNNAME A return value that indicates that one or more of the names were not known. The returned DISPIDs contain DISPID_UNKNOWN for each entry that corresponds to an unknown name. -2147352570 DISP_E_NONAMEDARGS A return value indicating that the invoked implementation of IDispatch does not support named arguments. -2147352569 DISP_E_BADVARTYPE One of the method arguments is not a valid variant type. -2147352568 DISP_E_EXCEPTION This return value indicates that the call generated an exception. The usual implementation is to specify that an argument of the method that returned this error is a pointer to a structure that contains exception information. -2147352567 DISP_E_OVERFLOW An error that indicates that a value could not be coerced to its expected representation. -2147352566 DISP_E_BADINDEX A return value that indicates subscript out of range. -2147352565 DISP_E_UNKNOWNLCID A return value that indicates that the member being invoked interprets string arguments according to the Locale ID (LCID), and the LCID is not recognized. If the LCID is not needed to interpret arguments, this error should not be returned. -2147352564 DISP_E_ARRAYISLOCKED An HRESULT that indicates that the array is currently locked. -2147352563 DISP_E_BADPARAMCOUNT An error return value that indicates that the number of elements provided to the method is different from the number of arguments accepted by the method. -2147352562 DISP_E_PARAMNOTOPTIONAL A return value that indicates that a required parameter was omitted. -2147352561 DISP_E_BADCALLEE A COM return value. -2147352560 DISP_E_NOTACOLLECTION A return value indicating an unexpected argument type. -2147352559 DISP_E_DIVBYZERO A return error that indicates a divide by zero error. -2147352558 DISP_E_BUFFERTOOSMALL A return error that indicates the destination token buffer is too small. -2147352557 RPC_E_CALL_REJECTED -2147418111 RPC_E_CALL_CANCELED -2147418110 RPC_E_CANTPOST_INSENDCALL -2147418109 RPC_E_CANTCALLOUT_INASYNCCALL -2147418108 RPC_E_CANTCALLOUT_INEXTERNALCALL -2147418107 RPC_E_CONNECTION_TERMINATED -2147418106 RPC_E_SERVER_DIED -2147418105 RPC_E_CLIENT_DIED -2147418104 RPC_E_INVALID_DATAPACKET -2147418103 RPC_E_CANTTRANSMIT_CALL -2147418102 RPC_E_CLIENT_CANTMARSHAL_DATA -2147418101 RPC_E_CLIENT_CANTUNMARSHAL_DATA -2147418100 RPC_E_SERVER_CANTMARSHAL_DATA -2147418099 RPC_E_SERVER_CANTUNMARSHAL_DATA -2147418098 RPC_E_INVALID_DATA -2147418097 RPC_E_INVALID_PARAMETER -2147418096 RPC_E_CANTCALLOUT_AGAIN -2147418095 RPC_E_SERVER_DIED_DNE -2147418094 RPC_E_SYS_CALL_FAILED -2147417856 RPC_E_OUT_OF_RESOURCES -2147417855 RPC_E_ATTEMPTED_MULTITHREAD -2147417854 RPC_E_NOT_REGISTERED -2147417853 RPC_E_FAULT -2147417852 RPC_E_SERVERFAULT -2147417851 RPC_E_CHANGED_MODE -2147417850 RPC_E_INVALIDMETHOD -2147417849 RPC_E_DISCONNECTED -2147417848 RPC_E_RETRY -2147417847 RPC_E_SERVERCALL_RETRYLATER -2147417846 RPC_E_SERVERCALL_REJECTED -2147417845 RPC_E_INVALID_CALLDATA -2147417844 RPC_E_CANTCALLOUT_ININPUTSYNCCALL -2147417843 RPC_E_WRONG_THREAD -2147417842 RPC_E_THREAD_NOT_INIT -2147417841 RPC_E_VERSION_MISMATCH -2147417840 RPC_E_INVALID_HEADER -2147417839 RPC_E_INVALID_EXTENSION -2147417838 RPC_E_INVALID_IPID -2147417837 RPC_E_INVALID_OBJECT -2147417836 RPC_S_CALLPENDING -2147417835 RPC_S_WAITONTIMER -2147417834 RPC_E_CALL_COMPLETE -2147417833 RPC_E_UNSECURE_CALL -2147417832 RPC_E_TOO_LATE -2147417831 RPC_E_NO_GOOD_SECURITY_PACKAGES -2147417830 RPC_E_ACCESS_DENIED -2147417829 RPC_E_REMOTE_DISABLED -2147417828 RPC_E_INVALID_OBJREF -2147417827 RPC_E_NO_CONTEXT -2147417826 RPC_E_TIMEOUT -2147417825 RPC_E_NO_SYNC -2147417824 RPC_E_FULLSIC_REQUIRED -2147417823 RPC_E_INVALID_STD_NAME -2147417822 CO_E_FAILEDTOIMPERSONATE -2147417821 CO_E_FAILEDTOGETSECCTX -2147417820 CO_E_FAILEDTOOPENTHREADTOKEN -2147417819 CO_E_FAILEDTOGETTOKENINFO -2147417818 CO_E_TRUSTEEDOESNTMATCHCLIENT -2147417817 CO_E_FAILEDTOQUERYCLIENTBLANKET -2147417816 CO_E_FAILEDTOSETDACL -2147417815 CO_E_ACCESSCHECKFAILED -2147417814 CO_E_NETACCESSAPIFAILED -2147417813 CO_E_WRONGTRUSTEENAMESYNTAX -2147417812 CO_E_INVALIDSID -2147417811 CO_E_CONVERSIONFAILED -2147417810 CO_E_NOMATCHINGSIDFOUND -2147417809 CO_E_LOOKUPACCSIDFAILED -2147417808 CO_E_NOMATCHINGNAMEFOUND -2147417807 CO_E_LOOKUPACCNAMEFAILED -2147417806 CO_E_SETSERLHNDLFAILED -2147417805 CO_E_FAILEDTOGETWINDIR -2147417804 CO_E_PATHTOOLONG -2147417803 CO_E_FAILEDTOGENUUID -2147417802 CO_E_FAILEDTOCREATEFILE -2147417801 CO_E_FAILEDTOCLOSEHANDLE -2147417800 CO_E_EXCEEDSYSACLLIMIT -2147417799 CO_E_ACESINWRONGORDER -2147417798 CO_E_INCOMPATIBLESTREAMVERSION -2147417797 CO_E_FAILEDTOOPENPROCESSTOKEN -2147417796 CO_E_DECODEFAILED -2147417795 CO_E_ACNOTINITIALIZED -2147417793 CO_E_CANCEL_DISABLED -2147417792 RPC_E_UNEXPECTED -2147352577 VS_E_BUSY VS specific error HRESULT returned by interfaces to asynchronous behavior when the object in question in already busy. -2147220992 VS_E_SPECIFYING_OUTPUT_UNSUPPORTED Is returned by build interfaces that have parameters for specifying an array of IVsOutput's but the implementation can only apply the method to all outputs. -2147220991 S_FALSE HRESULT for FALSE (not an error). 1 S_OK HRESULT for generic success. 0 UNDO_E_CLIENTABORT Error HRESULT for a client abort. -2147205119 E_OUTOFMEMORY Error HRESULT for out of memory. -2147024882 E_INVALIDARG Error HRESULT for an invalid argument. -2147024809 E_FAIL Error HRESULT for a generic failure. -2147467259 E_NOINTERFACE Error HRESULT for the request of a not implemented interface. -2147467262 E_NOTIMPL Error HRESULT for the call to a not implemented method. -2147467263 E_UNEXPECTED Error HRESULT for an unexpected condition. -2147418113 E_POINTER Error HRESULT for a null or invalid pointer. -2147467261 E_HANDLE Error HRESULT for an invalid HANDLE. -2147024890 E_ABORT Error HRESULT for an abort. -2147467260 E_ACCESSDENIED Error HRESULT for an access denied. -2147024891 E_PENDING Error HRESULT for a pending condition. -2147483638"
  }
}
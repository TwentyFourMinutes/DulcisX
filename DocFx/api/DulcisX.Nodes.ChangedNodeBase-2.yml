### YamlMime:ManagedReference
items:
- uid: DulcisX.Nodes.ChangedNodeBase`2
  commentId: T:DulcisX.Nodes.ChangedNodeBase`2
  id: ChangedNodeBase`2
  parent: DulcisX.Nodes
  children:
  - DulcisX.Nodes.ChangedNodeBase`2.#ctor(`0,`1)
  - DulcisX.Nodes.ChangedNodeBase`2.Flag
  - DulcisX.Nodes.ChangedNodeBase`2.Node
  langs:
  - csharp
  - vb
  name: ChangedNodeBase<TNodeType, TFlag>
  nameWithType: ChangedNodeBase<TNodeType, TFlag>
  fullName: DulcisX.Nodes.ChangedNodeBase<TNodeType, TFlag>
  type: Class
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ChangedNodeBase.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: ChangedNodeBase
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ChangedNodeBase.cs
    startLine: 9
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nRepresents a changed <xref href=\"DulcisX.Nodes.INamedNode\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      public abstract class ChangedNodeBase<TNodeType, TFlag>
          where TNodeType : INamedNode where TFlag : struct, Enum
    typeParameters:
    - id: TNodeType
      description: The type of the node which got changed.
    - id: TFlag
      description: The enumeration which specifies what happend to the <xref href="DulcisX.Nodes.INamedNode" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public MustInherit Class ChangedNodeBase(Of TNodeType As INamedNode, TFlag As {Structure,  Enum})
  inheritance:
  - System.Object
  derivedClasses:
  - DulcisX.Nodes.AddedPhysicalNode`2
  - DulcisX.Nodes.ChangedPhysicalSccNode`2
  - DulcisX.Nodes.RenamedPhysicalNode`2
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: ChangedNodeBase(Of TNodeType, TFlag)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: DulcisX.Nodes.ChangedNodeBase(Of TNodeType, TFlag)
  name.vb: ChangedNodeBase(Of TNodeType, TFlag)
- uid: DulcisX.Nodes.ChangedNodeBase`2.Node
  commentId: P:DulcisX.Nodes.ChangedNodeBase`2.Node
  id: Node
  parent: DulcisX.Nodes.ChangedNodeBase`2
  langs:
  - csharp
  - vb
  name: Node
  nameWithType: ChangedNodeBase<TNodeType, TFlag>.Node
  fullName: DulcisX.Nodes.ChangedNodeBase<TNodeType, TFlag>.Node
  type: Property
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ChangedNodeBase.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: Node
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ChangedNodeBase.cs
    startLine: 15
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nGets the node which got changed.\n"
  example: []
  syntax:
    content: public TNodeType Node { get; }
    parameters: []
    return:
      type: '{TNodeType}'
    content.vb: Public ReadOnly Property Node As TNodeType
  overload: DulcisX.Nodes.ChangedNodeBase`2.Node*
  nameWithType.vb: ChangedNodeBase(Of TNodeType, TFlag).Node
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: DulcisX.Nodes.ChangedNodeBase(Of TNodeType, TFlag).Node
- uid: DulcisX.Nodes.ChangedNodeBase`2.Flag
  commentId: P:DulcisX.Nodes.ChangedNodeBase`2.Flag
  id: Flag
  parent: DulcisX.Nodes.ChangedNodeBase`2
  langs:
  - csharp
  - vb
  name: Flag
  nameWithType: ChangedNodeBase<TNodeType, TFlag>.Flag
  fullName: DulcisX.Nodes.ChangedNodeBase<TNodeType, TFlag>.Flag
  type: Property
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ChangedNodeBase.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: Flag
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ChangedNodeBase.cs
    startLine: 20
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nGets the enumeration which specifies what happend to the <xref href=\"DulcisX.Nodes.INamedNode\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public TFlag Flag { get; }
    parameters: []
    return:
      type: '{TFlag}'
    content.vb: Public ReadOnly Property Flag As TFlag
  overload: DulcisX.Nodes.ChangedNodeBase`2.Flag*
  nameWithType.vb: ChangedNodeBase(Of TNodeType, TFlag).Flag
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: DulcisX.Nodes.ChangedNodeBase(Of TNodeType, TFlag).Flag
- uid: DulcisX.Nodes.ChangedNodeBase`2.#ctor(`0,`1)
  commentId: M:DulcisX.Nodes.ChangedNodeBase`2.#ctor(`0,`1)
  id: '#ctor(`0,`1)'
  parent: DulcisX.Nodes.ChangedNodeBase`2
  langs:
  - csharp
  - vb
  name: ChangedNodeBase(TNodeType, TFlag)
  nameWithType: ChangedNodeBase<TNodeType, TFlag>.ChangedNodeBase(TNodeType, TFlag)
  fullName: DulcisX.Nodes.ChangedNodeBase<TNodeType, TFlag>.ChangedNodeBase(TNodeType, TFlag)
  type: Constructor
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ChangedNodeBase.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: .ctor
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ChangedNodeBase.cs
    startLine: 27
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nInitializes a new instance of the <xref href=\"DulcisX.Nodes.ChangedNodeBase%602\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: protected ChangedNodeBase(TNodeType node, TFlag flag)
    parameters:
    - id: node
      type: '{TNodeType}'
      description: The Node which got changed.
    - id: flag
      type: '{TFlag}'
      description: The enumeration which specifies what happend.
    content.vb: Protected Sub New(node As TNodeType, flag As TFlag)
  overload: DulcisX.Nodes.ChangedNodeBase`2.#ctor*
  nameWithType.vb: ChangedNodeBase(Of TNodeType, TFlag).ChangedNodeBase(TNodeType, TFlag)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: DulcisX.Nodes.ChangedNodeBase(Of TNodeType, TFlag).ChangedNodeBase(TNodeType, TFlag)
references:
- uid: DulcisX.Nodes.INamedNode
  commentId: T:DulcisX.Nodes.INamedNode
  parent: DulcisX.Nodes
  name: INamedNode
  nameWithType: INamedNode
  fullName: DulcisX.Nodes.INamedNode
- uid: DulcisX.Nodes
  commentId: N:DulcisX.Nodes
  name: DulcisX.Nodes
  nameWithType: DulcisX.Nodes
  fullName: DulcisX.Nodes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DulcisX.Nodes.ChangedNodeBase`2.Node*
  commentId: Overload:DulcisX.Nodes.ChangedNodeBase`2.Node
  name: Node
  nameWithType: ChangedNodeBase<TNodeType, TFlag>.Node
  fullName: DulcisX.Nodes.ChangedNodeBase<TNodeType, TFlag>.Node
  nameWithType.vb: ChangedNodeBase(Of TNodeType, TFlag).Node
  fullName.vb: DulcisX.Nodes.ChangedNodeBase(Of TNodeType, TFlag).Node
- uid: '{TNodeType}'
  commentId: '!:TNodeType'
  definition: TNodeType
  name: TNodeType
  nameWithType: TNodeType
  fullName: TNodeType
- uid: TNodeType
  name: TNodeType
  nameWithType: TNodeType
  fullName: TNodeType
- uid: DulcisX.Nodes.ChangedNodeBase`2.Flag*
  commentId: Overload:DulcisX.Nodes.ChangedNodeBase`2.Flag
  name: Flag
  nameWithType: ChangedNodeBase<TNodeType, TFlag>.Flag
  fullName: DulcisX.Nodes.ChangedNodeBase<TNodeType, TFlag>.Flag
  nameWithType.vb: ChangedNodeBase(Of TNodeType, TFlag).Flag
  fullName.vb: DulcisX.Nodes.ChangedNodeBase(Of TNodeType, TFlag).Flag
- uid: '{TFlag}'
  commentId: '!:TFlag'
  definition: TFlag
  name: TFlag
  nameWithType: TFlag
  fullName: TFlag
- uid: TFlag
  name: TFlag
  nameWithType: TFlag
  fullName: TFlag
- uid: DulcisX.Nodes.ChangedNodeBase`2
  commentId: T:DulcisX.Nodes.ChangedNodeBase`2
  name: ChangedNodeBase<TNodeType, TFlag>
  nameWithType: ChangedNodeBase<TNodeType, TFlag>
  fullName: DulcisX.Nodes.ChangedNodeBase<TNodeType, TFlag>
  nameWithType.vb: ChangedNodeBase(Of TNodeType, TFlag)
  fullName.vb: DulcisX.Nodes.ChangedNodeBase(Of TNodeType, TFlag)
  name.vb: ChangedNodeBase(Of TNodeType, TFlag)
  spec.csharp:
  - uid: DulcisX.Nodes.ChangedNodeBase`2
    name: ChangedNodeBase
    nameWithType: ChangedNodeBase
    fullName: DulcisX.Nodes.ChangedNodeBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TNodeType
    nameWithType: TNodeType
    fullName: TNodeType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFlag
    nameWithType: TFlag
    fullName: TFlag
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: DulcisX.Nodes.ChangedNodeBase`2
    name: ChangedNodeBase
    nameWithType: ChangedNodeBase
    fullName: DulcisX.Nodes.ChangedNodeBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNodeType
    nameWithType: TNodeType
    fullName: TNodeType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFlag
    nameWithType: TFlag
    fullName: TFlag
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.ChangedNodeBase`2.#ctor*
  commentId: Overload:DulcisX.Nodes.ChangedNodeBase`2.#ctor
  name: ChangedNodeBase
  nameWithType: ChangedNodeBase<TNodeType, TFlag>.ChangedNodeBase
  fullName: DulcisX.Nodes.ChangedNodeBase<TNodeType, TFlag>.ChangedNodeBase
  nameWithType.vb: ChangedNodeBase(Of TNodeType, TFlag).ChangedNodeBase
  fullName.vb: DulcisX.Nodes.ChangedNodeBase(Of TNodeType, TFlag).ChangedNodeBase

### YamlMime:ManagedReference
items:
- uid: DulcisX.Nodes.IBaseNode
  commentId: T:DulcisX.Nodes.IBaseNode
  id: IBaseNode
  parent: DulcisX.Nodes
  children:
  - DulcisX.Nodes.IBaseNode.AsHierarchyItem
  - DulcisX.Nodes.IBaseNode.GetChildren
  - DulcisX.Nodes.IBaseNode.GetParent
  - DulcisX.Nodes.IBaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  - DulcisX.Nodes.IBaseNode.ItemId
  - DulcisX.Nodes.IBaseNode.ParentSolution
  - DulcisX.Nodes.IBaseNode.UnderlyingHierarchy
  langs:
  - csharp
  - vb
  name: IBaseNode
  nameWithType: IBaseNode
  fullName: DulcisX.Nodes.IBaseNode
  type: Interface
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/IBaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: IBaseNode
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/IBaseNode.cs
    startLine: 11
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nRepresents the most basic Hierarchy Node.\n"
  example: []
  syntax:
    content: 'public interface IBaseNode : IEquatable<IBaseNode>'
    content.vb: >-
      Public Interface IBaseNode

          Inherits IEquatable(Of IBaseNode)
  inheritedMembers:
  - System.IEquatable{DulcisX.Nodes.IBaseNode}.Equals(DulcisX.Nodes.IBaseNode)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: DulcisX.Nodes.IBaseNode.ParentSolution
  commentId: P:DulcisX.Nodes.IBaseNode.ParentSolution
  id: ParentSolution
  parent: DulcisX.Nodes.IBaseNode
  langs:
  - csharp
  - vb
  name: ParentSolution
  nameWithType: IBaseNode.ParentSolution
  fullName: DulcisX.Nodes.IBaseNode.ParentSolution
  type: Property
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/IBaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: ParentSolution
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/IBaseNode.cs
    startLine: 16
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nGets the Solution in which the Node sits in.\n"
  example: []
  syntax:
    content: SolutionNode ParentSolution { get; }
    parameters: []
    return:
      type: DulcisX.Nodes.SolutionNode
    content.vb: ReadOnly Property ParentSolution As SolutionNode
  overload: DulcisX.Nodes.IBaseNode.ParentSolution*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: DulcisX.Nodes.IBaseNode.UnderlyingHierarchy
  commentId: P:DulcisX.Nodes.IBaseNode.UnderlyingHierarchy
  id: UnderlyingHierarchy
  parent: DulcisX.Nodes.IBaseNode
  langs:
  - csharp
  - vb
  name: UnderlyingHierarchy
  nameWithType: IBaseNode.UnderlyingHierarchy
  fullName: DulcisX.Nodes.IBaseNode.UnderlyingHierarchy
  type: Property
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/IBaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: UnderlyingHierarchy
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/IBaseNode.cs
    startLine: 21
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nGets the Hierarchy in which the Node sits in.\n"
  example: []
  syntax:
    content: IVsHierarchy UnderlyingHierarchy { get; }
    parameters: []
    return:
      type: Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
    content.vb: ReadOnly Property UnderlyingHierarchy As IVsHierarchy
  overload: DulcisX.Nodes.IBaseNode.UnderlyingHierarchy*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: DulcisX.Nodes.IBaseNode.ItemId
  commentId: P:DulcisX.Nodes.IBaseNode.ItemId
  id: ItemId
  parent: DulcisX.Nodes.IBaseNode
  langs:
  - csharp
  - vb
  name: ItemId
  nameWithType: IBaseNode.ItemId
  fullName: DulcisX.Nodes.IBaseNode.ItemId
  type: Property
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/IBaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: ItemId
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/IBaseNode.cs
    startLine: 26
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nGets the Unique Identifier for the Node in the <xref href=\"DulcisX.Nodes.IBaseNode.UnderlyingHierarchy\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: uint ItemId { get; }
    parameters: []
    return:
      type: System.UInt32
    content.vb: ReadOnly Property ItemId As UInteger
  overload: DulcisX.Nodes.IBaseNode.ItemId*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: DulcisX.Nodes.IBaseNode.GetParent
  commentId: M:DulcisX.Nodes.IBaseNode.GetParent
  id: GetParent
  parent: DulcisX.Nodes.IBaseNode
  langs:
  - csharp
  - vb
  name: GetParent()
  nameWithType: IBaseNode.GetParent()
  fullName: DulcisX.Nodes.IBaseNode.GetParent()
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/IBaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetParent
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/IBaseNode.cs
    startLine: 32
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nReturns the immediate parent Node of the current Node.\n"
  example: []
  syntax:
    content: BaseNode GetParent()
    return:
      type: DulcisX.Nodes.BaseNode
      description: The parent if any could be found, otherwise null.
    content.vb: Function GetParent As BaseNode
  overload: DulcisX.Nodes.IBaseNode.GetParent*
- uid: DulcisX.Nodes.IBaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  commentId: M:DulcisX.Nodes.IBaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  id: GetParent(DulcisX.Core.Enums.NodeTypes)
  parent: DulcisX.Nodes.IBaseNode
  langs:
  - csharp
  - vb
  name: GetParent(NodeTypes)
  nameWithType: IBaseNode.GetParent(NodeTypes)
  fullName: DulcisX.Nodes.IBaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/IBaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetParent
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/IBaseNode.cs
    startLine: 39
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nReturns the first parent Node of the current Node, matching the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">nodeType</code>.\n"
  example: []
  syntax:
    content: BaseNode GetParent(NodeTypes nodeType)
    parameters:
    - id: nodeType
      type: DulcisX.Core.Enums.NodeTypes
      description: The Node type which should be serached for.
    return:
      type: DulcisX.Nodes.BaseNode
      description: The matching parent if any could be found, otherwise null.
    content.vb: Function GetParent(nodeType As NodeTypes) As BaseNode
  overload: DulcisX.Nodes.IBaseNode.GetParent*
- uid: DulcisX.Nodes.IBaseNode.AsHierarchyItem
  commentId: M:DulcisX.Nodes.IBaseNode.AsHierarchyItem
  id: AsHierarchyItem
  parent: DulcisX.Nodes.IBaseNode
  langs:
  - csharp
  - vb
  name: AsHierarchyItem()
  nameWithType: IBaseNode.AsHierarchyItem()
  fullName: DulcisX.Nodes.IBaseNode.AsHierarchyItem()
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/IBaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: AsHierarchyItem
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/IBaseNode.cs
    startLine: 45
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nReturns the <xref href=\"Microsoft.VisualStudio.Shell.IVsHierarchyItem\" data-throw-if-not-resolved=\"false\"></xref> which represents the current Node.\n"
  example: []
  syntax:
    content: IVsHierarchyItem AsHierarchyItem()
    return:
      type: Microsoft.VisualStudio.Shell.IVsHierarchyItem
      description: The the matching <xref href="Microsoft.VisualStudio.Shell.IVsHierarchyItem" data-throw-if-not-resolved="false"></xref>.
    content.vb: Function AsHierarchyItem As IVsHierarchyItem
  overload: DulcisX.Nodes.IBaseNode.AsHierarchyItem*
- uid: DulcisX.Nodes.IBaseNode.GetChildren
  commentId: M:DulcisX.Nodes.IBaseNode.GetChildren
  id: GetChildren
  parent: DulcisX.Nodes.IBaseNode
  langs:
  - csharp
  - vb
  name: GetChildren()
  nameWithType: IBaseNode.GetChildren()
  fullName: DulcisX.Nodes.IBaseNode.GetChildren()
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/IBaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetChildren
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/IBaseNode.cs
    startLine: 51
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nReturns all immediate children Nodes of the current Node.\n"
  example: []
  syntax:
    content: IEnumerable<BaseNode> GetChildren()
    return:
      type: System.Collections.Generic.IEnumerable{DulcisX.Nodes.BaseNode}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> with the children.
    content.vb: Function GetChildren As IEnumerable(Of BaseNode)
  overload: DulcisX.Nodes.IBaseNode.GetChildren*
references:
- uid: DulcisX.Nodes
  commentId: N:DulcisX.Nodes
  name: DulcisX.Nodes
  nameWithType: DulcisX.Nodes
  fullName: DulcisX.Nodes
- uid: System.IEquatable{DulcisX.Nodes.IBaseNode}.Equals(DulcisX.Nodes.IBaseNode)
  commentId: M:System.IEquatable{DulcisX.Nodes.IBaseNode}.Equals(DulcisX.Nodes.IBaseNode)
  parent: System.IEquatable{DulcisX.Nodes.IBaseNode}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(IBaseNode)
  nameWithType: IEquatable<IBaseNode>.Equals(IBaseNode)
  fullName: System.IEquatable<DulcisX.Nodes.IBaseNode>.Equals(DulcisX.Nodes.IBaseNode)
  nameWithType.vb: IEquatable(Of IBaseNode).Equals(IBaseNode)
  fullName.vb: System.IEquatable(Of DulcisX.Nodes.IBaseNode).Equals(DulcisX.Nodes.IBaseNode)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<IBaseNode>.Equals
    fullName: System.IEquatable<DulcisX.Nodes.IBaseNode>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: DulcisX.Nodes.IBaseNode
    name: IBaseNode
    nameWithType: IBaseNode
    fullName: DulcisX.Nodes.IBaseNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of IBaseNode).Equals
    fullName: System.IEquatable(Of DulcisX.Nodes.IBaseNode).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: DulcisX.Nodes.IBaseNode
    name: IBaseNode
    nameWithType: IBaseNode
    fullName: DulcisX.Nodes.IBaseNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{DulcisX.Nodes.IBaseNode}
  commentId: T:System.IEquatable{DulcisX.Nodes.IBaseNode}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<IBaseNode>
  nameWithType: IEquatable<IBaseNode>
  fullName: System.IEquatable<DulcisX.Nodes.IBaseNode>
  nameWithType.vb: IEquatable(Of IBaseNode)
  fullName.vb: System.IEquatable(Of DulcisX.Nodes.IBaseNode)
  name.vb: IEquatable(Of IBaseNode)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DulcisX.Nodes.IBaseNode
    name: IBaseNode
    nameWithType: IBaseNode
    fullName: DulcisX.Nodes.IBaseNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DulcisX.Nodes.IBaseNode
    name: IBaseNode
    nameWithType: IBaseNode
    fullName: DulcisX.Nodes.IBaseNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DulcisX.Nodes.IBaseNode.ParentSolution*
  commentId: Overload:DulcisX.Nodes.IBaseNode.ParentSolution
  name: ParentSolution
  nameWithType: IBaseNode.ParentSolution
  fullName: DulcisX.Nodes.IBaseNode.ParentSolution
- uid: DulcisX.Nodes.SolutionNode
  commentId: T:DulcisX.Nodes.SolutionNode
  parent: DulcisX.Nodes
  name: SolutionNode
  nameWithType: SolutionNode
  fullName: DulcisX.Nodes.SolutionNode
- uid: DulcisX.Nodes.IBaseNode.UnderlyingHierarchy*
  commentId: Overload:DulcisX.Nodes.IBaseNode.UnderlyingHierarchy
  name: UnderlyingHierarchy
  nameWithType: IBaseNode.UnderlyingHierarchy
  fullName: DulcisX.Nodes.IBaseNode.UnderlyingHierarchy
- uid: Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
  commentId: T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
  parent: Microsoft.VisualStudio.Shell.Interop
  isExternal: true
  name: IVsHierarchy
  nameWithType: IVsHierarchy
  fullName: Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
- uid: Microsoft.VisualStudio.Shell.Interop
  commentId: N:Microsoft.VisualStudio.Shell.Interop
  isExternal: true
  name: Microsoft.VisualStudio.Shell.Interop
  nameWithType: Microsoft.VisualStudio.Shell.Interop
  fullName: Microsoft.VisualStudio.Shell.Interop
- uid: DulcisX.Nodes.IBaseNode.UnderlyingHierarchy
  commentId: P:DulcisX.Nodes.IBaseNode.UnderlyingHierarchy
  parent: DulcisX.Nodes.IBaseNode
  name: UnderlyingHierarchy
  nameWithType: IBaseNode.UnderlyingHierarchy
  fullName: DulcisX.Nodes.IBaseNode.UnderlyingHierarchy
- uid: DulcisX.Nodes.IBaseNode.ItemId*
  commentId: Overload:DulcisX.Nodes.IBaseNode.ItemId
  name: ItemId
  nameWithType: IBaseNode.ItemId
  fullName: DulcisX.Nodes.IBaseNode.ItemId
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: DulcisX.Nodes.IBaseNode
  commentId: T:DulcisX.Nodes.IBaseNode
  parent: DulcisX.Nodes
  name: IBaseNode
  nameWithType: IBaseNode
  fullName: DulcisX.Nodes.IBaseNode
- uid: DulcisX.Nodes.IBaseNode.GetParent*
  commentId: Overload:DulcisX.Nodes.IBaseNode.GetParent
  name: GetParent
  nameWithType: IBaseNode.GetParent
  fullName: DulcisX.Nodes.IBaseNode.GetParent
- uid: DulcisX.Nodes.BaseNode
  commentId: T:DulcisX.Nodes.BaseNode
  parent: DulcisX.Nodes
  name: BaseNode
  nameWithType: BaseNode
  fullName: DulcisX.Nodes.BaseNode
- uid: DulcisX.Core.Enums.NodeTypes
  commentId: T:DulcisX.Core.Enums.NodeTypes
  parent: DulcisX.Core.Enums
  name: NodeTypes
  nameWithType: NodeTypes
  fullName: DulcisX.Core.Enums.NodeTypes
- uid: DulcisX.Core.Enums
  commentId: N:DulcisX.Core.Enums
  name: DulcisX.Core.Enums
  nameWithType: DulcisX.Core.Enums
  fullName: DulcisX.Core.Enums
- uid: Microsoft.VisualStudio.Shell.IVsHierarchyItem
  commentId: T:Microsoft.VisualStudio.Shell.IVsHierarchyItem
  parent: Microsoft.VisualStudio.Shell
  isExternal: true
  name: IVsHierarchyItem
  nameWithType: IVsHierarchyItem
  fullName: Microsoft.VisualStudio.Shell.IVsHierarchyItem
- uid: DulcisX.Nodes.IBaseNode.AsHierarchyItem*
  commentId: Overload:DulcisX.Nodes.IBaseNode.AsHierarchyItem
  name: AsHierarchyItem
  nameWithType: IBaseNode.AsHierarchyItem
  fullName: DulcisX.Nodes.IBaseNode.AsHierarchyItem
- uid: Microsoft.VisualStudio.Shell
  commentId: N:Microsoft.VisualStudio.Shell
  isExternal: true
  name: Microsoft.VisualStudio.Shell
  nameWithType: Microsoft.VisualStudio.Shell
  fullName: Microsoft.VisualStudio.Shell
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.IBaseNode.GetChildren*
  commentId: Overload:DulcisX.Nodes.IBaseNode.GetChildren
  name: GetChildren
  nameWithType: IBaseNode.GetChildren
  fullName: DulcisX.Nodes.IBaseNode.GetChildren
- uid: System.Collections.Generic.IEnumerable{DulcisX.Nodes.BaseNode}
  commentId: T:System.Collections.Generic.IEnumerable{DulcisX.Nodes.BaseNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<BaseNode>
  nameWithType: IEnumerable<BaseNode>
  fullName: System.Collections.Generic.IEnumerable<DulcisX.Nodes.BaseNode>
  nameWithType.vb: IEnumerable(Of BaseNode)
  fullName.vb: System.Collections.Generic.IEnumerable(Of DulcisX.Nodes.BaseNode)
  name.vb: IEnumerable(Of BaseNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DulcisX.Nodes.BaseNode
    name: BaseNode
    nameWithType: BaseNode
    fullName: DulcisX.Nodes.BaseNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DulcisX.Nodes.BaseNode
    name: BaseNode
    nameWithType: BaseNode
    fullName: DulcisX.Nodes.BaseNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic

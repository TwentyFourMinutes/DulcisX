### YamlMime:ManagedReference
items:
- uid: DulcisX.Nodes.BaseNode
  commentId: T:DulcisX.Nodes.BaseNode
  id: BaseNode
  parent: DulcisX.Nodes
  children:
  - DulcisX.Nodes.BaseNode.#ctor(DulcisX.Nodes.SolutionNode,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)
  - DulcisX.Nodes.BaseNode.AsHierarchyItem
  - DulcisX.Nodes.BaseNode.Equals(DulcisX.Nodes.IBaseNode)
  - DulcisX.Nodes.BaseNode.Equals(System.Object)
  - DulcisX.Nodes.BaseNode.GetChildren
  - DulcisX.Nodes.BaseNode.GetDisplayName
  - DulcisX.Nodes.BaseNode.GetHashCode
  - DulcisX.Nodes.BaseNode.GetParent
  - DulcisX.Nodes.BaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  - DulcisX.Nodes.BaseNode.ItemId
  - DulcisX.Nodes.BaseNode.op_Equality(DulcisX.Nodes.BaseNode,DulcisX.Nodes.BaseNode)
  - DulcisX.Nodes.BaseNode.op_Equality(DulcisX.Nodes.BaseNode,DulcisX.Nodes.IBaseNode)
  - DulcisX.Nodes.BaseNode.op_Equality(DulcisX.Nodes.IBaseNode,DulcisX.Nodes.BaseNode)
  - DulcisX.Nodes.BaseNode.op_Inequality(DulcisX.Nodes.BaseNode,DulcisX.Nodes.BaseNode)
  - DulcisX.Nodes.BaseNode.op_Inequality(DulcisX.Nodes.BaseNode,DulcisX.Nodes.IBaseNode)
  - DulcisX.Nodes.BaseNode.op_Inequality(DulcisX.Nodes.IBaseNode,DulcisX.Nodes.BaseNode)
  - DulcisX.Nodes.BaseNode.ParentSolution
  - DulcisX.Nodes.BaseNode.UnderlyingHierarchy
  langs:
  - csharp
  - vb
  name: BaseNode
  nameWithType: BaseNode
  fullName: DulcisX.Nodes.BaseNode
  type: Class
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/BaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: BaseNode
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/BaseNode.cs
    startLine: 12
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nRepresents the most basic Hierarchy Node.\n"
  example: []
  syntax:
    content: 'public abstract class BaseNode : INamedNode, IBaseNode, IEquatable<IBaseNode>'
    content.vb: >-
      Public MustInherit Class BaseNode

          Implements INamedNode, IBaseNode, IEquatable(Of IBaseNode)
  inheritance:
  - System.Object
  derivedClasses:
  - DulcisX.Nodes.ProjectItemNode
  - DulcisX.Nodes.SolutionItemNode
  - DulcisX.Nodes.UnknownNode
  implements:
  - DulcisX.Nodes.INamedNode
  - DulcisX.Nodes.IBaseNode
  - System.IEquatable{DulcisX.Nodes.IBaseNode}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: DulcisX.Nodes.BaseNode.ParentSolution
  commentId: P:DulcisX.Nodes.BaseNode.ParentSolution
  id: ParentSolution
  parent: DulcisX.Nodes.BaseNode
  langs:
  - csharp
  - vb
  name: ParentSolution
  nameWithType: BaseNode.ParentSolution
  fullName: DulcisX.Nodes.BaseNode.ParentSolution
  type: Property
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/BaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: ParentSolution
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/BaseNode.cs
    startLine: 15
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public virtual SolutionNode ParentSolution { get; }
    parameters: []
    return:
      type: DulcisX.Nodes.SolutionNode
    content.vb: Public Overridable ReadOnly Property ParentSolution As SolutionNode
  overload: DulcisX.Nodes.BaseNode.ParentSolution*
  implements:
  - DulcisX.Nodes.IBaseNode.ParentSolution
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: DulcisX.Nodes.BaseNode.UnderlyingHierarchy
  commentId: P:DulcisX.Nodes.BaseNode.UnderlyingHierarchy
  id: UnderlyingHierarchy
  parent: DulcisX.Nodes.BaseNode
  langs:
  - csharp
  - vb
  name: UnderlyingHierarchy
  nameWithType: BaseNode.UnderlyingHierarchy
  fullName: DulcisX.Nodes.BaseNode.UnderlyingHierarchy
  type: Property
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/BaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: UnderlyingHierarchy
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/BaseNode.cs
    startLine: 17
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public IVsHierarchy UnderlyingHierarchy { get; }
    parameters: []
    return:
      type: Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
    content.vb: Public ReadOnly Property UnderlyingHierarchy As IVsHierarchy
  overload: DulcisX.Nodes.BaseNode.UnderlyingHierarchy*
  implements:
  - DulcisX.Nodes.IBaseNode.UnderlyingHierarchy
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DulcisX.Nodes.BaseNode.ItemId
  commentId: P:DulcisX.Nodes.BaseNode.ItemId
  id: ItemId
  parent: DulcisX.Nodes.BaseNode
  langs:
  - csharp
  - vb
  name: ItemId
  nameWithType: BaseNode.ItemId
  fullName: DulcisX.Nodes.BaseNode.ItemId
  type: Property
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/BaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: ItemId
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/BaseNode.cs
    startLine: 20
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public uint ItemId { get; }
    parameters: []
    return:
      type: System.UInt32
    content.vb: Public ReadOnly Property ItemId As UInteger
  overload: DulcisX.Nodes.BaseNode.ItemId*
  implements:
  - DulcisX.Nodes.IBaseNode.ItemId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DulcisX.Nodes.BaseNode.#ctor(DulcisX.Nodes.SolutionNode,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)
  commentId: M:DulcisX.Nodes.BaseNode.#ctor(DulcisX.Nodes.SolutionNode,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)
  id: '#ctor(DulcisX.Nodes.SolutionNode,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)'
  parent: DulcisX.Nodes.BaseNode
  langs:
  - csharp
  - vb
  name: BaseNode(SolutionNode, IVsHierarchy, UInt32)
  nameWithType: BaseNode.BaseNode(SolutionNode, IVsHierarchy, UInt32)
  fullName: DulcisX.Nodes.BaseNode.BaseNode(DulcisX.Nodes.SolutionNode, Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, System.UInt32)
  type: Constructor
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/BaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: .ctor
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/BaseNode.cs
    startLine: 28
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nInitializes a new instance of the <xref href=\"DulcisX.Nodes.BaseNode\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: protected BaseNode(SolutionNode solution, IVsHierarchy hierarchy, uint itemId)
    parameters:
    - id: solution
      type: DulcisX.Nodes.SolutionNode
      description: The Solution in which the Node sits in.
    - id: hierarchy
      type: Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
      description: The Hierarchy in which the Node sits in.
    - id: itemId
      type: System.UInt32
      description: The Unique Identifier for the Node in the <code data-dev-comment-type="paramref" class="paramref">hierarchy</code>.
    content.vb: Protected Sub New(solution As SolutionNode, hierarchy As IVsHierarchy, itemId As UInteger)
  overload: DulcisX.Nodes.BaseNode.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: DulcisX.Nodes.BaseNode.GetDisplayName
  commentId: M:DulcisX.Nodes.BaseNode.GetDisplayName
  id: GetDisplayName
  parent: DulcisX.Nodes.BaseNode
  langs:
  - csharp
  - vb
  name: GetDisplayName()
  nameWithType: BaseNode.GetDisplayName()
  fullName: DulcisX.Nodes.BaseNode.GetDisplayName()
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/BaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetDisplayName
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/BaseNode.cs
    startLine: 36
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public string GetDisplayName()
    return:
      type: System.String
    content.vb: Public Function GetDisplayName As String
  overload: DulcisX.Nodes.BaseNode.GetDisplayName*
  implements:
  - DulcisX.Nodes.INamedNode.GetDisplayName
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.BaseNode.GetParent
  commentId: M:DulcisX.Nodes.BaseNode.GetParent
  id: GetParent
  parent: DulcisX.Nodes.BaseNode
  langs:
  - csharp
  - vb
  name: GetParent()
  nameWithType: BaseNode.GetParent()
  fullName: DulcisX.Nodes.BaseNode.GetParent()
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/BaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetParent
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/BaseNode.cs
    startLine: 40
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public abstract BaseNode GetParent()
    return:
      type: DulcisX.Nodes.BaseNode
    content.vb: Public MustOverride Function GetParent As BaseNode
  overload: DulcisX.Nodes.BaseNode.GetParent*
  implements:
  - DulcisX.Nodes.IBaseNode.GetParent
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: DulcisX.Nodes.BaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  commentId: M:DulcisX.Nodes.BaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  id: GetParent(DulcisX.Core.Enums.NodeTypes)
  parent: DulcisX.Nodes.BaseNode
  langs:
  - csharp
  - vb
  name: GetParent(NodeTypes)
  nameWithType: BaseNode.GetParent(NodeTypes)
  fullName: DulcisX.Nodes.BaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/BaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetParent
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/BaseNode.cs
    startLine: 43
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public virtual BaseNode GetParent(NodeTypes nodeType)
    parameters:
    - id: nodeType
      type: DulcisX.Core.Enums.NodeTypes
    return:
      type: DulcisX.Nodes.BaseNode
    content.vb: Public Overridable Function GetParent(nodeType As NodeTypes) As BaseNode
  overload: DulcisX.Nodes.BaseNode.GetParent*
  implements:
  - DulcisX.Nodes.IBaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: DulcisX.Nodes.BaseNode.AsHierarchyItem
  commentId: M:DulcisX.Nodes.BaseNode.AsHierarchyItem
  id: AsHierarchyItem
  parent: DulcisX.Nodes.BaseNode
  langs:
  - csharp
  - vb
  name: AsHierarchyItem()
  nameWithType: BaseNode.AsHierarchyItem()
  fullName: DulcisX.Nodes.BaseNode.AsHierarchyItem()
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/BaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: AsHierarchyItem
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/BaseNode.cs
    startLine: 68
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public IVsHierarchyItem AsHierarchyItem()
    return:
      type: Microsoft.VisualStudio.Shell.IVsHierarchyItem
    content.vb: Public Function AsHierarchyItem As IVsHierarchyItem
  overload: DulcisX.Nodes.BaseNode.AsHierarchyItem*
  implements:
  - DulcisX.Nodes.IBaseNode.AsHierarchyItem
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.BaseNode.GetChildren
  commentId: M:DulcisX.Nodes.BaseNode.GetChildren
  id: GetChildren
  parent: DulcisX.Nodes.BaseNode
  langs:
  - csharp
  - vb
  name: GetChildren()
  nameWithType: BaseNode.GetChildren()
  fullName: DulcisX.Nodes.BaseNode.GetChildren()
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/BaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetChildren
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/BaseNode.cs
    startLine: 79
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nReturns all immediate children Nodes of the current Node.\n"
  example: []
  syntax:
    content: public abstract IEnumerable<BaseNode> GetChildren()
    return:
      type: System.Collections.Generic.IEnumerable{DulcisX.Nodes.BaseNode}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> with the children.
    content.vb: Public MustOverride Function GetChildren As IEnumerable(Of BaseNode)
  overload: DulcisX.Nodes.BaseNode.GetChildren*
  implements:
  - DulcisX.Nodes.IBaseNode.GetChildren
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: DulcisX.Nodes.BaseNode.op_Equality(DulcisX.Nodes.BaseNode,DulcisX.Nodes.BaseNode)
  commentId: M:DulcisX.Nodes.BaseNode.op_Equality(DulcisX.Nodes.BaseNode,DulcisX.Nodes.BaseNode)
  id: op_Equality(DulcisX.Nodes.BaseNode,DulcisX.Nodes.BaseNode)
  parent: DulcisX.Nodes.BaseNode
  langs:
  - csharp
  - vb
  name: Equality(BaseNode, BaseNode)
  nameWithType: BaseNode.Equality(BaseNode, BaseNode)
  fullName: DulcisX.Nodes.BaseNode.Equality(DulcisX.Nodes.BaseNode, DulcisX.Nodes.BaseNode)
  type: Operator
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/BaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: op_Equality
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/BaseNode.cs
    startLine: 84
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public static bool operator ==(BaseNode node1, BaseNode node2)
    parameters:
    - id: node1
      type: DulcisX.Nodes.BaseNode
    - id: node2
      type: DulcisX.Nodes.BaseNode
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(node1 As BaseNode, node2 As BaseNode) As Boolean
  overload: DulcisX.Nodes.BaseNode.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DulcisX.Nodes.BaseNode.op_Equality(DulcisX.Nodes.IBaseNode,DulcisX.Nodes.BaseNode)
  commentId: M:DulcisX.Nodes.BaseNode.op_Equality(DulcisX.Nodes.IBaseNode,DulcisX.Nodes.BaseNode)
  id: op_Equality(DulcisX.Nodes.IBaseNode,DulcisX.Nodes.BaseNode)
  parent: DulcisX.Nodes.BaseNode
  langs:
  - csharp
  - vb
  name: Equality(IBaseNode, BaseNode)
  nameWithType: BaseNode.Equality(IBaseNode, BaseNode)
  fullName: DulcisX.Nodes.BaseNode.Equality(DulcisX.Nodes.IBaseNode, DulcisX.Nodes.BaseNode)
  type: Operator
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/BaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: op_Equality
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/BaseNode.cs
    startLine: 88
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public static bool operator ==(IBaseNode node1, BaseNode node2)
    parameters:
    - id: node1
      type: DulcisX.Nodes.IBaseNode
    - id: node2
      type: DulcisX.Nodes.BaseNode
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(node1 As IBaseNode, node2 As BaseNode) As Boolean
  overload: DulcisX.Nodes.BaseNode.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DulcisX.Nodes.BaseNode.op_Equality(DulcisX.Nodes.BaseNode,DulcisX.Nodes.IBaseNode)
  commentId: M:DulcisX.Nodes.BaseNode.op_Equality(DulcisX.Nodes.BaseNode,DulcisX.Nodes.IBaseNode)
  id: op_Equality(DulcisX.Nodes.BaseNode,DulcisX.Nodes.IBaseNode)
  parent: DulcisX.Nodes.BaseNode
  langs:
  - csharp
  - vb
  name: Equality(BaseNode, IBaseNode)
  nameWithType: BaseNode.Equality(BaseNode, IBaseNode)
  fullName: DulcisX.Nodes.BaseNode.Equality(DulcisX.Nodes.BaseNode, DulcisX.Nodes.IBaseNode)
  type: Operator
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/BaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: op_Equality
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/BaseNode.cs
    startLine: 92
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public static bool operator ==(BaseNode node1, IBaseNode node2)
    parameters:
    - id: node1
      type: DulcisX.Nodes.BaseNode
    - id: node2
      type: DulcisX.Nodes.IBaseNode
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(node1 As BaseNode, node2 As IBaseNode) As Boolean
  overload: DulcisX.Nodes.BaseNode.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DulcisX.Nodes.BaseNode.op_Inequality(DulcisX.Nodes.BaseNode,DulcisX.Nodes.BaseNode)
  commentId: M:DulcisX.Nodes.BaseNode.op_Inequality(DulcisX.Nodes.BaseNode,DulcisX.Nodes.BaseNode)
  id: op_Inequality(DulcisX.Nodes.BaseNode,DulcisX.Nodes.BaseNode)
  parent: DulcisX.Nodes.BaseNode
  langs:
  - csharp
  - vb
  name: Inequality(BaseNode, BaseNode)
  nameWithType: BaseNode.Inequality(BaseNode, BaseNode)
  fullName: DulcisX.Nodes.BaseNode.Inequality(DulcisX.Nodes.BaseNode, DulcisX.Nodes.BaseNode)
  type: Operator
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/BaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: op_Inequality
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/BaseNode.cs
    startLine: 96
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public static bool operator !=(BaseNode node1, BaseNode node2)
    parameters:
    - id: node1
      type: DulcisX.Nodes.BaseNode
    - id: node2
      type: DulcisX.Nodes.BaseNode
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(node1 As BaseNode, node2 As BaseNode) As Boolean
  overload: DulcisX.Nodes.BaseNode.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DulcisX.Nodes.BaseNode.op_Inequality(DulcisX.Nodes.IBaseNode,DulcisX.Nodes.BaseNode)
  commentId: M:DulcisX.Nodes.BaseNode.op_Inequality(DulcisX.Nodes.IBaseNode,DulcisX.Nodes.BaseNode)
  id: op_Inequality(DulcisX.Nodes.IBaseNode,DulcisX.Nodes.BaseNode)
  parent: DulcisX.Nodes.BaseNode
  langs:
  - csharp
  - vb
  name: Inequality(IBaseNode, BaseNode)
  nameWithType: BaseNode.Inequality(IBaseNode, BaseNode)
  fullName: DulcisX.Nodes.BaseNode.Inequality(DulcisX.Nodes.IBaseNode, DulcisX.Nodes.BaseNode)
  type: Operator
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/BaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: op_Inequality
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/BaseNode.cs
    startLine: 100
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public static bool operator !=(IBaseNode node1, BaseNode node2)
    parameters:
    - id: node1
      type: DulcisX.Nodes.IBaseNode
    - id: node2
      type: DulcisX.Nodes.BaseNode
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(node1 As IBaseNode, node2 As BaseNode) As Boolean
  overload: DulcisX.Nodes.BaseNode.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DulcisX.Nodes.BaseNode.op_Inequality(DulcisX.Nodes.BaseNode,DulcisX.Nodes.IBaseNode)
  commentId: M:DulcisX.Nodes.BaseNode.op_Inequality(DulcisX.Nodes.BaseNode,DulcisX.Nodes.IBaseNode)
  id: op_Inequality(DulcisX.Nodes.BaseNode,DulcisX.Nodes.IBaseNode)
  parent: DulcisX.Nodes.BaseNode
  langs:
  - csharp
  - vb
  name: Inequality(BaseNode, IBaseNode)
  nameWithType: BaseNode.Inequality(BaseNode, IBaseNode)
  fullName: DulcisX.Nodes.BaseNode.Inequality(DulcisX.Nodes.BaseNode, DulcisX.Nodes.IBaseNode)
  type: Operator
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/BaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: op_Inequality
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/BaseNode.cs
    startLine: 104
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public static bool operator !=(BaseNode node1, IBaseNode node2)
    parameters:
    - id: node1
      type: DulcisX.Nodes.BaseNode
    - id: node2
      type: DulcisX.Nodes.IBaseNode
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(node1 As BaseNode, node2 As IBaseNode) As Boolean
  overload: DulcisX.Nodes.BaseNode.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DulcisX.Nodes.BaseNode.Equals(DulcisX.Nodes.IBaseNode)
  commentId: M:DulcisX.Nodes.BaseNode.Equals(DulcisX.Nodes.IBaseNode)
  id: Equals(DulcisX.Nodes.IBaseNode)
  parent: DulcisX.Nodes.BaseNode
  langs:
  - csharp
  - vb
  name: Equals(IBaseNode)
  nameWithType: BaseNode.Equals(IBaseNode)
  fullName: DulcisX.Nodes.BaseNode.Equals(DulcisX.Nodes.IBaseNode)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/BaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: Equals
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/BaseNode.cs
    startLine: 125
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public virtual bool Equals(IBaseNode other)
    parameters:
    - id: other
      type: DulcisX.Nodes.IBaseNode
    return:
      type: System.Boolean
    content.vb: Public Overridable Function Equals(other As IBaseNode) As Boolean
  overload: DulcisX.Nodes.BaseNode.Equals*
  implements:
  - System.IEquatable{DulcisX.Nodes.IBaseNode}.Equals(DulcisX.Nodes.IBaseNode)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: DulcisX.Nodes.BaseNode.Equals(System.Object)
  commentId: M:DulcisX.Nodes.BaseNode.Equals(System.Object)
  id: Equals(System.Object)
  parent: DulcisX.Nodes.BaseNode
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: BaseNode.Equals(Object)
  fullName: DulcisX.Nodes.BaseNode.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/BaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: Equals
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/BaseNode.cs
    startLine: 141
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public override sealed bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public NotOverridable Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: DulcisX.Nodes.BaseNode.Equals*
  modifiers.csharp:
  - public
  - override
  - sealed
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
- uid: DulcisX.Nodes.BaseNode.GetHashCode
  commentId: M:DulcisX.Nodes.BaseNode.GetHashCode
  id: GetHashCode
  parent: DulcisX.Nodes.BaseNode
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: BaseNode.GetHashCode()
  fullName: DulcisX.Nodes.BaseNode.GetHashCode()
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/BaseNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetHashCode
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/BaseNode.cs
    startLine: 156
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public override sealed int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public NotOverridable Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: DulcisX.Nodes.BaseNode.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - sealed
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
references:
- uid: DulcisX.Nodes
  commentId: N:DulcisX.Nodes
  name: DulcisX.Nodes
  nameWithType: DulcisX.Nodes
  fullName: DulcisX.Nodes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: DulcisX.Nodes.INamedNode
  commentId: T:DulcisX.Nodes.INamedNode
  parent: DulcisX.Nodes
  name: INamedNode
  nameWithType: INamedNode
  fullName: DulcisX.Nodes.INamedNode
- uid: DulcisX.Nodes.IBaseNode
  commentId: T:DulcisX.Nodes.IBaseNode
  parent: DulcisX.Nodes
  name: IBaseNode
  nameWithType: IBaseNode
  fullName: DulcisX.Nodes.IBaseNode
- uid: System.IEquatable{DulcisX.Nodes.IBaseNode}
  commentId: T:System.IEquatable{DulcisX.Nodes.IBaseNode}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<IBaseNode>
  nameWithType: IEquatable<IBaseNode>
  fullName: System.IEquatable<DulcisX.Nodes.IBaseNode>
  nameWithType.vb: IEquatable(Of IBaseNode)
  fullName.vb: System.IEquatable(Of DulcisX.Nodes.IBaseNode)
  name.vb: IEquatable(Of IBaseNode)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DulcisX.Nodes.IBaseNode
    name: IBaseNode
    nameWithType: IBaseNode
    fullName: DulcisX.Nodes.IBaseNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DulcisX.Nodes.IBaseNode
    name: IBaseNode
    nameWithType: IBaseNode
    fullName: DulcisX.Nodes.IBaseNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.BaseNode.ParentSolution*
  commentId: Overload:DulcisX.Nodes.BaseNode.ParentSolution
  name: ParentSolution
  nameWithType: BaseNode.ParentSolution
  fullName: DulcisX.Nodes.BaseNode.ParentSolution
- uid: DulcisX.Nodes.IBaseNode.ParentSolution
  commentId: P:DulcisX.Nodes.IBaseNode.ParentSolution
  parent: DulcisX.Nodes.IBaseNode
  name: ParentSolution
  nameWithType: IBaseNode.ParentSolution
  fullName: DulcisX.Nodes.IBaseNode.ParentSolution
- uid: DulcisX.Nodes.SolutionNode
  commentId: T:DulcisX.Nodes.SolutionNode
  parent: DulcisX.Nodes
  name: SolutionNode
  nameWithType: SolutionNode
  fullName: DulcisX.Nodes.SolutionNode
- uid: DulcisX.Nodes.BaseNode.UnderlyingHierarchy*
  commentId: Overload:DulcisX.Nodes.BaseNode.UnderlyingHierarchy
  name: UnderlyingHierarchy
  nameWithType: BaseNode.UnderlyingHierarchy
  fullName: DulcisX.Nodes.BaseNode.UnderlyingHierarchy
- uid: DulcisX.Nodes.IBaseNode.UnderlyingHierarchy
  commentId: P:DulcisX.Nodes.IBaseNode.UnderlyingHierarchy
  parent: DulcisX.Nodes.IBaseNode
  name: UnderlyingHierarchy
  nameWithType: IBaseNode.UnderlyingHierarchy
  fullName: DulcisX.Nodes.IBaseNode.UnderlyingHierarchy
- uid: Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
  commentId: T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
  parent: Microsoft.VisualStudio.Shell.Interop
  isExternal: true
  name: IVsHierarchy
  nameWithType: IVsHierarchy
  fullName: Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
- uid: Microsoft.VisualStudio.Shell.Interop
  commentId: N:Microsoft.VisualStudio.Shell.Interop
  isExternal: true
  name: Microsoft.VisualStudio.Shell.Interop
  nameWithType: Microsoft.VisualStudio.Shell.Interop
  fullName: Microsoft.VisualStudio.Shell.Interop
- uid: DulcisX.Nodes.BaseNode.ItemId*
  commentId: Overload:DulcisX.Nodes.BaseNode.ItemId
  name: ItemId
  nameWithType: BaseNode.ItemId
  fullName: DulcisX.Nodes.BaseNode.ItemId
- uid: DulcisX.Nodes.IBaseNode.ItemId
  commentId: P:DulcisX.Nodes.IBaseNode.ItemId
  parent: DulcisX.Nodes.IBaseNode
  name: ItemId
  nameWithType: IBaseNode.ItemId
  fullName: DulcisX.Nodes.IBaseNode.ItemId
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: DulcisX.Nodes.BaseNode
  commentId: T:DulcisX.Nodes.BaseNode
  parent: DulcisX.Nodes
  name: BaseNode
  nameWithType: BaseNode
  fullName: DulcisX.Nodes.BaseNode
- uid: DulcisX.Nodes.BaseNode.#ctor*
  commentId: Overload:DulcisX.Nodes.BaseNode.#ctor
  name: BaseNode
  nameWithType: BaseNode.BaseNode
  fullName: DulcisX.Nodes.BaseNode.BaseNode
- uid: DulcisX.Nodes.BaseNode.GetDisplayName*
  commentId: Overload:DulcisX.Nodes.BaseNode.GetDisplayName
  name: GetDisplayName
  nameWithType: BaseNode.GetDisplayName
  fullName: DulcisX.Nodes.BaseNode.GetDisplayName
- uid: DulcisX.Nodes.INamedNode.GetDisplayName
  commentId: M:DulcisX.Nodes.INamedNode.GetDisplayName
  parent: DulcisX.Nodes.INamedNode
  name: GetDisplayName()
  nameWithType: INamedNode.GetDisplayName()
  fullName: DulcisX.Nodes.INamedNode.GetDisplayName()
  spec.csharp:
  - uid: DulcisX.Nodes.INamedNode.GetDisplayName
    name: GetDisplayName
    nameWithType: INamedNode.GetDisplayName
    fullName: DulcisX.Nodes.INamedNode.GetDisplayName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.INamedNode.GetDisplayName
    name: GetDisplayName
    nameWithType: INamedNode.GetDisplayName
    fullName: DulcisX.Nodes.INamedNode.GetDisplayName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DulcisX.Nodes.BaseNode.GetParent*
  commentId: Overload:DulcisX.Nodes.BaseNode.GetParent
  name: GetParent
  nameWithType: BaseNode.GetParent
  fullName: DulcisX.Nodes.BaseNode.GetParent
- uid: DulcisX.Nodes.IBaseNode.GetParent
  commentId: M:DulcisX.Nodes.IBaseNode.GetParent
  parent: DulcisX.Nodes.IBaseNode
  name: GetParent()
  nameWithType: IBaseNode.GetParent()
  fullName: DulcisX.Nodes.IBaseNode.GetParent()
  spec.csharp:
  - uid: DulcisX.Nodes.IBaseNode.GetParent
    name: GetParent
    nameWithType: IBaseNode.GetParent
    fullName: DulcisX.Nodes.IBaseNode.GetParent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.IBaseNode.GetParent
    name: GetParent
    nameWithType: IBaseNode.GetParent
    fullName: DulcisX.Nodes.IBaseNode.GetParent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.IBaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  commentId: M:DulcisX.Nodes.IBaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  parent: DulcisX.Nodes.IBaseNode
  name: GetParent(NodeTypes)
  nameWithType: IBaseNode.GetParent(NodeTypes)
  fullName: DulcisX.Nodes.IBaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  spec.csharp:
  - uid: DulcisX.Nodes.IBaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
    name: GetParent
    nameWithType: IBaseNode.GetParent
    fullName: DulcisX.Nodes.IBaseNode.GetParent
  - name: (
    nameWithType: (
    fullName: (
  - uid: DulcisX.Core.Enums.NodeTypes
    name: NodeTypes
    nameWithType: NodeTypes
    fullName: DulcisX.Core.Enums.NodeTypes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.IBaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
    name: GetParent
    nameWithType: IBaseNode.GetParent
    fullName: DulcisX.Nodes.IBaseNode.GetParent
  - name: (
    nameWithType: (
    fullName: (
  - uid: DulcisX.Core.Enums.NodeTypes
    name: NodeTypes
    nameWithType: NodeTypes
    fullName: DulcisX.Core.Enums.NodeTypes
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Core.Enums.NodeTypes
  commentId: T:DulcisX.Core.Enums.NodeTypes
  parent: DulcisX.Core.Enums
  name: NodeTypes
  nameWithType: NodeTypes
  fullName: DulcisX.Core.Enums.NodeTypes
- uid: DulcisX.Core.Enums
  commentId: N:DulcisX.Core.Enums
  name: DulcisX.Core.Enums
  nameWithType: DulcisX.Core.Enums
  fullName: DulcisX.Core.Enums
- uid: DulcisX.Nodes.BaseNode.AsHierarchyItem*
  commentId: Overload:DulcisX.Nodes.BaseNode.AsHierarchyItem
  name: AsHierarchyItem
  nameWithType: BaseNode.AsHierarchyItem
  fullName: DulcisX.Nodes.BaseNode.AsHierarchyItem
- uid: DulcisX.Nodes.IBaseNode.AsHierarchyItem
  commentId: M:DulcisX.Nodes.IBaseNode.AsHierarchyItem
  parent: DulcisX.Nodes.IBaseNode
  name: AsHierarchyItem()
  nameWithType: IBaseNode.AsHierarchyItem()
  fullName: DulcisX.Nodes.IBaseNode.AsHierarchyItem()
  spec.csharp:
  - uid: DulcisX.Nodes.IBaseNode.AsHierarchyItem
    name: AsHierarchyItem
    nameWithType: IBaseNode.AsHierarchyItem
    fullName: DulcisX.Nodes.IBaseNode.AsHierarchyItem
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.IBaseNode.AsHierarchyItem
    name: AsHierarchyItem
    nameWithType: IBaseNode.AsHierarchyItem
    fullName: DulcisX.Nodes.IBaseNode.AsHierarchyItem
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.VisualStudio.Shell.IVsHierarchyItem
  commentId: T:Microsoft.VisualStudio.Shell.IVsHierarchyItem
  parent: Microsoft.VisualStudio.Shell
  isExternal: true
  name: IVsHierarchyItem
  nameWithType: IVsHierarchyItem
  fullName: Microsoft.VisualStudio.Shell.IVsHierarchyItem
- uid: Microsoft.VisualStudio.Shell
  commentId: N:Microsoft.VisualStudio.Shell
  isExternal: true
  name: Microsoft.VisualStudio.Shell
  nameWithType: Microsoft.VisualStudio.Shell
  fullName: Microsoft.VisualStudio.Shell
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.BaseNode.GetChildren*
  commentId: Overload:DulcisX.Nodes.BaseNode.GetChildren
  name: GetChildren
  nameWithType: BaseNode.GetChildren
  fullName: DulcisX.Nodes.BaseNode.GetChildren
- uid: DulcisX.Nodes.IBaseNode.GetChildren
  commentId: M:DulcisX.Nodes.IBaseNode.GetChildren
  parent: DulcisX.Nodes.IBaseNode
  name: GetChildren()
  nameWithType: IBaseNode.GetChildren()
  fullName: DulcisX.Nodes.IBaseNode.GetChildren()
  spec.csharp:
  - uid: DulcisX.Nodes.IBaseNode.GetChildren
    name: GetChildren
    nameWithType: IBaseNode.GetChildren
    fullName: DulcisX.Nodes.IBaseNode.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.IBaseNode.GetChildren
    name: GetChildren
    nameWithType: IBaseNode.GetChildren
    fullName: DulcisX.Nodes.IBaseNode.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{DulcisX.Nodes.BaseNode}
  commentId: T:System.Collections.Generic.IEnumerable{DulcisX.Nodes.BaseNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<BaseNode>
  nameWithType: IEnumerable<BaseNode>
  fullName: System.Collections.Generic.IEnumerable<DulcisX.Nodes.BaseNode>
  nameWithType.vb: IEnumerable(Of BaseNode)
  fullName.vb: System.Collections.Generic.IEnumerable(Of DulcisX.Nodes.BaseNode)
  name.vb: IEnumerable(Of BaseNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DulcisX.Nodes.BaseNode
    name: BaseNode
    nameWithType: BaseNode
    fullName: DulcisX.Nodes.BaseNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DulcisX.Nodes.BaseNode
    name: BaseNode
    nameWithType: BaseNode
    fullName: DulcisX.Nodes.BaseNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: DulcisX.Nodes.BaseNode.op_Equality*
  commentId: Overload:DulcisX.Nodes.BaseNode.op_Equality
  name: Equality
  nameWithType: BaseNode.Equality
  fullName: DulcisX.Nodes.BaseNode.Equality
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DulcisX.Nodes.BaseNode.op_Inequality*
  commentId: Overload:DulcisX.Nodes.BaseNode.op_Inequality
  name: Inequality
  nameWithType: BaseNode.Inequality
  fullName: DulcisX.Nodes.BaseNode.Inequality
- uid: DulcisX.Nodes.BaseNode.Equals*
  commentId: Overload:DulcisX.Nodes.BaseNode.Equals
  name: Equals
  nameWithType: BaseNode.Equals
  fullName: DulcisX.Nodes.BaseNode.Equals
- uid: System.IEquatable{DulcisX.Nodes.IBaseNode}.Equals(DulcisX.Nodes.IBaseNode)
  commentId: M:System.IEquatable{DulcisX.Nodes.IBaseNode}.Equals(DulcisX.Nodes.IBaseNode)
  parent: System.IEquatable{DulcisX.Nodes.IBaseNode}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(IBaseNode)
  nameWithType: IEquatable<IBaseNode>.Equals(IBaseNode)
  fullName: System.IEquatable<DulcisX.Nodes.IBaseNode>.Equals(DulcisX.Nodes.IBaseNode)
  nameWithType.vb: IEquatable(Of IBaseNode).Equals(IBaseNode)
  fullName.vb: System.IEquatable(Of DulcisX.Nodes.IBaseNode).Equals(DulcisX.Nodes.IBaseNode)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<IBaseNode>.Equals
    fullName: System.IEquatable<DulcisX.Nodes.IBaseNode>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: DulcisX.Nodes.IBaseNode
    name: IBaseNode
    nameWithType: IBaseNode
    fullName: DulcisX.Nodes.IBaseNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of IBaseNode).Equals
    fullName: System.IEquatable(Of DulcisX.Nodes.IBaseNode).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: DulcisX.Nodes.IBaseNode
    name: IBaseNode
    nameWithType: IBaseNode
    fullName: DulcisX.Nodes.IBaseNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.BaseNode.GetHashCode*
  commentId: Overload:DulcisX.Nodes.BaseNode.GetHashCode
  name: GetHashCode
  nameWithType: BaseNode.GetHashCode
  fullName: DulcisX.Nodes.BaseNode.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32

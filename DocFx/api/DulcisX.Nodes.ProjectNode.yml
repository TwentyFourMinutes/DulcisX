### YamlMime:ManagedReference
items:
- uid: DulcisX.Nodes.ProjectNode
  commentId: T:DulcisX.Nodes.ProjectNode
  id: ProjectNode
  parent: DulcisX.Nodes
  children:
  - DulcisX.Nodes.ProjectNode.#ctor(DulcisX.Nodes.SolutionNode,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,DulcisX.Core.Enums.ProjectNodeType)
  - DulcisX.Nodes.ProjectNode.AddExistingDocument(DulcisX.Nodes.FolderNode,System.String)
  - DulcisX.Nodes.ProjectNode.AddExistingDocument(System.String)
  - DulcisX.Nodes.ProjectNode.ContainsPhysicalNode(System.String)
  - DulcisX.Nodes.ProjectNode.CreateDocument(DulcisX.Nodes.FolderNode,System.String)
  - DulcisX.Nodes.ProjectNode.CreateDocument(System.String)
  - DulcisX.Nodes.ProjectNode.GetChildren
  - DulcisX.Nodes.ProjectNode.GetDirectoryName
  - DulcisX.Nodes.ProjectNode.GetFileName
  - DulcisX.Nodes.ProjectNode.GetFullName
  - DulcisX.Nodes.ProjectNode.GetGuid
  - DulcisX.Nodes.ProjectNode.GetItemProperty(System.UInt32,DulcisX.Core.Enums.DocumentProperty)
  - DulcisX.Nodes.ProjectNode.GetOutputTypeAction
  - DulcisX.Nodes.ProjectNode.GetRelativePath(DulcisX.Nodes.IPhysicalProjectItemNode)
  - DulcisX.Nodes.ProjectNode.IsLoaded
  - DulcisX.Nodes.ProjectNode.Modify(System.Action{DulcisX.Nodes.ModifyProjectDocument})
  - DulcisX.Nodes.ProjectNode.ModifyAndWaitAsync(System.Action{DulcisX.Nodes.ModifyProjectDocument},System.Nullable{System.TimeSpan})
  - DulcisX.Nodes.ProjectNode.MoveNodeInsideProject(DulcisX.Nodes.FolderNode,DulcisX.Nodes.DocumentNode)
  - DulcisX.Nodes.ProjectNode.ProjectNodeType
  - DulcisX.Nodes.ProjectNode.SaveAllChildren(System.Boolean)
  - DulcisX.Nodes.ProjectNode.SetItemProperty(System.UInt32,DulcisX.Core.Enums.DocumentProperty,System.String)
  - DulcisX.Nodes.ProjectNode.SetOutputTypeAction(Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE)
  - DulcisX.Nodes.ProjectNode.TryGetPhysicalNode``1(System.String,``0@)
  - DulcisX.Nodes.ProjectNode.TryRemoveChildren(DulcisX.Nodes.ProjectItemNode,System.Int32@)
  - DulcisX.Nodes.ProjectNode.UnderlyingProject
  - DulcisX.Nodes.ProjectNode.VsBuildPropertyStorage
  langs:
  - csharp
  - vb
  name: ProjectNode
  nameWithType: ProjectNode
  fullName: DulcisX.Nodes.ProjectNode
  type: Class
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: ProjectNode
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 18
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nRepresents a project within a <xref href=\"DulcisX.Nodes.SolutionNode\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class ProjectNode : SolutionItemNode, IPhysicalNode, INamedNode, IBaseNode, IEquatable<IBaseNode>'
    content.vb: >-
      Public Class ProjectNode

          Inherits SolutionItemNode

          Implements IPhysicalNode, INamedNode, IBaseNode, IEquatable(Of IBaseNode)
  inheritance:
  - System.Object
  - DulcisX.Nodes.BaseNode
  - DulcisX.Nodes.SolutionItemNode
  implements:
  - DulcisX.Nodes.IPhysicalNode
  - DulcisX.Nodes.INamedNode
  - DulcisX.Nodes.IBaseNode
  - System.IEquatable{DulcisX.Nodes.IBaseNode}
  inheritedMembers:
  - DulcisX.Nodes.SolutionItemNode.GetParent
  - DulcisX.Nodes.SolutionItemNode.GetAllChildrenAsync(System.Threading.CancellationToken)
  - DulcisX.Nodes.SolutionItemNode.GetAllChildrenAsync(System.Predicate{DulcisX.Nodes.BaseNode},System.Threading.CancellationToken)
  - DulcisX.Nodes.BaseNode.ParentSolution
  - DulcisX.Nodes.BaseNode.UnderlyingHierarchy
  - DulcisX.Nodes.BaseNode.ItemId
  - DulcisX.Nodes.BaseNode.GetDisplayName
  - DulcisX.Nodes.BaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  - DulcisX.Nodes.BaseNode.AsHierarchyItem
  - DulcisX.Nodes.BaseNode.Equals(DulcisX.Nodes.IBaseNode)
  - DulcisX.Nodes.BaseNode.Equals(System.Object)
  - DulcisX.Nodes.BaseNode.GetHashCode
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DulcisX.Nodes.ProjectNode.VsBuildPropertyStorage
  commentId: P:DulcisX.Nodes.ProjectNode.VsBuildPropertyStorage
  id: VsBuildPropertyStorage
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: VsBuildPropertyStorage
  nameWithType: ProjectNode.VsBuildPropertyStorage
  fullName: DulcisX.Nodes.ProjectNode.VsBuildPropertyStorage
  type: Property
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: VsBuildPropertyStorage
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 23
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nGets the projects <xref href=\"Microsoft.VisualStudio.Shell.Interop.IVsBuildPropertyStorage\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public IVsBuildPropertyStorage VsBuildPropertyStorage { get; }
    parameters: []
    return:
      type: Microsoft.VisualStudio.Shell.Interop.IVsBuildPropertyStorage
    content.vb: Public ReadOnly Property VsBuildPropertyStorage As IVsBuildPropertyStorage
  overload: DulcisX.Nodes.ProjectNode.VsBuildPropertyStorage*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DulcisX.Nodes.ProjectNode.UnderlyingProject
  commentId: P:DulcisX.Nodes.ProjectNode.UnderlyingProject
  id: UnderlyingProject
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: UnderlyingProject
  nameWithType: ProjectNode.UnderlyingProject
  fullName: DulcisX.Nodes.ProjectNode.UnderlyingProject
  type: Property
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: UnderlyingProject
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 43
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nGets the native <xref href=\"Microsoft.VisualStudio.Shell.Interop.IVsProject\" data-throw-if-not-resolved=\"false\"></xref> for the current <xref href=\"DulcisX.Nodes.ProjectNode\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public IVsProject UnderlyingProject { get; }
    parameters: []
    return:
      type: Microsoft.VisualStudio.Shell.Interop.IVsProject
    content.vb: Public ReadOnly Property UnderlyingProject As IVsProject
  overload: DulcisX.Nodes.ProjectNode.UnderlyingProject*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DulcisX.Nodes.ProjectNode.ProjectNodeType
  commentId: P:DulcisX.Nodes.ProjectNode.ProjectNodeType
  id: ProjectNodeType
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: ProjectNodeType
  nameWithType: ProjectNode.ProjectNodeType
  fullName: DulcisX.Nodes.ProjectNode.ProjectNodeType
  type: Property
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: ProjectNodeType
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 59
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public ProjectNodeType ProjectNodeType { get; }
    parameters: []
    return:
      type: DulcisX.Core.Enums.ProjectNodeType
    content.vb: Public ReadOnly Property ProjectNodeType As ProjectNodeType
  overload: DulcisX.Nodes.ProjectNode.ProjectNodeType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DulcisX.Nodes.ProjectNode.#ctor(DulcisX.Nodes.SolutionNode,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,DulcisX.Core.Enums.ProjectNodeType)
  commentId: M:DulcisX.Nodes.ProjectNode.#ctor(DulcisX.Nodes.SolutionNode,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,DulcisX.Core.Enums.ProjectNodeType)
  id: '#ctor(DulcisX.Nodes.SolutionNode,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,DulcisX.Core.Enums.ProjectNodeType)'
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: ProjectNode(SolutionNode, IVsHierarchy, ProjectNodeType)
  nameWithType: ProjectNode.ProjectNode(SolutionNode, IVsHierarchy, ProjectNodeType)
  fullName: DulcisX.Nodes.ProjectNode.ProjectNode(DulcisX.Nodes.SolutionNode, Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, DulcisX.Core.Enums.ProjectNodeType)
  type: Constructor
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: .ctor
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 67
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nInitializes a new instance of the <xref href=\"DulcisX.Nodes.ProjectNode\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public ProjectNode(SolutionNode solution, IVsHierarchy hierarchy, ProjectNodeType projectType = ProjectNodeType.Project)
    parameters:
    - id: solution
      type: DulcisX.Nodes.SolutionNode
      description: The Solution in which the <xref href="DulcisX.Nodes.ProjectNode" data-throw-if-not-resolved="false"></xref> sits in.
    - id: hierarchy
      type: Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
      description: The Hierarchy of the Project.
    - id: projectType
      type: DulcisX.Core.Enums.ProjectNodeType
      description: The type of the current Project.
    content.vb: Public Sub New(solution As SolutionNode, hierarchy As IVsHierarchy, projectType As ProjectNodeType = ProjectNodeType.Project)
  overload: DulcisX.Nodes.ProjectNode.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.ProjectNode.GetGuid
  commentId: M:DulcisX.Nodes.ProjectNode.GetGuid
  id: GetGuid
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: GetGuid()
  nameWithType: ProjectNode.GetGuid()
  fullName: DulcisX.Nodes.ProjectNode.GetGuid()
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetGuid
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 76
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nReturns the Unique Identifier for the current <xref href=\"DulcisX.Nodes.ProjectNode\" data-throw-if-not-resolved=\"false\"></xref> in the <xref href=\"DulcisX.Nodes.SolutionNode\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Guid GetGuid()
    return:
      type: System.Guid
      description: The Unique Identifier.
    content.vb: Public Function GetGuid As Guid
  overload: DulcisX.Nodes.ProjectNode.GetGuid*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.ProjectNode.GetFileName
  commentId: M:DulcisX.Nodes.ProjectNode.GetFileName
  id: GetFileName
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: GetFileName()
  nameWithType: ProjectNode.GetFileName()
  fullName: DulcisX.Nodes.ProjectNode.GetFileName()
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetFileName
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 88
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public string GetFileName()
    return:
      type: System.String
    content.vb: Public Function GetFileName As String
  overload: DulcisX.Nodes.ProjectNode.GetFileName*
  implements:
  - DulcisX.Nodes.IPhysicalNode.GetFileName
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.ProjectNode.GetFullName
  commentId: M:DulcisX.Nodes.ProjectNode.GetFullName
  id: GetFullName
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: GetFullName()
  nameWithType: ProjectNode.GetFullName()
  fullName: DulcisX.Nodes.ProjectNode.GetFullName()
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetFullName
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 96
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public string GetFullName()
    return:
      type: System.String
    content.vb: Public Function GetFullName As String
  overload: DulcisX.Nodes.ProjectNode.GetFullName*
  implements:
  - DulcisX.Nodes.IPhysicalNode.GetFullName
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.ProjectNode.GetDirectoryName
  commentId: M:DulcisX.Nodes.ProjectNode.GetDirectoryName
  id: GetDirectoryName
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: GetDirectoryName()
  nameWithType: ProjectNode.GetDirectoryName()
  fullName: DulcisX.Nodes.ProjectNode.GetDirectoryName()
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetDirectoryName
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 107
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  syntax:
    content: public string GetDirectoryName()
    return:
      type: System.String
    content.vb: Public Function GetDirectoryName As String
  overload: DulcisX.Nodes.ProjectNode.GetDirectoryName*
  implements:
  - DulcisX.Nodes.IPhysicalNode.GetDirectoryName
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.ProjectNode.IsLoaded
  commentId: M:DulcisX.Nodes.ProjectNode.IsLoaded
  id: IsLoaded
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: IsLoaded()
  nameWithType: ProjectNode.IsLoaded()
  fullName: DulcisX.Nodes.ProjectNode.IsLoaded()
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: IsLoaded
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 118
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nGets a value indicating whether the current <xref href=\"DulcisX.Nodes.ProjectNode\" data-throw-if-not-resolved=\"false\"></xref> is loaded.\n"
  example: []
  syntax:
    content: public bool IsLoaded()
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if the <xref href="DulcisX.Nodes.ProjectNode" data-throw-if-not-resolved="false"></xref> is loaded; otherwise <xref uid="langword_csharp_false" name="false" href=""></xref>.
    content.vb: Public Function IsLoaded As Boolean
  overload: DulcisX.Nodes.ProjectNode.IsLoaded*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.ProjectNode.GetOutputTypeAction
  commentId: M:DulcisX.Nodes.ProjectNode.GetOutputTypeAction
  id: GetOutputTypeAction
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: GetOutputTypeAction()
  nameWithType: ProjectNode.GetOutputTypeAction()
  fullName: DulcisX.Nodes.ProjectNode.GetOutputTypeAction()
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetOutputTypeAction
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 127
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nReturns the Project output type for the current <xref href=\"DulcisX.Nodes.ProjectNode\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public __VSPROJOUTPUTTYPE GetOutputTypeAction()
    return:
      type: Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE
      description: An <xref href="Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE" data-throw-if-not-resolved="false"></xref> enumeration with the current value.
    content.vb: Public Function GetOutputTypeAction As __VSPROJOUTPUTTYPE
  overload: DulcisX.Nodes.ProjectNode.GetOutputTypeAction*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.ProjectNode.SetOutputTypeAction(Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE)
  commentId: M:DulcisX.Nodes.ProjectNode.SetOutputTypeAction(Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE)
  id: SetOutputTypeAction(Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE)
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: SetOutputTypeAction(__VSPROJOUTPUTTYPE)
  nameWithType: ProjectNode.SetOutputTypeAction(__VSPROJOUTPUTTYPE)
  fullName: DulcisX.Nodes.ProjectNode.SetOutputTypeAction(Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: SetOutputTypeAction
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 134
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nSets the current Project output type.\n"
  example: []
  syntax:
    content: public void SetOutputTypeAction(__VSPROJOUTPUTTYPE outputType)
    parameters:
    - id: outputType
      type: Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE
      description: The <xref href="Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE" data-throw-if-not-resolved="false"></xref> settings.
    content.vb: Public Sub SetOutputTypeAction(outputType As __VSPROJOUTPUTTYPE)
  overload: DulcisX.Nodes.ProjectNode.SetOutputTypeAction*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.ProjectNode.GetItemProperty(System.UInt32,DulcisX.Core.Enums.DocumentProperty)
  commentId: M:DulcisX.Nodes.ProjectNode.GetItemProperty(System.UInt32,DulcisX.Core.Enums.DocumentProperty)
  id: GetItemProperty(System.UInt32,DulcisX.Core.Enums.DocumentProperty)
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: GetItemProperty(UInt32, DocumentProperty)
  nameWithType: ProjectNode.GetItemProperty(UInt32, DocumentProperty)
  fullName: DulcisX.Nodes.ProjectNode.GetItemProperty(System.UInt32, DulcisX.Core.Enums.DocumentProperty)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetItemProperty
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 148
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nReturns the value of the given <xref href=\"DulcisX.Core.Enums.DocumentProperty\" data-throw-if-not-resolved=\"false\"></xref> on a <xref href=\"DulcisX.Nodes.ProjectItemNode\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string GetItemProperty(uint itemId, DocumentProperty documentProperty)
    parameters:
    - id: itemId
      type: System.UInt32
      description: The Unique Identifier of the <xref href="DulcisX.Nodes.ProjectItemNode" data-throw-if-not-resolved="false"></xref>.
    - id: documentProperty
      type: DulcisX.Core.Enums.DocumentProperty
      description: The property of which its value should be retrieved.
    return:
      type: System.String
      description: The value of the <xref href="DulcisX.Core.Enums.DocumentProperty" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function GetItemProperty(itemId As UInteger, documentProperty As DocumentProperty) As String
  overload: DulcisX.Nodes.ProjectNode.GetItemProperty*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.ProjectNode.SetItemProperty(System.UInt32,DulcisX.Core.Enums.DocumentProperty,System.String)
  commentId: M:DulcisX.Nodes.ProjectNode.SetItemProperty(System.UInt32,DulcisX.Core.Enums.DocumentProperty,System.String)
  id: SetItemProperty(System.UInt32,DulcisX.Core.Enums.DocumentProperty,System.String)
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: SetItemProperty(UInt32, DocumentProperty, String)
  nameWithType: ProjectNode.SetItemProperty(UInt32, DocumentProperty, String)
  fullName: DulcisX.Nodes.ProjectNode.SetItemProperty(System.UInt32, DulcisX.Core.Enums.DocumentProperty, System.String)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: SetItemProperty
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 165
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nSets the value of the given <xref href=\"DulcisX.Core.Enums.DocumentProperty\" data-throw-if-not-resolved=\"false\"></xref> on a <xref href=\"DulcisX.Nodes.ProjectItemNode\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void SetItemProperty(uint itemId, DocumentProperty documentProperty, string value)
    parameters:
    - id: itemId
      type: System.UInt32
      description: The Unique Identifier of the <xref href="DulcisX.Nodes.ProjectItemNode" data-throw-if-not-resolved="false"></xref>.
    - id: documentProperty
      type: DulcisX.Core.Enums.DocumentProperty
      description: The property of which its value should be retrieved.
    - id: value
      type: System.String
      description: The string value to which the specified <code data-dev-comment-type="paramref" class="paramref">documentProperty</code> should change to.
    content.vb: Public Sub SetItemProperty(itemId As UInteger, documentProperty As DocumentProperty, value As String)
  overload: DulcisX.Nodes.ProjectNode.SetItemProperty*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.ProjectNode.GetChildren
  commentId: M:DulcisX.Nodes.ProjectNode.GetChildren
  id: GetChildren
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: GetChildren()
  nameWithType: ProjectNode.GetChildren()
  fullName: DulcisX.Nodes.ProjectNode.GetChildren()
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetChildren
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 175
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public override IEnumerable<BaseNode> GetChildren()
    return:
      type: System.Collections.Generic.IEnumerable{DulcisX.Nodes.BaseNode}
    content.vb: Public Overrides Function GetChildren As IEnumerable(Of BaseNode)
  overridden: DulcisX.Nodes.SolutionItemNode.GetChildren
  overload: DulcisX.Nodes.ProjectNode.GetChildren*
  implements:
  - DulcisX.Nodes.IBaseNode.GetChildren
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: DulcisX.Nodes.ProjectNode.CreateDocument(System.String)
  commentId: M:DulcisX.Nodes.ProjectNode.CreateDocument(System.String)
  id: CreateDocument(System.String)
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: CreateDocument(String)
  nameWithType: ProjectNode.CreateDocument(String)
  fullName: DulcisX.Nodes.ProjectNode.CreateDocument(System.String)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: CreateDocument
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 192
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nCreates a new <xref href=\"DulcisX.Nodes.DocumentNode\" data-throw-if-not-resolved=\"false\"></xref> in the current <xref href=\"DulcisX.Nodes.ProjectNode\" data-throw-if-not-resolved=\"false\"></xref>-\n"
  example: []
  syntax:
    content: public VSADDRESULT CreateDocument(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of the new <xref href="DulcisX.Nodes.DocumentNode" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.VisualStudio.Shell.Interop.VSADDRESULT
      description: An <xref href="Microsoft.VisualStudio.Shell.Interop.VSADDRESULT" data-throw-if-not-resolved="false"></xref> enumeration which indicates if the operation succeeded.
    content.vb: Public Function CreateDocument(name As String) As VSADDRESULT
  overload: DulcisX.Nodes.ProjectNode.CreateDocument*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.ProjectNode.CreateDocument(DulcisX.Nodes.FolderNode,System.String)
  commentId: M:DulcisX.Nodes.ProjectNode.CreateDocument(DulcisX.Nodes.FolderNode,System.String)
  id: CreateDocument(DulcisX.Nodes.FolderNode,System.String)
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: CreateDocument(FolderNode, String)
  nameWithType: ProjectNode.CreateDocument(FolderNode, String)
  fullName: DulcisX.Nodes.ProjectNode.CreateDocument(DulcisX.Nodes.FolderNode, System.String)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: CreateDocument
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 201
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nCreates a new <xref href=\"DulcisX.Nodes.DocumentNode\" data-throw-if-not-resolved=\"false\"></xref> in the current <xref href=\"DulcisX.Nodes.ProjectNode\" data-throw-if-not-resolved=\"false\"></xref>-\n"
  example: []
  syntax:
    content: public VSADDRESULT CreateDocument(FolderNode parentNode, string name)
    parameters:
    - id: parentNode
      type: DulcisX.Nodes.FolderNode
      description: The <xref href="DulcisX.Nodes.FolderNode" data-throw-if-not-resolved="false"></xref> in which the new <xref href="DulcisX.Nodes.DocumentNode" data-throw-if-not-resolved="false"></xref> should be placed in.
    - id: name
      type: System.String
      description: The name of the new <xref href="DulcisX.Nodes.DocumentNode" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.VisualStudio.Shell.Interop.VSADDRESULT
      description: An <xref href="Microsoft.VisualStudio.Shell.Interop.VSADDRESULT" data-throw-if-not-resolved="false"></xref> enumeration which indicates if the operation succeeded.
    content.vb: Public Function CreateDocument(parentNode As FolderNode, name As String) As VSADDRESULT
  overload: DulcisX.Nodes.ProjectNode.CreateDocument*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.ProjectNode.AddExistingDocument(System.String)
  commentId: M:DulcisX.Nodes.ProjectNode.AddExistingDocument(System.String)
  id: AddExistingDocument(System.String)
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: AddExistingDocument(String)
  nameWithType: ProjectNode.AddExistingDocument(String)
  fullName: DulcisX.Nodes.ProjectNode.AddExistingDocument(System.String)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: AddExistingDocument
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 222
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nAdds a file which exists on disk to the current <xref href=\"DulcisX.Nodes.ProjectNode\" data-throw-if-not-resolved=\"false\"></xref>-\n"
  example: []
  syntax:
    content: public VSADDRESULT AddExistingDocument(string fullName)
    parameters:
    - id: fullName
      type: System.String
      description: The full name of the file on disk.
    return:
      type: Microsoft.VisualStudio.Shell.Interop.VSADDRESULT
      description: An <xref href="Microsoft.VisualStudio.Shell.Interop.VSADDRESULT" data-throw-if-not-resolved="false"></xref> enumeration which indicates if the operation succeeded.
    content.vb: Public Function AddExistingDocument(fullName As String) As VSADDRESULT
  overload: DulcisX.Nodes.ProjectNode.AddExistingDocument*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.ProjectNode.AddExistingDocument(DulcisX.Nodes.FolderNode,System.String)
  commentId: M:DulcisX.Nodes.ProjectNode.AddExistingDocument(DulcisX.Nodes.FolderNode,System.String)
  id: AddExistingDocument(DulcisX.Nodes.FolderNode,System.String)
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: AddExistingDocument(FolderNode, String)
  nameWithType: ProjectNode.AddExistingDocument(FolderNode, String)
  fullName: DulcisX.Nodes.ProjectNode.AddExistingDocument(DulcisX.Nodes.FolderNode, System.String)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: AddExistingDocument
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 231
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nAdds a file which exists on disk to the current <xref href=\"DulcisX.Nodes.ProjectNode\" data-throw-if-not-resolved=\"false\"></xref>-\n"
  example: []
  syntax:
    content: public VSADDRESULT AddExistingDocument(FolderNode parentNode, string fullName)
    parameters:
    - id: parentNode
      type: DulcisX.Nodes.FolderNode
      description: The <xref href="DulcisX.Nodes.FolderNode" data-throw-if-not-resolved="false"></xref> in which the file should be placed in.
    - id: fullName
      type: System.String
      description: The full name of the file on disk.
    return:
      type: Microsoft.VisualStudio.Shell.Interop.VSADDRESULT
      description: An <xref href="Microsoft.VisualStudio.Shell.Interop.VSADDRESULT" data-throw-if-not-resolved="false"></xref> enumeration which indicates if the operation succeeded.
    content.vb: Public Function AddExistingDocument(parentNode As FolderNode, fullName As String) As VSADDRESULT
  overload: DulcisX.Nodes.ProjectNode.AddExistingDocument*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.ProjectNode.ModifyAndWaitAsync(System.Action{DulcisX.Nodes.ModifyProjectDocument},System.Nullable{System.TimeSpan})
  commentId: M:DulcisX.Nodes.ProjectNode.ModifyAndWaitAsync(System.Action{DulcisX.Nodes.ModifyProjectDocument},System.Nullable{System.TimeSpan})
  id: ModifyAndWaitAsync(System.Action{DulcisX.Nodes.ModifyProjectDocument},System.Nullable{System.TimeSpan})
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: ModifyAndWaitAsync(Action<ModifyProjectDocument>, Nullable<TimeSpan>)
  nameWithType: ProjectNode.ModifyAndWaitAsync(Action<ModifyProjectDocument>, Nullable<TimeSpan>)
  fullName: DulcisX.Nodes.ProjectNode.ModifyAndWaitAsync(System.Action<DulcisX.Nodes.ModifyProjectDocument>, System.Nullable<System.TimeSpan>)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: ModifyAndWaitAsync
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 252
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  syntax:
    content: public ValueTask<bool> ModifyAndWaitAsync(Action<ModifyProjectDocument> modifier, TimeSpan? timeout = default(TimeSpan? ))
    parameters:
    - id: modifier
      type: System.Action{DulcisX.Nodes.ModifyProjectDocument}
    - id: timeout
      type: System.Nullable{System.TimeSpan}
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Public Function ModifyAndWaitAsync(modifier As Action(Of ModifyProjectDocument), timeout As TimeSpan? = Nothing) As ValueTask(Of Boolean)
  overload: DulcisX.Nodes.ProjectNode.ModifyAndWaitAsync*
  nameWithType.vb: ProjectNode.ModifyAndWaitAsync(Action(Of ModifyProjectDocument), Nullable(Of TimeSpan))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DulcisX.Nodes.ProjectNode.ModifyAndWaitAsync(System.Action(Of DulcisX.Nodes.ModifyProjectDocument), System.Nullable(Of System.TimeSpan))
  name.vb: ModifyAndWaitAsync(Action(Of ModifyProjectDocument), Nullable(Of TimeSpan))
- uid: DulcisX.Nodes.ProjectNode.Modify(System.Action{DulcisX.Nodes.ModifyProjectDocument})
  commentId: M:DulcisX.Nodes.ProjectNode.Modify(System.Action{DulcisX.Nodes.ModifyProjectDocument})
  id: Modify(System.Action{DulcisX.Nodes.ModifyProjectDocument})
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: Modify(Action<ModifyProjectDocument>)
  nameWithType: ProjectNode.Modify(Action<ModifyProjectDocument>)
  fullName: DulcisX.Nodes.ProjectNode.Modify(System.Action<DulcisX.Nodes.ModifyProjectDocument>)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: Modify
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 255
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  syntax:
    content: public void Modify(Action<ModifyProjectDocument> modifier)
    parameters:
    - id: modifier
      type: System.Action{DulcisX.Nodes.ModifyProjectDocument}
    content.vb: Public Sub Modify(modifier As Action(Of ModifyProjectDocument))
  overload: DulcisX.Nodes.ProjectNode.Modify*
  nameWithType.vb: ProjectNode.Modify(Action(Of ModifyProjectDocument))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DulcisX.Nodes.ProjectNode.Modify(System.Action(Of DulcisX.Nodes.ModifyProjectDocument))
  name.vb: Modify(Action(Of ModifyProjectDocument))
- uid: DulcisX.Nodes.ProjectNode.TryRemoveChildren(DulcisX.Nodes.ProjectItemNode,System.Int32@)
  commentId: M:DulcisX.Nodes.ProjectNode.TryRemoveChildren(DulcisX.Nodes.ProjectItemNode,System.Int32@)
  id: TryRemoveChildren(DulcisX.Nodes.ProjectItemNode,System.Int32@)
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: TryRemoveChildren(ProjectItemNode, out Int32)
  nameWithType: ProjectNode.TryRemoveChildren(ProjectItemNode, out Int32)
  fullName: DulcisX.Nodes.ProjectNode.TryRemoveChildren(DulcisX.Nodes.ProjectItemNode, out System.Int32)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: TryRemoveChildren
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 278
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nRemoves a <xref href=\"DulcisX.Nodes.ProjectItemNode\" data-throw-if-not-resolved=\"false\"></xref> from the current <xref href=\"DulcisX.Nodes.ProjectNode\" data-throw-if-not-resolved=\"false\"></xref> and removes it physically from the disk. A return value indicates whether the operation succeeded.\n"
  example: []
  syntax:
    content: public bool TryRemoveChildren(ProjectItemNode node, out int errorCode)
    parameters:
    - id: node
      type: DulcisX.Nodes.ProjectItemNode
      description: The <xref href="DulcisX.Nodes.ProjectItemNode" data-throw-if-not-resolved="false"></xref> which should be removed.
    - id: errorCode
      type: System.Int32
      description: The error code, if the operation did not succeed, otherwise 0.
    return:
      type: System.Boolean
      description: A return value indicates whether the operation succeeded.
    content.vb: Public Function TryRemoveChildren(node As ProjectItemNode, ByRef errorCode As Integer) As Boolean
  overload: DulcisX.Nodes.ProjectNode.TryRemoveChildren*
  nameWithType.vb: ProjectNode.TryRemoveChildren(ProjectItemNode, ByRef Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DulcisX.Nodes.ProjectNode.TryRemoveChildren(DulcisX.Nodes.ProjectItemNode, ByRef System.Int32)
  name.vb: TryRemoveChildren(ProjectItemNode, ByRef Int32)
- uid: DulcisX.Nodes.ProjectNode.TryGetPhysicalNode``1(System.String,``0@)
  commentId: M:DulcisX.Nodes.ProjectNode.TryGetPhysicalNode``1(System.String,``0@)
  id: TryGetPhysicalNode``1(System.String,``0@)
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: TryGetPhysicalNode<TNode>(String, out TNode)
  nameWithType: ProjectNode.TryGetPhysicalNode<TNode>(String, out TNode)
  fullName: DulcisX.Nodes.ProjectNode.TryGetPhysicalNode<TNode>(System.String, out TNode)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: TryGetPhysicalNode
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 296
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nRemoves a <xref href=\"DulcisX.Nodes.ProjectItemNode\" data-throw-if-not-resolved=\"false\"></xref> from the current <xref href=\"DulcisX.Nodes.ProjectNode\" data-throw-if-not-resolved=\"false\"></xref> and removes it physically from the disk. A return value indicates whether the operation succeeded.\n"
  example: []
  syntax:
    content: >-
      public bool TryGetPhysicalNode<TNode>(string fullName, out TNode node)

          where TNode : class, IPhysicalProjectItemNode
    parameters:
    - id: fullName
      type: System.String
      description: A string containg the full name aka. the document moniker.
    - id: node
      type: '{TNode}'
      description: The <xref href="DulcisX.Nodes.IPhysicalNode" data-throw-if-not-resolved="false"></xref> with the given <code data-dev-comment-type="paramref" class="paramref">fullName</code>.
    typeParameters:
    - id: TNode
      description: The physical node which represents the <code data-dev-comment-type="paramref" class="paramref">fullName</code>.
    return:
      type: System.Boolean
      description: A return value indicates whether the operation succeeded.
    content.vb: Public Function TryGetPhysicalNode(Of TNode As {Class, IPhysicalProjectItemNode})(fullName As String, ByRef node As TNode) As Boolean
  overload: DulcisX.Nodes.ProjectNode.TryGetPhysicalNode*
  nameWithType.vb: ProjectNode.TryGetPhysicalNode(Of TNode)(String, ByRef TNode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DulcisX.Nodes.ProjectNode.TryGetPhysicalNode(Of TNode)(System.String, ByRef TNode)
  name.vb: TryGetPhysicalNode(Of TNode)(String, ByRef TNode)
- uid: DulcisX.Nodes.ProjectNode.ContainsPhysicalNode(System.String)
  commentId: M:DulcisX.Nodes.ProjectNode.ContainsPhysicalNode(System.String)
  id: ContainsPhysicalNode(System.String)
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: ContainsPhysicalNode(String)
  nameWithType: ProjectNode.ContainsPhysicalNode(String)
  fullName: DulcisX.Nodes.ProjectNode.ContainsPhysicalNode(System.String)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: ContainsPhysicalNode
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 317
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  syntax:
    content: public bool ContainsPhysicalNode(string fullName)
    parameters:
    - id: fullName
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function ContainsPhysicalNode(fullName As String) As Boolean
  overload: DulcisX.Nodes.ProjectNode.ContainsPhysicalNode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.ProjectNode.GetRelativePath(DulcisX.Nodes.IPhysicalProjectItemNode)
  commentId: M:DulcisX.Nodes.ProjectNode.GetRelativePath(DulcisX.Nodes.IPhysicalProjectItemNode)
  id: GetRelativePath(DulcisX.Nodes.IPhysicalProjectItemNode)
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: GetRelativePath(IPhysicalProjectItemNode)
  nameWithType: ProjectNode.GetRelativePath(IPhysicalProjectItemNode)
  fullName: DulcisX.Nodes.ProjectNode.GetRelativePath(DulcisX.Nodes.IPhysicalProjectItemNode)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetRelativePath
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 330
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  syntax:
    content: public string GetRelativePath(IPhysicalProjectItemNode node)
    parameters:
    - id: node
      type: DulcisX.Nodes.IPhysicalProjectItemNode
    return:
      type: System.String
    content.vb: Public Function GetRelativePath(node As IPhysicalProjectItemNode) As String
  overload: DulcisX.Nodes.ProjectNode.GetRelativePath*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.ProjectNode.SaveAllChildren(System.Boolean)
  commentId: M:DulcisX.Nodes.ProjectNode.SaveAllChildren(System.Boolean)
  id: SaveAllChildren(System.Boolean)
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: SaveAllChildren(Boolean)
  nameWithType: ProjectNode.SaveAllChildren(Boolean)
  fullName: DulcisX.Nodes.ProjectNode.SaveAllChildren(System.Boolean)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: SaveAllChildren
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 366
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nSaves the project file and all children within the current <xref href=\"DulcisX.Nodes.ProjectNode\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void SaveAllChildren(bool forceSave = false)
    parameters:
    - id: forceSave
      type: System.Boolean
      description: Determines whether to force the file save operation or not.
    content.vb: Public Sub SaveAllChildren(forceSave As Boolean = False)
  overload: DulcisX.Nodes.ProjectNode.SaveAllChildren*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.ProjectNode.MoveNodeInsideProject(DulcisX.Nodes.FolderNode,DulcisX.Nodes.DocumentNode)
  commentId: M:DulcisX.Nodes.ProjectNode.MoveNodeInsideProject(DulcisX.Nodes.FolderNode,DulcisX.Nodes.DocumentNode)
  id: MoveNodeInsideProject(DulcisX.Nodes.FolderNode,DulcisX.Nodes.DocumentNode)
  parent: DulcisX.Nodes.ProjectNode
  langs:
  - csharp
  - vb
  name: MoveNodeInsideProject(FolderNode, DocumentNode)
  nameWithType: ProjectNode.MoveNodeInsideProject(FolderNode, DocumentNode)
  fullName: DulcisX.Nodes.ProjectNode.MoveNodeInsideProject(DulcisX.Nodes.FolderNode, DulcisX.Nodes.DocumentNode)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/ProjectNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: MoveNodeInsideProject
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/ProjectNode.cs
    startLine: 375
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  syntax:
    content: public DocumentNode MoveNodeInsideProject(FolderNode destination, DocumentNode node)
    parameters:
    - id: destination
      type: DulcisX.Nodes.FolderNode
    - id: node
      type: DulcisX.Nodes.DocumentNode
    return:
      type: DulcisX.Nodes.DocumentNode
    content.vb: Public Function MoveNodeInsideProject(destination As FolderNode, node As DocumentNode) As DocumentNode
  overload: DulcisX.Nodes.ProjectNode.MoveNodeInsideProject*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: DulcisX.Nodes.SolutionNode
  commentId: T:DulcisX.Nodes.SolutionNode
  parent: DulcisX.Nodes
  name: SolutionNode
  nameWithType: SolutionNode
  fullName: DulcisX.Nodes.SolutionNode
- uid: DulcisX.Nodes
  commentId: N:DulcisX.Nodes
  name: DulcisX.Nodes
  nameWithType: DulcisX.Nodes
  fullName: DulcisX.Nodes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: DulcisX.Nodes.BaseNode
  commentId: T:DulcisX.Nodes.BaseNode
  parent: DulcisX.Nodes
  name: BaseNode
  nameWithType: BaseNode
  fullName: DulcisX.Nodes.BaseNode
- uid: DulcisX.Nodes.SolutionItemNode
  commentId: T:DulcisX.Nodes.SolutionItemNode
  parent: DulcisX.Nodes
  name: SolutionItemNode
  nameWithType: SolutionItemNode
  fullName: DulcisX.Nodes.SolutionItemNode
- uid: DulcisX.Nodes.IPhysicalNode
  commentId: T:DulcisX.Nodes.IPhysicalNode
  parent: DulcisX.Nodes
  name: IPhysicalNode
  nameWithType: IPhysicalNode
  fullName: DulcisX.Nodes.IPhysicalNode
- uid: DulcisX.Nodes.INamedNode
  commentId: T:DulcisX.Nodes.INamedNode
  parent: DulcisX.Nodes
  name: INamedNode
  nameWithType: INamedNode
  fullName: DulcisX.Nodes.INamedNode
- uid: DulcisX.Nodes.IBaseNode
  commentId: T:DulcisX.Nodes.IBaseNode
  parent: DulcisX.Nodes
  name: IBaseNode
  nameWithType: IBaseNode
  fullName: DulcisX.Nodes.IBaseNode
- uid: System.IEquatable{DulcisX.Nodes.IBaseNode}
  commentId: T:System.IEquatable{DulcisX.Nodes.IBaseNode}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<IBaseNode>
  nameWithType: IEquatable<IBaseNode>
  fullName: System.IEquatable<DulcisX.Nodes.IBaseNode>
  nameWithType.vb: IEquatable(Of IBaseNode)
  fullName.vb: System.IEquatable(Of DulcisX.Nodes.IBaseNode)
  name.vb: IEquatable(Of IBaseNode)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DulcisX.Nodes.IBaseNode
    name: IBaseNode
    nameWithType: IBaseNode
    fullName: DulcisX.Nodes.IBaseNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DulcisX.Nodes.IBaseNode
    name: IBaseNode
    nameWithType: IBaseNode
    fullName: DulcisX.Nodes.IBaseNode
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.SolutionItemNode.GetParent
  commentId: M:DulcisX.Nodes.SolutionItemNode.GetParent
  parent: DulcisX.Nodes.SolutionItemNode
  name: GetParent()
  nameWithType: SolutionItemNode.GetParent()
  fullName: DulcisX.Nodes.SolutionItemNode.GetParent()
  spec.csharp:
  - uid: DulcisX.Nodes.SolutionItemNode.GetParent
    name: GetParent
    nameWithType: SolutionItemNode.GetParent
    fullName: DulcisX.Nodes.SolutionItemNode.GetParent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.SolutionItemNode.GetParent
    name: GetParent
    nameWithType: SolutionItemNode.GetParent
    fullName: DulcisX.Nodes.SolutionItemNode.GetParent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.SolutionItemNode.GetAllChildrenAsync(System.Threading.CancellationToken)
  commentId: M:DulcisX.Nodes.SolutionItemNode.GetAllChildrenAsync(System.Threading.CancellationToken)
  parent: DulcisX.Nodes.SolutionItemNode
  isExternal: true
  name: GetAllChildrenAsync(CancellationToken)
  nameWithType: SolutionItemNode.GetAllChildrenAsync(CancellationToken)
  fullName: DulcisX.Nodes.SolutionItemNode.GetAllChildrenAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: DulcisX.Nodes.SolutionItemNode.GetAllChildrenAsync(System.Threading.CancellationToken)
    name: GetAllChildrenAsync
    nameWithType: SolutionItemNode.GetAllChildrenAsync
    fullName: DulcisX.Nodes.SolutionItemNode.GetAllChildrenAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.SolutionItemNode.GetAllChildrenAsync(System.Threading.CancellationToken)
    name: GetAllChildrenAsync
    nameWithType: SolutionItemNode.GetAllChildrenAsync
    fullName: DulcisX.Nodes.SolutionItemNode.GetAllChildrenAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.SolutionItemNode.GetAllChildrenAsync(System.Predicate{DulcisX.Nodes.BaseNode},System.Threading.CancellationToken)
  commentId: M:DulcisX.Nodes.SolutionItemNode.GetAllChildrenAsync(System.Predicate{DulcisX.Nodes.BaseNode},System.Threading.CancellationToken)
  parent: DulcisX.Nodes.SolutionItemNode
  isExternal: true
  name: GetAllChildrenAsync(Predicate<BaseNode>, CancellationToken)
  nameWithType: SolutionItemNode.GetAllChildrenAsync(Predicate<BaseNode>, CancellationToken)
  fullName: DulcisX.Nodes.SolutionItemNode.GetAllChildrenAsync(System.Predicate<DulcisX.Nodes.BaseNode>, System.Threading.CancellationToken)
  nameWithType.vb: SolutionItemNode.GetAllChildrenAsync(Predicate(Of BaseNode), CancellationToken)
  fullName.vb: DulcisX.Nodes.SolutionItemNode.GetAllChildrenAsync(System.Predicate(Of DulcisX.Nodes.BaseNode), System.Threading.CancellationToken)
  name.vb: GetAllChildrenAsync(Predicate(Of BaseNode), CancellationToken)
  spec.csharp:
  - uid: DulcisX.Nodes.SolutionItemNode.GetAllChildrenAsync(System.Predicate{DulcisX.Nodes.BaseNode},System.Threading.CancellationToken)
    name: GetAllChildrenAsync
    nameWithType: SolutionItemNode.GetAllChildrenAsync
    fullName: DulcisX.Nodes.SolutionItemNode.GetAllChildrenAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DulcisX.Nodes.BaseNode
    name: BaseNode
    nameWithType: BaseNode
    fullName: DulcisX.Nodes.BaseNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.SolutionItemNode.GetAllChildrenAsync(System.Predicate{DulcisX.Nodes.BaseNode},System.Threading.CancellationToken)
    name: GetAllChildrenAsync
    nameWithType: SolutionItemNode.GetAllChildrenAsync
    fullName: DulcisX.Nodes.SolutionItemNode.GetAllChildrenAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DulcisX.Nodes.BaseNode
    name: BaseNode
    nameWithType: BaseNode
    fullName: DulcisX.Nodes.BaseNode
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.BaseNode.ParentSolution
  commentId: P:DulcisX.Nodes.BaseNode.ParentSolution
  parent: DulcisX.Nodes.BaseNode
  name: ParentSolution
  nameWithType: BaseNode.ParentSolution
  fullName: DulcisX.Nodes.BaseNode.ParentSolution
- uid: DulcisX.Nodes.BaseNode.UnderlyingHierarchy
  commentId: P:DulcisX.Nodes.BaseNode.UnderlyingHierarchy
  parent: DulcisX.Nodes.BaseNode
  name: UnderlyingHierarchy
  nameWithType: BaseNode.UnderlyingHierarchy
  fullName: DulcisX.Nodes.BaseNode.UnderlyingHierarchy
- uid: DulcisX.Nodes.BaseNode.ItemId
  commentId: P:DulcisX.Nodes.BaseNode.ItemId
  parent: DulcisX.Nodes.BaseNode
  name: ItemId
  nameWithType: BaseNode.ItemId
  fullName: DulcisX.Nodes.BaseNode.ItemId
- uid: DulcisX.Nodes.BaseNode.GetDisplayName
  commentId: M:DulcisX.Nodes.BaseNode.GetDisplayName
  parent: DulcisX.Nodes.BaseNode
  name: GetDisplayName()
  nameWithType: BaseNode.GetDisplayName()
  fullName: DulcisX.Nodes.BaseNode.GetDisplayName()
  spec.csharp:
  - uid: DulcisX.Nodes.BaseNode.GetDisplayName
    name: GetDisplayName
    nameWithType: BaseNode.GetDisplayName
    fullName: DulcisX.Nodes.BaseNode.GetDisplayName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.BaseNode.GetDisplayName
    name: GetDisplayName
    nameWithType: BaseNode.GetDisplayName
    fullName: DulcisX.Nodes.BaseNode.GetDisplayName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.BaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  commentId: M:DulcisX.Nodes.BaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  parent: DulcisX.Nodes.BaseNode
  name: GetParent(NodeTypes)
  nameWithType: BaseNode.GetParent(NodeTypes)
  fullName: DulcisX.Nodes.BaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  spec.csharp:
  - uid: DulcisX.Nodes.BaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
    name: GetParent
    nameWithType: BaseNode.GetParent
    fullName: DulcisX.Nodes.BaseNode.GetParent
  - name: (
    nameWithType: (
    fullName: (
  - uid: DulcisX.Core.Enums.NodeTypes
    name: NodeTypes
    nameWithType: NodeTypes
    fullName: DulcisX.Core.Enums.NodeTypes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.BaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
    name: GetParent
    nameWithType: BaseNode.GetParent
    fullName: DulcisX.Nodes.BaseNode.GetParent
  - name: (
    nameWithType: (
    fullName: (
  - uid: DulcisX.Core.Enums.NodeTypes
    name: NodeTypes
    nameWithType: NodeTypes
    fullName: DulcisX.Core.Enums.NodeTypes
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.BaseNode.AsHierarchyItem
  commentId: M:DulcisX.Nodes.BaseNode.AsHierarchyItem
  parent: DulcisX.Nodes.BaseNode
  name: AsHierarchyItem()
  nameWithType: BaseNode.AsHierarchyItem()
  fullName: DulcisX.Nodes.BaseNode.AsHierarchyItem()
  spec.csharp:
  - uid: DulcisX.Nodes.BaseNode.AsHierarchyItem
    name: AsHierarchyItem
    nameWithType: BaseNode.AsHierarchyItem
    fullName: DulcisX.Nodes.BaseNode.AsHierarchyItem
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.BaseNode.AsHierarchyItem
    name: AsHierarchyItem
    nameWithType: BaseNode.AsHierarchyItem
    fullName: DulcisX.Nodes.BaseNode.AsHierarchyItem
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.BaseNode.Equals(DulcisX.Nodes.IBaseNode)
  commentId: M:DulcisX.Nodes.BaseNode.Equals(DulcisX.Nodes.IBaseNode)
  parent: DulcisX.Nodes.BaseNode
  name: Equals(IBaseNode)
  nameWithType: BaseNode.Equals(IBaseNode)
  fullName: DulcisX.Nodes.BaseNode.Equals(DulcisX.Nodes.IBaseNode)
  spec.csharp:
  - uid: DulcisX.Nodes.BaseNode.Equals(DulcisX.Nodes.IBaseNode)
    name: Equals
    nameWithType: BaseNode.Equals
    fullName: DulcisX.Nodes.BaseNode.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: DulcisX.Nodes.IBaseNode
    name: IBaseNode
    nameWithType: IBaseNode
    fullName: DulcisX.Nodes.IBaseNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.BaseNode.Equals(DulcisX.Nodes.IBaseNode)
    name: Equals
    nameWithType: BaseNode.Equals
    fullName: DulcisX.Nodes.BaseNode.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: DulcisX.Nodes.IBaseNode
    name: IBaseNode
    nameWithType: IBaseNode
    fullName: DulcisX.Nodes.IBaseNode
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.BaseNode.Equals(System.Object)
  commentId: M:DulcisX.Nodes.BaseNode.Equals(System.Object)
  parent: DulcisX.Nodes.BaseNode
  isExternal: true
  name: Equals(Object)
  nameWithType: BaseNode.Equals(Object)
  fullName: DulcisX.Nodes.BaseNode.Equals(System.Object)
  spec.csharp:
  - uid: DulcisX.Nodes.BaseNode.Equals(System.Object)
    name: Equals
    nameWithType: BaseNode.Equals
    fullName: DulcisX.Nodes.BaseNode.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.BaseNode.Equals(System.Object)
    name: Equals
    nameWithType: BaseNode.Equals
    fullName: DulcisX.Nodes.BaseNode.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.BaseNode.GetHashCode
  commentId: M:DulcisX.Nodes.BaseNode.GetHashCode
  parent: DulcisX.Nodes.BaseNode
  name: GetHashCode()
  nameWithType: BaseNode.GetHashCode()
  fullName: DulcisX.Nodes.BaseNode.GetHashCode()
  spec.csharp:
  - uid: DulcisX.Nodes.BaseNode.GetHashCode
    name: GetHashCode
    nameWithType: BaseNode.GetHashCode
    fullName: DulcisX.Nodes.BaseNode.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.BaseNode.GetHashCode
    name: GetHashCode
    nameWithType: BaseNode.GetHashCode
    fullName: DulcisX.Nodes.BaseNode.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.VisualStudio.Shell.Interop.IVsBuildPropertyStorage
  commentId: T:Microsoft.VisualStudio.Shell.Interop.IVsBuildPropertyStorage
  parent: Microsoft.VisualStudio.Shell.Interop
  isExternal: true
  name: IVsBuildPropertyStorage
  nameWithType: IVsBuildPropertyStorage
  fullName: Microsoft.VisualStudio.Shell.Interop.IVsBuildPropertyStorage
- uid: DulcisX.Nodes.ProjectNode.VsBuildPropertyStorage*
  commentId: Overload:DulcisX.Nodes.ProjectNode.VsBuildPropertyStorage
  name: VsBuildPropertyStorage
  nameWithType: ProjectNode.VsBuildPropertyStorage
  fullName: DulcisX.Nodes.ProjectNode.VsBuildPropertyStorage
- uid: Microsoft.VisualStudio.Shell.Interop
  commentId: N:Microsoft.VisualStudio.Shell.Interop
  isExternal: true
  name: Microsoft.VisualStudio.Shell.Interop
  nameWithType: Microsoft.VisualStudio.Shell.Interop
  fullName: Microsoft.VisualStudio.Shell.Interop
- uid: Microsoft.VisualStudio.Shell.Interop.IVsProject
  commentId: T:Microsoft.VisualStudio.Shell.Interop.IVsProject
  parent: Microsoft.VisualStudio.Shell.Interop
  isExternal: true
  name: IVsProject
  nameWithType: IVsProject
  fullName: Microsoft.VisualStudio.Shell.Interop.IVsProject
- uid: DulcisX.Nodes.ProjectNode
  commentId: T:DulcisX.Nodes.ProjectNode
  parent: DulcisX.Nodes
  name: ProjectNode
  nameWithType: ProjectNode
  fullName: DulcisX.Nodes.ProjectNode
- uid: DulcisX.Nodes.ProjectNode.UnderlyingProject*
  commentId: Overload:DulcisX.Nodes.ProjectNode.UnderlyingProject
  name: UnderlyingProject
  nameWithType: ProjectNode.UnderlyingProject
  fullName: DulcisX.Nodes.ProjectNode.UnderlyingProject
- uid: DulcisX.Nodes.ProjectNode.ProjectNodeType*
  commentId: Overload:DulcisX.Nodes.ProjectNode.ProjectNodeType
  name: ProjectNodeType
  nameWithType: ProjectNode.ProjectNodeType
  fullName: DulcisX.Nodes.ProjectNode.ProjectNodeType
- uid: DulcisX.Core.Enums.ProjectNodeType
  commentId: T:DulcisX.Core.Enums.ProjectNodeType
  parent: DulcisX.Core.Enums
  name: ProjectNodeType
  nameWithType: ProjectNodeType
  fullName: DulcisX.Core.Enums.ProjectNodeType
- uid: DulcisX.Core.Enums
  commentId: N:DulcisX.Core.Enums
  name: DulcisX.Core.Enums
  nameWithType: DulcisX.Core.Enums
  fullName: DulcisX.Core.Enums
- uid: DulcisX.Nodes.ProjectNode.#ctor*
  commentId: Overload:DulcisX.Nodes.ProjectNode.#ctor
  name: ProjectNode
  nameWithType: ProjectNode.ProjectNode
  fullName: DulcisX.Nodes.ProjectNode.ProjectNode
- uid: Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
  commentId: T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
  parent: Microsoft.VisualStudio.Shell.Interop
  isExternal: true
  name: IVsHierarchy
  nameWithType: IVsHierarchy
  fullName: Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
- uid: DulcisX.Nodes.ProjectNode.GetGuid*
  commentId: Overload:DulcisX.Nodes.ProjectNode.GetGuid
  name: GetGuid
  nameWithType: ProjectNode.GetGuid
  fullName: DulcisX.Nodes.ProjectNode.GetGuid
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: DulcisX.Nodes.ProjectNode.GetFileName*
  commentId: Overload:DulcisX.Nodes.ProjectNode.GetFileName
  name: GetFileName
  nameWithType: ProjectNode.GetFileName
  fullName: DulcisX.Nodes.ProjectNode.GetFileName
- uid: DulcisX.Nodes.IPhysicalNode.GetFileName
  commentId: M:DulcisX.Nodes.IPhysicalNode.GetFileName
  parent: DulcisX.Nodes.IPhysicalNode
  name: GetFileName()
  nameWithType: IPhysicalNode.GetFileName()
  fullName: DulcisX.Nodes.IPhysicalNode.GetFileName()
  spec.csharp:
  - uid: DulcisX.Nodes.IPhysicalNode.GetFileName
    name: GetFileName
    nameWithType: IPhysicalNode.GetFileName
    fullName: DulcisX.Nodes.IPhysicalNode.GetFileName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.IPhysicalNode.GetFileName
    name: GetFileName
    nameWithType: IPhysicalNode.GetFileName
    fullName: DulcisX.Nodes.IPhysicalNode.GetFileName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DulcisX.Nodes.ProjectNode.GetFullName*
  commentId: Overload:DulcisX.Nodes.ProjectNode.GetFullName
  name: GetFullName
  nameWithType: ProjectNode.GetFullName
  fullName: DulcisX.Nodes.ProjectNode.GetFullName
- uid: DulcisX.Nodes.IPhysicalNode.GetFullName
  commentId: M:DulcisX.Nodes.IPhysicalNode.GetFullName
  parent: DulcisX.Nodes.IPhysicalNode
  name: GetFullName()
  nameWithType: IPhysicalNode.GetFullName()
  fullName: DulcisX.Nodes.IPhysicalNode.GetFullName()
  spec.csharp:
  - uid: DulcisX.Nodes.IPhysicalNode.GetFullName
    name: GetFullName
    nameWithType: IPhysicalNode.GetFullName
    fullName: DulcisX.Nodes.IPhysicalNode.GetFullName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.IPhysicalNode.GetFullName
    name: GetFullName
    nameWithType: IPhysicalNode.GetFullName
    fullName: DulcisX.Nodes.IPhysicalNode.GetFullName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.ProjectNode.GetDirectoryName*
  commentId: Overload:DulcisX.Nodes.ProjectNode.GetDirectoryName
  name: GetDirectoryName
  nameWithType: ProjectNode.GetDirectoryName
  fullName: DulcisX.Nodes.ProjectNode.GetDirectoryName
- uid: DulcisX.Nodes.IPhysicalNode.GetDirectoryName
  commentId: M:DulcisX.Nodes.IPhysicalNode.GetDirectoryName
  parent: DulcisX.Nodes.IPhysicalNode
  name: GetDirectoryName()
  nameWithType: IPhysicalNode.GetDirectoryName()
  fullName: DulcisX.Nodes.IPhysicalNode.GetDirectoryName()
  spec.csharp:
  - uid: DulcisX.Nodes.IPhysicalNode.GetDirectoryName
    name: GetDirectoryName
    nameWithType: IPhysicalNode.GetDirectoryName
    fullName: DulcisX.Nodes.IPhysicalNode.GetDirectoryName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.IPhysicalNode.GetDirectoryName
    name: GetDirectoryName
    nameWithType: IPhysicalNode.GetDirectoryName
    fullName: DulcisX.Nodes.IPhysicalNode.GetDirectoryName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.ProjectNode.IsLoaded*
  commentId: Overload:DulcisX.Nodes.ProjectNode.IsLoaded
  name: IsLoaded
  nameWithType: ProjectNode.IsLoaded
  fullName: DulcisX.Nodes.ProjectNode.IsLoaded
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE
  commentId: T:Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE
  parent: Microsoft.VisualStudio.Shell.Interop
  isExternal: true
  name: __VSPROJOUTPUTTYPE
  nameWithType: __VSPROJOUTPUTTYPE
  fullName: Microsoft.VisualStudio.Shell.Interop.__VSPROJOUTPUTTYPE
- uid: DulcisX.Nodes.ProjectNode.GetOutputTypeAction*
  commentId: Overload:DulcisX.Nodes.ProjectNode.GetOutputTypeAction
  name: GetOutputTypeAction
  nameWithType: ProjectNode.GetOutputTypeAction
  fullName: DulcisX.Nodes.ProjectNode.GetOutputTypeAction
- uid: DulcisX.Nodes.ProjectNode.SetOutputTypeAction*
  commentId: Overload:DulcisX.Nodes.ProjectNode.SetOutputTypeAction
  name: SetOutputTypeAction
  nameWithType: ProjectNode.SetOutputTypeAction
  fullName: DulcisX.Nodes.ProjectNode.SetOutputTypeAction
- uid: DulcisX.Core.Enums.DocumentProperty
  commentId: T:DulcisX.Core.Enums.DocumentProperty
  parent: DulcisX.Core.Enums
  name: DocumentProperty
  nameWithType: DocumentProperty
  fullName: DulcisX.Core.Enums.DocumentProperty
- uid: DulcisX.Nodes.ProjectItemNode
  commentId: T:DulcisX.Nodes.ProjectItemNode
  parent: DulcisX.Nodes
  name: ProjectItemNode
  nameWithType: ProjectItemNode
  fullName: DulcisX.Nodes.ProjectItemNode
- uid: DulcisX.Nodes.ProjectNode.GetItemProperty*
  commentId: Overload:DulcisX.Nodes.ProjectNode.GetItemProperty
  name: GetItemProperty
  nameWithType: ProjectNode.GetItemProperty
  fullName: DulcisX.Nodes.ProjectNode.GetItemProperty
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: DulcisX.Nodes.ProjectNode.SetItemProperty*
  commentId: Overload:DulcisX.Nodes.ProjectNode.SetItemProperty
  name: SetItemProperty
  nameWithType: ProjectNode.SetItemProperty
  fullName: DulcisX.Nodes.ProjectNode.SetItemProperty
- uid: DulcisX.Nodes.SolutionItemNode.GetChildren
  commentId: M:DulcisX.Nodes.SolutionItemNode.GetChildren
  parent: DulcisX.Nodes.SolutionItemNode
  name: GetChildren()
  nameWithType: SolutionItemNode.GetChildren()
  fullName: DulcisX.Nodes.SolutionItemNode.GetChildren()
  spec.csharp:
  - uid: DulcisX.Nodes.SolutionItemNode.GetChildren
    name: GetChildren
    nameWithType: SolutionItemNode.GetChildren
    fullName: DulcisX.Nodes.SolutionItemNode.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.SolutionItemNode.GetChildren
    name: GetChildren
    nameWithType: SolutionItemNode.GetChildren
    fullName: DulcisX.Nodes.SolutionItemNode.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.ProjectNode.GetChildren*
  commentId: Overload:DulcisX.Nodes.ProjectNode.GetChildren
  name: GetChildren
  nameWithType: ProjectNode.GetChildren
  fullName: DulcisX.Nodes.ProjectNode.GetChildren
- uid: DulcisX.Nodes.IBaseNode.GetChildren
  commentId: M:DulcisX.Nodes.IBaseNode.GetChildren
  parent: DulcisX.Nodes.IBaseNode
  name: GetChildren()
  nameWithType: IBaseNode.GetChildren()
  fullName: DulcisX.Nodes.IBaseNode.GetChildren()
  spec.csharp:
  - uid: DulcisX.Nodes.IBaseNode.GetChildren
    name: GetChildren
    nameWithType: IBaseNode.GetChildren
    fullName: DulcisX.Nodes.IBaseNode.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.IBaseNode.GetChildren
    name: GetChildren
    nameWithType: IBaseNode.GetChildren
    fullName: DulcisX.Nodes.IBaseNode.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{DulcisX.Nodes.BaseNode}
  commentId: T:System.Collections.Generic.IEnumerable{DulcisX.Nodes.BaseNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<BaseNode>
  nameWithType: IEnumerable<BaseNode>
  fullName: System.Collections.Generic.IEnumerable<DulcisX.Nodes.BaseNode>
  nameWithType.vb: IEnumerable(Of BaseNode)
  fullName.vb: System.Collections.Generic.IEnumerable(Of DulcisX.Nodes.BaseNode)
  name.vb: IEnumerable(Of BaseNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DulcisX.Nodes.BaseNode
    name: BaseNode
    nameWithType: BaseNode
    fullName: DulcisX.Nodes.BaseNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DulcisX.Nodes.BaseNode
    name: BaseNode
    nameWithType: BaseNode
    fullName: DulcisX.Nodes.BaseNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: DulcisX.Nodes.DocumentNode
  commentId: T:DulcisX.Nodes.DocumentNode
  parent: DulcisX.Nodes
  name: DocumentNode
  nameWithType: DocumentNode
  fullName: DulcisX.Nodes.DocumentNode
- uid: Microsoft.VisualStudio.Shell.Interop.VSADDRESULT
  commentId: T:Microsoft.VisualStudio.Shell.Interop.VSADDRESULT
  parent: Microsoft.VisualStudio.Shell.Interop
  isExternal: true
  name: VSADDRESULT
  nameWithType: VSADDRESULT
  fullName: Microsoft.VisualStudio.Shell.Interop.VSADDRESULT
- uid: DulcisX.Nodes.ProjectNode.CreateDocument*
  commentId: Overload:DulcisX.Nodes.ProjectNode.CreateDocument
  name: CreateDocument
  nameWithType: ProjectNode.CreateDocument
  fullName: DulcisX.Nodes.ProjectNode.CreateDocument
- uid: DulcisX.Nodes.FolderNode
  commentId: T:DulcisX.Nodes.FolderNode
  parent: DulcisX.Nodes
  name: FolderNode
  nameWithType: FolderNode
  fullName: DulcisX.Nodes.FolderNode
- uid: DulcisX.Nodes.ProjectNode.AddExistingDocument*
  commentId: Overload:DulcisX.Nodes.ProjectNode.AddExistingDocument
  name: AddExistingDocument
  nameWithType: ProjectNode.AddExistingDocument
  fullName: DulcisX.Nodes.ProjectNode.AddExistingDocument
- uid: DulcisX.Nodes.ProjectNode.ModifyAndWaitAsync*
  commentId: Overload:DulcisX.Nodes.ProjectNode.ModifyAndWaitAsync
  name: ModifyAndWaitAsync
  nameWithType: ProjectNode.ModifyAndWaitAsync
  fullName: DulcisX.Nodes.ProjectNode.ModifyAndWaitAsync
- uid: System.Action{DulcisX.Nodes.ModifyProjectDocument}
  commentId: T:System.Action{DulcisX.Nodes.ModifyProjectDocument}
  parent: System
  definition: System.Action`1
  name: Action<ModifyProjectDocument>
  nameWithType: Action<ModifyProjectDocument>
  fullName: System.Action<DulcisX.Nodes.ModifyProjectDocument>
  nameWithType.vb: Action(Of ModifyProjectDocument)
  fullName.vb: System.Action(Of DulcisX.Nodes.ModifyProjectDocument)
  name.vb: Action(Of ModifyProjectDocument)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DulcisX.Nodes.ModifyProjectDocument
    name: ModifyProjectDocument
    nameWithType: ModifyProjectDocument
    fullName: DulcisX.Nodes.ModifyProjectDocument
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DulcisX.Nodes.ModifyProjectDocument
    name: ModifyProjectDocument
    nameWithType: ModifyProjectDocument
    fullName: DulcisX.Nodes.ModifyProjectDocument
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullName.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.ValueTask{System.Boolean}
  commentId: T:System.Threading.Tasks.ValueTask{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.ValueTask`1
  name: ValueTask<Boolean>
  nameWithType: ValueTask<Boolean>
  fullName: System.Threading.Tasks.ValueTask<System.Boolean>
  nameWithType.vb: ValueTask(Of Boolean)
  fullName.vb: System.Threading.Tasks.ValueTask(Of System.Boolean)
  name.vb: ValueTask(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.ValueTask`1
  commentId: T:System.Threading.Tasks.ValueTask`1
  isExternal: true
  name: ValueTask<TResult>
  nameWithType: ValueTask<TResult>
  fullName: System.Threading.Tasks.ValueTask<TResult>
  nameWithType.vb: ValueTask(Of TResult)
  fullName.vb: System.Threading.Tasks.ValueTask(Of TResult)
  name.vb: ValueTask(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: DulcisX.Nodes.ProjectNode.Modify*
  commentId: Overload:DulcisX.Nodes.ProjectNode.Modify
  name: Modify
  nameWithType: ProjectNode.Modify
  fullName: DulcisX.Nodes.ProjectNode.Modify
- uid: DulcisX.Nodes.ProjectNode.TryRemoveChildren*
  commentId: Overload:DulcisX.Nodes.ProjectNode.TryRemoveChildren
  name: TryRemoveChildren
  nameWithType: ProjectNode.TryRemoveChildren
  fullName: DulcisX.Nodes.ProjectNode.TryRemoveChildren
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: DulcisX.Nodes.ProjectNode.TryGetPhysicalNode*
  commentId: Overload:DulcisX.Nodes.ProjectNode.TryGetPhysicalNode
  name: TryGetPhysicalNode
  nameWithType: ProjectNode.TryGetPhysicalNode
  fullName: DulcisX.Nodes.ProjectNode.TryGetPhysicalNode
- uid: '{TNode}'
  commentId: '!:TNode'
  definition: TNode
  name: TNode
  nameWithType: TNode
  fullName: TNode
- uid: TNode
  name: TNode
  nameWithType: TNode
  fullName: TNode
- uid: DulcisX.Nodes.ProjectNode.ContainsPhysicalNode*
  commentId: Overload:DulcisX.Nodes.ProjectNode.ContainsPhysicalNode
  name: ContainsPhysicalNode
  nameWithType: ProjectNode.ContainsPhysicalNode
  fullName: DulcisX.Nodes.ProjectNode.ContainsPhysicalNode
- uid: DulcisX.Nodes.ProjectNode.GetRelativePath*
  commentId: Overload:DulcisX.Nodes.ProjectNode.GetRelativePath
  name: GetRelativePath
  nameWithType: ProjectNode.GetRelativePath
  fullName: DulcisX.Nodes.ProjectNode.GetRelativePath
- uid: DulcisX.Nodes.IPhysicalProjectItemNode
  commentId: T:DulcisX.Nodes.IPhysicalProjectItemNode
  parent: DulcisX.Nodes
  name: IPhysicalProjectItemNode
  nameWithType: IPhysicalProjectItemNode
  fullName: DulcisX.Nodes.IPhysicalProjectItemNode
- uid: DulcisX.Nodes.ProjectNode.SaveAllChildren*
  commentId: Overload:DulcisX.Nodes.ProjectNode.SaveAllChildren
  name: SaveAllChildren
  nameWithType: ProjectNode.SaveAllChildren
  fullName: DulcisX.Nodes.ProjectNode.SaveAllChildren
- uid: DulcisX.Nodes.ProjectNode.MoveNodeInsideProject*
  commentId: Overload:DulcisX.Nodes.ProjectNode.MoveNodeInsideProject
  name: MoveNodeInsideProject
  nameWithType: ProjectNode.MoveNodeInsideProject
  fullName: DulcisX.Nodes.ProjectNode.MoveNodeInsideProject

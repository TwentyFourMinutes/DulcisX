### YamlMime:ManagedReference
items:
- uid: DulcisX.Nodes.FolderNode
  commentId: T:DulcisX.Nodes.FolderNode
  id: FolderNode
  parent: DulcisX.Nodes
  children:
  - DulcisX.Nodes.FolderNode.#ctor(DulcisX.Nodes.SolutionNode,DulcisX.Nodes.ProjectNode,System.UInt32)
  - DulcisX.Nodes.FolderNode.#ctor(DulcisX.Nodes.SolutionNode,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)
  - DulcisX.Nodes.FolderNode.GetFileName
  - DulcisX.Nodes.FolderNode.GetFullName
  - DulcisX.Nodes.FolderNode.NodeType
  langs:
  - csharp
  - vb
  name: FolderNode
  nameWithType: FolderNode
  fullName: DulcisX.Nodes.FolderNode
  type: Class
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/FolderNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: FolderNode
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/FolderNode.cs
    startLine: 11
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nRepresents a folder within a <xref href=\"DulcisX.Nodes.ProjectNode\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class FolderNode : ProjectItemNode, IPhysicalNode, INamedNode, IBaseNode'
    content.vb: >-
      Public Class FolderNode

          Inherits ProjectItemNode

          Implements IPhysicalNode, INamedNode, IBaseNode
  inheritance:
  - System.Object
  - DulcisX.Nodes.BaseNode
  - DulcisX.Nodes.ProjectItemNode
  implements:
  - DulcisX.Nodes.IPhysicalNode
  - DulcisX.Nodes.INamedNode
  - DulcisX.Nodes.IBaseNode
  inheritedMembers:
  - DulcisX.Nodes.ProjectItemNode.GetParentProject
  - DulcisX.Nodes.ProjectItemNode.GetParent
  - DulcisX.Nodes.ProjectItemNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  - DulcisX.Nodes.ProjectItemNode.GetChildren
  - DulcisX.Nodes.ProjectItemNode.GetDefaultNamespace
  - DulcisX.Nodes.BaseNode.ParentSolution
  - DulcisX.Nodes.BaseNode.UnderlyingHierarchy
  - DulcisX.Nodes.BaseNode.ItemId
  - DulcisX.Nodes.BaseNode.GetDisplayName
  - DulcisX.Nodes.BaseNode.AsHierarchyItem
  - DulcisX.Nodes.BaseNode.IsTypeMatching(DulcisX.Core.Enums.NodeTypes)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DulcisX.Nodes.FolderNode.NodeType
  commentId: P:DulcisX.Nodes.FolderNode.NodeType
  id: NodeType
  parent: DulcisX.Nodes.FolderNode
  langs:
  - csharp
  - vb
  name: NodeType
  nameWithType: FolderNode.NodeType
  fullName: DulcisX.Nodes.FolderNode.NodeType
  type: Property
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/FolderNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: NodeType
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/FolderNode.cs
    startLine: 14
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public override NodeTypes NodeType { get; }
    parameters: []
    return:
      type: DulcisX.Core.Enums.NodeTypes
    content.vb: Public Overrides ReadOnly Property NodeType As NodeTypes
  overridden: DulcisX.Nodes.BaseNode.NodeType
  overload: DulcisX.Nodes.FolderNode.NodeType*
  implements:
  - DulcisX.Nodes.IBaseNode.NodeType
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: DulcisX.Nodes.FolderNode.#ctor(DulcisX.Nodes.SolutionNode,DulcisX.Nodes.ProjectNode,System.UInt32)
  commentId: M:DulcisX.Nodes.FolderNode.#ctor(DulcisX.Nodes.SolutionNode,DulcisX.Nodes.ProjectNode,System.UInt32)
  id: '#ctor(DulcisX.Nodes.SolutionNode,DulcisX.Nodes.ProjectNode,System.UInt32)'
  parent: DulcisX.Nodes.FolderNode
  langs:
  - csharp
  - vb
  name: FolderNode(SolutionNode, ProjectNode, UInt32)
  nameWithType: FolderNode.FolderNode(SolutionNode, ProjectNode, UInt32)
  fullName: DulcisX.Nodes.FolderNode.FolderNode(DulcisX.Nodes.SolutionNode, DulcisX.Nodes.ProjectNode, System.UInt32)
  type: Constructor
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/FolderNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: .ctor
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/FolderNode.cs
    startLine: 22
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nInitializes a new instance of the <xref href=\"DulcisX.Nodes.FolderNode\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public FolderNode(SolutionNode solution, ProjectNode project, uint itemId)
    parameters:
    - id: solution
      type: DulcisX.Nodes.SolutionNode
      description: The Solution in which the <xref href="DulcisX.Nodes.FolderNode" data-throw-if-not-resolved="false"></xref> sits in.
    - id: project
      type: DulcisX.Nodes.ProjectNode
      description: The Project in which the <xref href="DulcisX.Nodes.FolderNode" data-throw-if-not-resolved="false"></xref> sits in.
    - id: itemId
      type: System.UInt32
      description: The Unique Identifier for the <xref href="DulcisX.Nodes.FolderNode" data-throw-if-not-resolved="false"></xref> in the <code data-dev-comment-type="paramref" class="paramref">project</code>.
    content.vb: Public Sub New(solution As SolutionNode, project As ProjectNode, itemId As UInteger)
  overload: DulcisX.Nodes.FolderNode.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.FolderNode.#ctor(DulcisX.Nodes.SolutionNode,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)
  commentId: M:DulcisX.Nodes.FolderNode.#ctor(DulcisX.Nodes.SolutionNode,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)
  id: '#ctor(DulcisX.Nodes.SolutionNode,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)'
  parent: DulcisX.Nodes.FolderNode
  langs:
  - csharp
  - vb
  name: FolderNode(SolutionNode, IVsHierarchy, UInt32)
  nameWithType: FolderNode.FolderNode(SolutionNode, IVsHierarchy, UInt32)
  fullName: DulcisX.Nodes.FolderNode.FolderNode(DulcisX.Nodes.SolutionNode, Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, System.UInt32)
  type: Constructor
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/FolderNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: .ctor
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/FolderNode.cs
    startLine: 33
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nInitializes a new instance of the <xref href=\"DulcisX.Nodes.FolderNode\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public FolderNode(SolutionNode solution, IVsHierarchy hierarchy, uint itemId)
    parameters:
    - id: solution
      type: DulcisX.Nodes.SolutionNode
      description: The Solution in which the <xref href="DulcisX.Nodes.FolderNode" data-throw-if-not-resolved="false"></xref> sits in.
    - id: hierarchy
      type: Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
      description: The Hierarchy of the Project in which the <xref href="DulcisX.Nodes.FolderNode" data-throw-if-not-resolved="false"></xref> sits in.
    - id: itemId
      type: System.UInt32
      description: The Unique Identifier for the <xref href="DulcisX.Nodes.FolderNode" data-throw-if-not-resolved="false"></xref> in the <code data-dev-comment-type="paramref" class="paramref">hierarchy</code>.
    content.vb: Public Sub New(solution As SolutionNode, hierarchy As IVsHierarchy, itemId As UInteger)
  overload: DulcisX.Nodes.FolderNode.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.FolderNode.GetFileName
  commentId: M:DulcisX.Nodes.FolderNode.GetFileName
  id: GetFileName
  parent: DulcisX.Nodes.FolderNode
  langs:
  - csharp
  - vb
  name: GetFileName()
  nameWithType: FolderNode.GetFileName()
  fullName: DulcisX.Nodes.FolderNode.GetFileName()
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/FolderNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetFileName
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/FolderNode.cs
    startLine: 38
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public string GetFileName()
    return:
      type: System.String
    content.vb: Public Function GetFileName As String
  overload: DulcisX.Nodes.FolderNode.GetFileName*
  implements:
  - DulcisX.Nodes.IPhysicalNode.GetFileName
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.FolderNode.GetFullName
  commentId: M:DulcisX.Nodes.FolderNode.GetFullName
  id: GetFullName
  parent: DulcisX.Nodes.FolderNode
  langs:
  - csharp
  - vb
  name: GetFullName()
  nameWithType: FolderNode.GetFullName()
  fullName: DulcisX.Nodes.FolderNode.GetFullName()
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/FolderNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetFullName
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/FolderNode.cs
    startLine: 46
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public string GetFullName()
    return:
      type: System.String
    content.vb: Public Function GetFullName As String
  overload: DulcisX.Nodes.FolderNode.GetFullName*
  implements:
  - DulcisX.Nodes.IPhysicalNode.GetFullName
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: DulcisX.Nodes.ProjectNode
  commentId: T:DulcisX.Nodes.ProjectNode
  parent: DulcisX.Nodes
  name: ProjectNode
  nameWithType: ProjectNode
  fullName: DulcisX.Nodes.ProjectNode
- uid: DulcisX.Nodes
  commentId: N:DulcisX.Nodes
  name: DulcisX.Nodes
  nameWithType: DulcisX.Nodes
  fullName: DulcisX.Nodes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: DulcisX.Nodes.BaseNode
  commentId: T:DulcisX.Nodes.BaseNode
  parent: DulcisX.Nodes
  name: BaseNode
  nameWithType: BaseNode
  fullName: DulcisX.Nodes.BaseNode
- uid: DulcisX.Nodes.ProjectItemNode
  commentId: T:DulcisX.Nodes.ProjectItemNode
  parent: DulcisX.Nodes
  name: ProjectItemNode
  nameWithType: ProjectItemNode
  fullName: DulcisX.Nodes.ProjectItemNode
- uid: DulcisX.Nodes.IPhysicalNode
  commentId: T:DulcisX.Nodes.IPhysicalNode
  parent: DulcisX.Nodes
  name: IPhysicalNode
  nameWithType: IPhysicalNode
  fullName: DulcisX.Nodes.IPhysicalNode
- uid: DulcisX.Nodes.INamedNode
  commentId: T:DulcisX.Nodes.INamedNode
  parent: DulcisX.Nodes
  name: INamedNode
  nameWithType: INamedNode
  fullName: DulcisX.Nodes.INamedNode
- uid: DulcisX.Nodes.IBaseNode
  commentId: T:DulcisX.Nodes.IBaseNode
  parent: DulcisX.Nodes
  name: IBaseNode
  nameWithType: IBaseNode
  fullName: DulcisX.Nodes.IBaseNode
- uid: DulcisX.Nodes.ProjectItemNode.GetParentProject
  commentId: M:DulcisX.Nodes.ProjectItemNode.GetParentProject
  parent: DulcisX.Nodes.ProjectItemNode
  name: GetParentProject()
  nameWithType: ProjectItemNode.GetParentProject()
  fullName: DulcisX.Nodes.ProjectItemNode.GetParentProject()
  spec.csharp:
  - uid: DulcisX.Nodes.ProjectItemNode.GetParentProject
    name: GetParentProject
    nameWithType: ProjectItemNode.GetParentProject
    fullName: DulcisX.Nodes.ProjectItemNode.GetParentProject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.ProjectItemNode.GetParentProject
    name: GetParentProject
    nameWithType: ProjectItemNode.GetParentProject
    fullName: DulcisX.Nodes.ProjectItemNode.GetParentProject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.ProjectItemNode.GetParent
  commentId: M:DulcisX.Nodes.ProjectItemNode.GetParent
  parent: DulcisX.Nodes.ProjectItemNode
  name: GetParent()
  nameWithType: ProjectItemNode.GetParent()
  fullName: DulcisX.Nodes.ProjectItemNode.GetParent()
  spec.csharp:
  - uid: DulcisX.Nodes.ProjectItemNode.GetParent
    name: GetParent
    nameWithType: ProjectItemNode.GetParent
    fullName: DulcisX.Nodes.ProjectItemNode.GetParent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.ProjectItemNode.GetParent
    name: GetParent
    nameWithType: ProjectItemNode.GetParent
    fullName: DulcisX.Nodes.ProjectItemNode.GetParent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.ProjectItemNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  commentId: M:DulcisX.Nodes.ProjectItemNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  parent: DulcisX.Nodes.ProjectItemNode
  name: GetParent(NodeTypes)
  nameWithType: ProjectItemNode.GetParent(NodeTypes)
  fullName: DulcisX.Nodes.ProjectItemNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  spec.csharp:
  - uid: DulcisX.Nodes.ProjectItemNode.GetParent(DulcisX.Core.Enums.NodeTypes)
    name: GetParent
    nameWithType: ProjectItemNode.GetParent
    fullName: DulcisX.Nodes.ProjectItemNode.GetParent
  - name: (
    nameWithType: (
    fullName: (
  - uid: DulcisX.Core.Enums.NodeTypes
    name: NodeTypes
    nameWithType: NodeTypes
    fullName: DulcisX.Core.Enums.NodeTypes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.ProjectItemNode.GetParent(DulcisX.Core.Enums.NodeTypes)
    name: GetParent
    nameWithType: ProjectItemNode.GetParent
    fullName: DulcisX.Nodes.ProjectItemNode.GetParent
  - name: (
    nameWithType: (
    fullName: (
  - uid: DulcisX.Core.Enums.NodeTypes
    name: NodeTypes
    nameWithType: NodeTypes
    fullName: DulcisX.Core.Enums.NodeTypes
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.ProjectItemNode.GetChildren
  commentId: M:DulcisX.Nodes.ProjectItemNode.GetChildren
  parent: DulcisX.Nodes.ProjectItemNode
  name: GetChildren()
  nameWithType: ProjectItemNode.GetChildren()
  fullName: DulcisX.Nodes.ProjectItemNode.GetChildren()
  spec.csharp:
  - uid: DulcisX.Nodes.ProjectItemNode.GetChildren
    name: GetChildren
    nameWithType: ProjectItemNode.GetChildren
    fullName: DulcisX.Nodes.ProjectItemNode.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.ProjectItemNode.GetChildren
    name: GetChildren
    nameWithType: ProjectItemNode.GetChildren
    fullName: DulcisX.Nodes.ProjectItemNode.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.ProjectItemNode.GetDefaultNamespace
  commentId: M:DulcisX.Nodes.ProjectItemNode.GetDefaultNamespace
  parent: DulcisX.Nodes.ProjectItemNode
  name: GetDefaultNamespace()
  nameWithType: ProjectItemNode.GetDefaultNamespace()
  fullName: DulcisX.Nodes.ProjectItemNode.GetDefaultNamespace()
  spec.csharp:
  - uid: DulcisX.Nodes.ProjectItemNode.GetDefaultNamespace
    name: GetDefaultNamespace
    nameWithType: ProjectItemNode.GetDefaultNamespace
    fullName: DulcisX.Nodes.ProjectItemNode.GetDefaultNamespace
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.ProjectItemNode.GetDefaultNamespace
    name: GetDefaultNamespace
    nameWithType: ProjectItemNode.GetDefaultNamespace
    fullName: DulcisX.Nodes.ProjectItemNode.GetDefaultNamespace
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.BaseNode.ParentSolution
  commentId: P:DulcisX.Nodes.BaseNode.ParentSolution
  parent: DulcisX.Nodes.BaseNode
  name: ParentSolution
  nameWithType: BaseNode.ParentSolution
  fullName: DulcisX.Nodes.BaseNode.ParentSolution
- uid: DulcisX.Nodes.BaseNode.UnderlyingHierarchy
  commentId: P:DulcisX.Nodes.BaseNode.UnderlyingHierarchy
  parent: DulcisX.Nodes.BaseNode
  name: UnderlyingHierarchy
  nameWithType: BaseNode.UnderlyingHierarchy
  fullName: DulcisX.Nodes.BaseNode.UnderlyingHierarchy
- uid: DulcisX.Nodes.BaseNode.ItemId
  commentId: P:DulcisX.Nodes.BaseNode.ItemId
  parent: DulcisX.Nodes.BaseNode
  name: ItemId
  nameWithType: BaseNode.ItemId
  fullName: DulcisX.Nodes.BaseNode.ItemId
- uid: DulcisX.Nodes.BaseNode.GetDisplayName
  commentId: M:DulcisX.Nodes.BaseNode.GetDisplayName
  parent: DulcisX.Nodes.BaseNode
  name: GetDisplayName()
  nameWithType: BaseNode.GetDisplayName()
  fullName: DulcisX.Nodes.BaseNode.GetDisplayName()
  spec.csharp:
  - uid: DulcisX.Nodes.BaseNode.GetDisplayName
    name: GetDisplayName
    nameWithType: BaseNode.GetDisplayName
    fullName: DulcisX.Nodes.BaseNode.GetDisplayName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.BaseNode.GetDisplayName
    name: GetDisplayName
    nameWithType: BaseNode.GetDisplayName
    fullName: DulcisX.Nodes.BaseNode.GetDisplayName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.BaseNode.AsHierarchyItem
  commentId: M:DulcisX.Nodes.BaseNode.AsHierarchyItem
  parent: DulcisX.Nodes.BaseNode
  name: AsHierarchyItem()
  nameWithType: BaseNode.AsHierarchyItem()
  fullName: DulcisX.Nodes.BaseNode.AsHierarchyItem()
  spec.csharp:
  - uid: DulcisX.Nodes.BaseNode.AsHierarchyItem
    name: AsHierarchyItem
    nameWithType: BaseNode.AsHierarchyItem
    fullName: DulcisX.Nodes.BaseNode.AsHierarchyItem
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.BaseNode.AsHierarchyItem
    name: AsHierarchyItem
    nameWithType: BaseNode.AsHierarchyItem
    fullName: DulcisX.Nodes.BaseNode.AsHierarchyItem
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.BaseNode.IsTypeMatching(DulcisX.Core.Enums.NodeTypes)
  commentId: M:DulcisX.Nodes.BaseNode.IsTypeMatching(DulcisX.Core.Enums.NodeTypes)
  parent: DulcisX.Nodes.BaseNode
  name: IsTypeMatching(NodeTypes)
  nameWithType: BaseNode.IsTypeMatching(NodeTypes)
  fullName: DulcisX.Nodes.BaseNode.IsTypeMatching(DulcisX.Core.Enums.NodeTypes)
  spec.csharp:
  - uid: DulcisX.Nodes.BaseNode.IsTypeMatching(DulcisX.Core.Enums.NodeTypes)
    name: IsTypeMatching
    nameWithType: BaseNode.IsTypeMatching
    fullName: DulcisX.Nodes.BaseNode.IsTypeMatching
  - name: (
    nameWithType: (
    fullName: (
  - uid: DulcisX.Core.Enums.NodeTypes
    name: NodeTypes
    nameWithType: NodeTypes
    fullName: DulcisX.Core.Enums.NodeTypes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.BaseNode.IsTypeMatching(DulcisX.Core.Enums.NodeTypes)
    name: IsTypeMatching
    nameWithType: BaseNode.IsTypeMatching
    fullName: DulcisX.Nodes.BaseNode.IsTypeMatching
  - name: (
    nameWithType: (
    fullName: (
  - uid: DulcisX.Core.Enums.NodeTypes
    name: NodeTypes
    nameWithType: NodeTypes
    fullName: DulcisX.Core.Enums.NodeTypes
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DulcisX.Nodes.BaseNode.NodeType
  commentId: P:DulcisX.Nodes.BaseNode.NodeType
  parent: DulcisX.Nodes.BaseNode
  name: NodeType
  nameWithType: BaseNode.NodeType
  fullName: DulcisX.Nodes.BaseNode.NodeType
- uid: DulcisX.Nodes.FolderNode.NodeType*
  commentId: Overload:DulcisX.Nodes.FolderNode.NodeType
  name: NodeType
  nameWithType: FolderNode.NodeType
  fullName: DulcisX.Nodes.FolderNode.NodeType
- uid: DulcisX.Nodes.IBaseNode.NodeType
  commentId: P:DulcisX.Nodes.IBaseNode.NodeType
  parent: DulcisX.Nodes.IBaseNode
  name: NodeType
  nameWithType: IBaseNode.NodeType
  fullName: DulcisX.Nodes.IBaseNode.NodeType
- uid: DulcisX.Core.Enums.NodeTypes
  commentId: T:DulcisX.Core.Enums.NodeTypes
  parent: DulcisX.Core.Enums
  name: NodeTypes
  nameWithType: NodeTypes
  fullName: DulcisX.Core.Enums.NodeTypes
- uid: DulcisX.Core.Enums
  commentId: N:DulcisX.Core.Enums
  name: DulcisX.Core.Enums
  nameWithType: DulcisX.Core.Enums
  fullName: DulcisX.Core.Enums
- uid: DulcisX.Nodes.FolderNode
  commentId: T:DulcisX.Nodes.FolderNode
  parent: DulcisX.Nodes
  name: FolderNode
  nameWithType: FolderNode
  fullName: DulcisX.Nodes.FolderNode
- uid: DulcisX.Nodes.FolderNode.#ctor*
  commentId: Overload:DulcisX.Nodes.FolderNode.#ctor
  name: FolderNode
  nameWithType: FolderNode.FolderNode
  fullName: DulcisX.Nodes.FolderNode.FolderNode
- uid: DulcisX.Nodes.SolutionNode
  commentId: T:DulcisX.Nodes.SolutionNode
  parent: DulcisX.Nodes
  name: SolutionNode
  nameWithType: SolutionNode
  fullName: DulcisX.Nodes.SolutionNode
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
  commentId: T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
  parent: Microsoft.VisualStudio.Shell.Interop
  isExternal: true
  name: IVsHierarchy
  nameWithType: IVsHierarchy
  fullName: Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
- uid: Microsoft.VisualStudio.Shell.Interop
  commentId: N:Microsoft.VisualStudio.Shell.Interop
  isExternal: true
  name: Microsoft.VisualStudio.Shell.Interop
  nameWithType: Microsoft.VisualStudio.Shell.Interop
  fullName: Microsoft.VisualStudio.Shell.Interop
- uid: DulcisX.Nodes.FolderNode.GetFileName*
  commentId: Overload:DulcisX.Nodes.FolderNode.GetFileName
  name: GetFileName
  nameWithType: FolderNode.GetFileName
  fullName: DulcisX.Nodes.FolderNode.GetFileName
- uid: DulcisX.Nodes.IPhysicalNode.GetFileName
  commentId: M:DulcisX.Nodes.IPhysicalNode.GetFileName
  parent: DulcisX.Nodes.IPhysicalNode
  name: GetFileName()
  nameWithType: IPhysicalNode.GetFileName()
  fullName: DulcisX.Nodes.IPhysicalNode.GetFileName()
  spec.csharp:
  - uid: DulcisX.Nodes.IPhysicalNode.GetFileName
    name: GetFileName
    nameWithType: IPhysicalNode.GetFileName
    fullName: DulcisX.Nodes.IPhysicalNode.GetFileName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.IPhysicalNode.GetFileName
    name: GetFileName
    nameWithType: IPhysicalNode.GetFileName
    fullName: DulcisX.Nodes.IPhysicalNode.GetFileName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DulcisX.Nodes.FolderNode.GetFullName*
  commentId: Overload:DulcisX.Nodes.FolderNode.GetFullName
  name: GetFullName
  nameWithType: FolderNode.GetFullName
  fullName: DulcisX.Nodes.FolderNode.GetFullName
- uid: DulcisX.Nodes.IPhysicalNode.GetFullName
  commentId: M:DulcisX.Nodes.IPhysicalNode.GetFullName
  parent: DulcisX.Nodes.IPhysicalNode
  name: GetFullName()
  nameWithType: IPhysicalNode.GetFullName()
  fullName: DulcisX.Nodes.IPhysicalNode.GetFullName()
  spec.csharp:
  - uid: DulcisX.Nodes.IPhysicalNode.GetFullName
    name: GetFullName
    nameWithType: IPhysicalNode.GetFullName
    fullName: DulcisX.Nodes.IPhysicalNode.GetFullName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.IPhysicalNode.GetFullName
    name: GetFullName
    nameWithType: IPhysicalNode.GetFullName
    fullName: DulcisX.Nodes.IPhysicalNode.GetFullName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )

### YamlMime:ManagedReference
items:
- uid: DulcisX.Nodes.SelectedNodesCollection
  commentId: T:DulcisX.Nodes.SelectedNodesCollection
  id: SelectedNodesCollection
  parent: DulcisX.Nodes
  children:
  - DulcisX.Nodes.SelectedNodesCollection.GetEnumerator
  - DulcisX.Nodes.SelectedNodesCollection.GetMultiSelection(Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,DulcisX.Nodes.SolutionNode)
  - DulcisX.Nodes.SelectedNodesCollection.GetSelection(Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,DulcisX.Nodes.SolutionNode)
  - DulcisX.Nodes.SelectedNodesCollection.GetSingleSelection(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,DulcisX.Nodes.SolutionNode)
  - DulcisX.Nodes.SelectedNodesCollection.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: SelectedNodesCollection
  nameWithType: SelectedNodesCollection
  fullName: DulcisX.Nodes.SelectedNodesCollection
  type: Class
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/SelectedNodesCollection.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: SelectedNodesCollection
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/SelectedNodesCollection.cs
    startLine: 14
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nA wrapper for the <xref href=\"Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection\" data-throw-if-not-resolved=\"false\"></xref>, gets access to the selected nodes in the Solution Explorer.\n"
  example: []
  syntax:
    content: 'public class SelectedNodesCollection : IEnumerable<BaseNode>, IEnumerable'
    content.vb: >-
      Public Class SelectedNodesCollection

          Implements IEnumerable(Of BaseNode), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{DulcisX.Nodes.BaseNode}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DulcisX.Nodes.SelectedNodesCollection.GetEnumerator
  commentId: M:DulcisX.Nodes.SelectedNodesCollection.GetEnumerator
  id: GetEnumerator
  parent: DulcisX.Nodes.SelectedNodesCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: SelectedNodesCollection.GetEnumerator()
  fullName: DulcisX.Nodes.SelectedNodesCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/SelectedNodesCollection.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetEnumerator
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/SelectedNodesCollection.cs
    startLine: 27
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: public IEnumerator<BaseNode> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{DulcisX.Nodes.BaseNode}
    content.vb: Public Function GetEnumerator As IEnumerator(Of BaseNode)
  overload: DulcisX.Nodes.SelectedNodesCollection.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{DulcisX.Nodes.BaseNode}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DulcisX.Nodes.SelectedNodesCollection.GetSelection(Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,DulcisX.Nodes.SolutionNode)
  commentId: M:DulcisX.Nodes.SelectedNodesCollection.GetSelection(Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,DulcisX.Nodes.SolutionNode)
  id: GetSelection(Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,DulcisX.Nodes.SolutionNode)
  parent: DulcisX.Nodes.SelectedNodesCollection
  langs:
  - csharp
  - vb
  name: GetSelection(IVsMultiItemSelect, IVsHierarchy, UInt32, SolutionNode)
  nameWithType: SelectedNodesCollection.GetSelection(IVsMultiItemSelect, IVsHierarchy, UInt32, SolutionNode)
  fullName: DulcisX.Nodes.SelectedNodesCollection.GetSelection(Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect, Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, System.UInt32, DulcisX.Nodes.SolutionNode)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/SelectedNodesCollection.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetSelection
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/SelectedNodesCollection.cs
    startLine: 53
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nReturns all selected nodes.\n"
  example: []
  syntax:
    content: public static IEnumerable<BaseNode> GetSelection(IVsMultiItemSelect multiSelect, IVsHierarchy hierarchy, uint itemId, SolutionNode solution)
    parameters:
    - id: multiSelect
      type: Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect
      description: The native <xref href="Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect" data-throw-if-not-resolved="false"></xref> interface containg the selected Nodes.
    - id: hierarchy
      type: Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
      description: The hierarchy which could contain the selected Node.
    - id: itemId
      type: System.UInt32
      description: The potential Unique Identifier for the selected Node in the <code data-dev-comment-type="paramref" class="paramref">hierarchy</code>.
    - id: solution
      type: DulcisX.Nodes.SolutionNode
      description: The Solution in which the Nodes sit in.
    return:
      type: System.Collections.Generic.IEnumerable{DulcisX.Nodes.BaseNode}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> with the selected Nodes.
    content.vb: Public Shared Function GetSelection(multiSelect As IVsMultiItemSelect, hierarchy As IVsHierarchy, itemId As UInteger, solution As SolutionNode) As IEnumerable(Of BaseNode)
  overload: DulcisX.Nodes.SelectedNodesCollection.GetSelection*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DulcisX.Nodes.SelectedNodesCollection.GetSingleSelection(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,DulcisX.Nodes.SolutionNode)
  commentId: M:DulcisX.Nodes.SelectedNodesCollection.GetSingleSelection(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,DulcisX.Nodes.SolutionNode)
  id: GetSingleSelection(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,DulcisX.Nodes.SolutionNode)
  parent: DulcisX.Nodes.SelectedNodesCollection
  langs:
  - csharp
  - vb
  name: GetSingleSelection(IVsHierarchy, UInt32, SolutionNode)
  nameWithType: SelectedNodesCollection.GetSingleSelection(IVsHierarchy, UInt32, SolutionNode)
  fullName: DulcisX.Nodes.SelectedNodesCollection.GetSingleSelection(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, System.UInt32, DulcisX.Nodes.SolutionNode)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/SelectedNodesCollection.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetSingleSelection
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/SelectedNodesCollection.cs
    startLine: 75
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nReturns the single selected node in the <xref href=\"Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static BaseNode GetSingleSelection(IVsHierarchy hierarchy, uint itemId, SolutionNode solution)
    parameters:
    - id: hierarchy
      type: Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
      description: The hierarchy which contains the selected Node.
    - id: itemId
      type: System.UInt32
      description: The Unique Identifier for the selected Node in the <code data-dev-comment-type="paramref" class="paramref">hierarchy</code>.
    - id: solution
      type: DulcisX.Nodes.SolutionNode
      description: The Solution in which the Nodes sit in.
    return:
      type: DulcisX.Nodes.BaseNode
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> with the selected Nodes.
    content.vb: Public Shared Function GetSingleSelection(hierarchy As IVsHierarchy, itemId As UInteger, solution As SolutionNode) As BaseNode
  overload: DulcisX.Nodes.SelectedNodesCollection.GetSingleSelection*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DulcisX.Nodes.SelectedNodesCollection.GetMultiSelection(Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,DulcisX.Nodes.SolutionNode)
  commentId: M:DulcisX.Nodes.SelectedNodesCollection.GetMultiSelection(Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,DulcisX.Nodes.SolutionNode)
  id: GetMultiSelection(Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,DulcisX.Nodes.SolutionNode)
  parent: DulcisX.Nodes.SelectedNodesCollection
  langs:
  - csharp
  - vb
  name: GetMultiSelection(IVsMultiItemSelect, SolutionNode)
  nameWithType: SelectedNodesCollection.GetMultiSelection(IVsMultiItemSelect, SolutionNode)
  fullName: DulcisX.Nodes.SelectedNodesCollection.GetMultiSelection(Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect, DulcisX.Nodes.SolutionNode)
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/SelectedNodesCollection.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetMultiSelection
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/SelectedNodesCollection.cs
    startLine: 97
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nReturns all selected nodes is an <xref href=\"Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect\" data-throw-if-not-resolved=\"false\"></xref> in the <code data-dev-comment-type=\"paramref\" class=\"paramref\">multiSelect</code>.\n"
  example: []
  syntax:
    content: public static IEnumerable<BaseNode> GetMultiSelection(IVsMultiItemSelect multiSelect, SolutionNode solution)
    parameters:
    - id: multiSelect
      type: Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect
      description: The native <xref href="Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect" data-throw-if-not-resolved="false"></xref> interface containg the selected Nodes.
    - id: solution
      type: DulcisX.Nodes.SolutionNode
      description: The Solution in which the Nodes sit in.
    return:
      type: System.Collections.Generic.IEnumerable{DulcisX.Nodes.BaseNode}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> with the selected Nodes.
    content.vb: Public Shared Function GetMultiSelection(multiSelect As IVsMultiItemSelect, solution As SolutionNode) As IEnumerable(Of BaseNode)
  overload: DulcisX.Nodes.SelectedNodesCollection.GetMultiSelection*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DulcisX.Nodes.SelectedNodesCollection.System#Collections#IEnumerable#GetEnumerator
  commentId: M:DulcisX.Nodes.SelectedNodesCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: DulcisX.Nodes.SelectedNodesCollection
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: SelectedNodesCollection.IEnumerable.GetEnumerator()
  fullName: DulcisX.Nodes.SelectedNodesCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/SelectedNodesCollection.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/SelectedNodesCollection.cs
    startLine: 120
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: DulcisX.Nodes.SelectedNodesCollection.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: SelectedNodesCollection.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection
  commentId: T:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection
  isExternal: true
- uid: DulcisX.Nodes
  commentId: N:DulcisX.Nodes
  name: DulcisX.Nodes
  nameWithType: DulcisX.Nodes
  fullName: DulcisX.Nodes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{DulcisX.Nodes.BaseNode}
  commentId: T:System.Collections.Generic.IEnumerable{DulcisX.Nodes.BaseNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<BaseNode>
  nameWithType: IEnumerable<BaseNode>
  fullName: System.Collections.Generic.IEnumerable<DulcisX.Nodes.BaseNode>
  nameWithType.vb: IEnumerable(Of BaseNode)
  fullName.vb: System.Collections.Generic.IEnumerable(Of DulcisX.Nodes.BaseNode)
  name.vb: IEnumerable(Of BaseNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DulcisX.Nodes.BaseNode
    name: BaseNode
    nameWithType: BaseNode
    fullName: DulcisX.Nodes.BaseNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DulcisX.Nodes.BaseNode
    name: BaseNode
    nameWithType: BaseNode
    fullName: DulcisX.Nodes.BaseNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: DulcisX.Nodes.SelectedNodesCollection.GetEnumerator*
  commentId: Overload:DulcisX.Nodes.SelectedNodesCollection.GetEnumerator
  name: GetEnumerator
  nameWithType: SelectedNodesCollection.GetEnumerator
  fullName: DulcisX.Nodes.SelectedNodesCollection.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{DulcisX.Nodes.BaseNode}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{DulcisX.Nodes.BaseNode}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{DulcisX.Nodes.BaseNode}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<BaseNode>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<DulcisX.Nodes.BaseNode>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of BaseNode).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of DulcisX.Nodes.BaseNode).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<BaseNode>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<DulcisX.Nodes.BaseNode>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of BaseNode).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of DulcisX.Nodes.BaseNode).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{DulcisX.Nodes.BaseNode}
  commentId: T:System.Collections.Generic.IEnumerator{DulcisX.Nodes.BaseNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<BaseNode>
  nameWithType: IEnumerator<BaseNode>
  fullName: System.Collections.Generic.IEnumerator<DulcisX.Nodes.BaseNode>
  nameWithType.vb: IEnumerator(Of BaseNode)
  fullName.vb: System.Collections.Generic.IEnumerator(Of DulcisX.Nodes.BaseNode)
  name.vb: IEnumerator(Of BaseNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DulcisX.Nodes.BaseNode
    name: BaseNode
    nameWithType: BaseNode
    fullName: DulcisX.Nodes.BaseNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DulcisX.Nodes.BaseNode
    name: BaseNode
    nameWithType: BaseNode
    fullName: DulcisX.Nodes.BaseNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect
  commentId: T:Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect
  parent: Microsoft.VisualStudio.Shell.Interop
  isExternal: true
  name: IVsMultiItemSelect
  nameWithType: IVsMultiItemSelect
  fullName: Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect
- uid: DulcisX.Nodes.SelectedNodesCollection.GetSelection*
  commentId: Overload:DulcisX.Nodes.SelectedNodesCollection.GetSelection
  name: GetSelection
  nameWithType: SelectedNodesCollection.GetSelection
  fullName: DulcisX.Nodes.SelectedNodesCollection.GetSelection
- uid: Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
  commentId: T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
  parent: Microsoft.VisualStudio.Shell.Interop
  isExternal: true
  name: IVsHierarchy
  nameWithType: IVsHierarchy
  fullName: Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: DulcisX.Nodes.SolutionNode
  commentId: T:DulcisX.Nodes.SolutionNode
  parent: DulcisX.Nodes
  name: SolutionNode
  nameWithType: SolutionNode
  fullName: DulcisX.Nodes.SolutionNode
- uid: Microsoft.VisualStudio.Shell.Interop
  commentId: N:Microsoft.VisualStudio.Shell.Interop
  isExternal: true
  name: Microsoft.VisualStudio.Shell.Interop
  nameWithType: Microsoft.VisualStudio.Shell.Interop
  fullName: Microsoft.VisualStudio.Shell.Interop
- uid: DulcisX.Nodes.SelectedNodesCollection.GetSingleSelection*
  commentId: Overload:DulcisX.Nodes.SelectedNodesCollection.GetSingleSelection
  name: GetSingleSelection
  nameWithType: SelectedNodesCollection.GetSingleSelection
  fullName: DulcisX.Nodes.SelectedNodesCollection.GetSingleSelection
- uid: DulcisX.Nodes.BaseNode
  commentId: T:DulcisX.Nodes.BaseNode
  parent: DulcisX.Nodes
  name: BaseNode
  nameWithType: BaseNode
  fullName: DulcisX.Nodes.BaseNode
- uid: DulcisX.Nodes.SelectedNodesCollection.GetMultiSelection*
  commentId: Overload:DulcisX.Nodes.SelectedNodesCollection.GetMultiSelection
  name: GetMultiSelection
  nameWithType: SelectedNodesCollection.GetMultiSelection
  fullName: DulcisX.Nodes.SelectedNodesCollection.GetMultiSelection
- uid: DulcisX.Nodes.SelectedNodesCollection.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:DulcisX.Nodes.SelectedNodesCollection.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: SelectedNodesCollection.IEnumerable.GetEnumerator
  fullName: DulcisX.Nodes.SelectedNodesCollection.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: SelectedNodesCollection.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator

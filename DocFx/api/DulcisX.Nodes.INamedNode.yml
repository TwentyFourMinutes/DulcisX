### YamlMime:ManagedReference
items:
- uid: DulcisX.Nodes.INamedNode
  commentId: T:DulcisX.Nodes.INamedNode
  id: INamedNode
  parent: DulcisX.Nodes
  children:
  - DulcisX.Nodes.INamedNode.GetDisplayName
  langs:
  - csharp
  - vb
  name: INamedNode
  nameWithType: INamedNode
  fullName: DulcisX.Nodes.INamedNode
  type: Interface
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/INamedNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: INamedNode
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/INamedNode.cs
    startLine: 6
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nRepresents a Node which has a name.\n"
  example: []
  syntax:
    content: 'public interface INamedNode : IBaseNode'
    content.vb: >-
      Public Interface INamedNode
          Inherits IBaseNode
  inheritedMembers:
  - DulcisX.Nodes.IBaseNode.ParentSolution
  - DulcisX.Nodes.IBaseNode.UnderlyingHierarchy
  - DulcisX.Nodes.IBaseNode.ItemId
  - DulcisX.Nodes.IBaseNode.NodeType
  - DulcisX.Nodes.IBaseNode.GetParent
  - DulcisX.Nodes.IBaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  - DulcisX.Nodes.IBaseNode.AsHierarchyItem
  - DulcisX.Nodes.IBaseNode.GetChildren
  - DulcisX.Nodes.IBaseNode.IsTypeMatching(DulcisX.Core.Enums.NodeTypes)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: DulcisX.Nodes.INamedNode.GetDisplayName
  commentId: M:DulcisX.Nodes.INamedNode.GetDisplayName
  id: GetDisplayName
  parent: DulcisX.Nodes.INamedNode
  langs:
  - csharp
  - vb
  name: GetDisplayName()
  nameWithType: INamedNode.GetDisplayName()
  fullName: DulcisX.Nodes.INamedNode.GetDisplayName()
  type: Method
  source:
    remote:
      path: src/DulcisX/DulcisX/Nodes/INamedNode.cs
      branch: master
      repo: https://github.com/TwentyFourMinutes/DulcisX.git
    id: GetDisplayName
    path: ../../DulcisX - master/src/DulcisX/DulcisX/Nodes/INamedNode.cs
    startLine: 12
  assemblies:
  - DulcisX
  namespace: DulcisX.Nodes
  summary: "\nReturns the name displayed in the Visual Studio Solution Explorer.\n"
  example: []
  syntax:
    content: string GetDisplayName()
    return:
      type: System.String
      description: A string containg the display name of the Node.
    content.vb: Function GetDisplayName As String
  overload: DulcisX.Nodes.INamedNode.GetDisplayName*
references:
- uid: DulcisX.Nodes
  commentId: N:DulcisX.Nodes
  name: DulcisX.Nodes
  nameWithType: DulcisX.Nodes
  fullName: DulcisX.Nodes
- uid: DulcisX.Nodes.IBaseNode.ParentSolution
  commentId: P:DulcisX.Nodes.IBaseNode.ParentSolution
  parent: DulcisX.Nodes.IBaseNode
  name: ParentSolution
  nameWithType: IBaseNode.ParentSolution
  fullName: DulcisX.Nodes.IBaseNode.ParentSolution
- uid: DulcisX.Nodes.IBaseNode.UnderlyingHierarchy
  commentId: P:DulcisX.Nodes.IBaseNode.UnderlyingHierarchy
  parent: DulcisX.Nodes.IBaseNode
  name: UnderlyingHierarchy
  nameWithType: IBaseNode.UnderlyingHierarchy
  fullName: DulcisX.Nodes.IBaseNode.UnderlyingHierarchy
- uid: DulcisX.Nodes.IBaseNode.ItemId
  commentId: P:DulcisX.Nodes.IBaseNode.ItemId
  parent: DulcisX.Nodes.IBaseNode
  name: ItemId
  nameWithType: IBaseNode.ItemId
  fullName: DulcisX.Nodes.IBaseNode.ItemId
- uid: DulcisX.Nodes.IBaseNode.NodeType
  commentId: P:DulcisX.Nodes.IBaseNode.NodeType
  parent: DulcisX.Nodes.IBaseNode
  name: NodeType
  nameWithType: IBaseNode.NodeType
  fullName: DulcisX.Nodes.IBaseNode.NodeType
- uid: DulcisX.Nodes.IBaseNode.GetParent
  commentId: M:DulcisX.Nodes.IBaseNode.GetParent
  parent: DulcisX.Nodes.IBaseNode
  name: GetParent()
  nameWithType: IBaseNode.GetParent()
  fullName: DulcisX.Nodes.IBaseNode.GetParent()
  spec.csharp:
  - uid: DulcisX.Nodes.IBaseNode.GetParent
    name: GetParent
    nameWithType: IBaseNode.GetParent
    fullName: DulcisX.Nodes.IBaseNode.GetParent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.IBaseNode.GetParent
    name: GetParent
    nameWithType: IBaseNode.GetParent
    fullName: DulcisX.Nodes.IBaseNode.GetParent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.IBaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  commentId: M:DulcisX.Nodes.IBaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  parent: DulcisX.Nodes.IBaseNode
  name: GetParent(NodeTypes)
  nameWithType: IBaseNode.GetParent(NodeTypes)
  fullName: DulcisX.Nodes.IBaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
  spec.csharp:
  - uid: DulcisX.Nodes.IBaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
    name: GetParent
    nameWithType: IBaseNode.GetParent
    fullName: DulcisX.Nodes.IBaseNode.GetParent
  - name: (
    nameWithType: (
    fullName: (
  - uid: DulcisX.Core.Enums.NodeTypes
    name: NodeTypes
    nameWithType: NodeTypes
    fullName: DulcisX.Core.Enums.NodeTypes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.IBaseNode.GetParent(DulcisX.Core.Enums.NodeTypes)
    name: GetParent
    nameWithType: IBaseNode.GetParent
    fullName: DulcisX.Nodes.IBaseNode.GetParent
  - name: (
    nameWithType: (
    fullName: (
  - uid: DulcisX.Core.Enums.NodeTypes
    name: NodeTypes
    nameWithType: NodeTypes
    fullName: DulcisX.Core.Enums.NodeTypes
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.IBaseNode.AsHierarchyItem
  commentId: M:DulcisX.Nodes.IBaseNode.AsHierarchyItem
  parent: DulcisX.Nodes.IBaseNode
  name: AsHierarchyItem()
  nameWithType: IBaseNode.AsHierarchyItem()
  fullName: DulcisX.Nodes.IBaseNode.AsHierarchyItem()
  spec.csharp:
  - uid: DulcisX.Nodes.IBaseNode.AsHierarchyItem
    name: AsHierarchyItem
    nameWithType: IBaseNode.AsHierarchyItem
    fullName: DulcisX.Nodes.IBaseNode.AsHierarchyItem
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.IBaseNode.AsHierarchyItem
    name: AsHierarchyItem
    nameWithType: IBaseNode.AsHierarchyItem
    fullName: DulcisX.Nodes.IBaseNode.AsHierarchyItem
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.IBaseNode.GetChildren
  commentId: M:DulcisX.Nodes.IBaseNode.GetChildren
  parent: DulcisX.Nodes.IBaseNode
  name: GetChildren()
  nameWithType: IBaseNode.GetChildren()
  fullName: DulcisX.Nodes.IBaseNode.GetChildren()
  spec.csharp:
  - uid: DulcisX.Nodes.IBaseNode.GetChildren
    name: GetChildren
    nameWithType: IBaseNode.GetChildren
    fullName: DulcisX.Nodes.IBaseNode.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.IBaseNode.GetChildren
    name: GetChildren
    nameWithType: IBaseNode.GetChildren
    fullName: DulcisX.Nodes.IBaseNode.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.IBaseNode.IsTypeMatching(DulcisX.Core.Enums.NodeTypes)
  commentId: M:DulcisX.Nodes.IBaseNode.IsTypeMatching(DulcisX.Core.Enums.NodeTypes)
  parent: DulcisX.Nodes.IBaseNode
  name: IsTypeMatching(NodeTypes)
  nameWithType: IBaseNode.IsTypeMatching(NodeTypes)
  fullName: DulcisX.Nodes.IBaseNode.IsTypeMatching(DulcisX.Core.Enums.NodeTypes)
  spec.csharp:
  - uid: DulcisX.Nodes.IBaseNode.IsTypeMatching(DulcisX.Core.Enums.NodeTypes)
    name: IsTypeMatching
    nameWithType: IBaseNode.IsTypeMatching
    fullName: DulcisX.Nodes.IBaseNode.IsTypeMatching
  - name: (
    nameWithType: (
    fullName: (
  - uid: DulcisX.Core.Enums.NodeTypes
    name: NodeTypes
    nameWithType: NodeTypes
    fullName: DulcisX.Core.Enums.NodeTypes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DulcisX.Nodes.IBaseNode.IsTypeMatching(DulcisX.Core.Enums.NodeTypes)
    name: IsTypeMatching
    nameWithType: IBaseNode.IsTypeMatching
    fullName: DulcisX.Nodes.IBaseNode.IsTypeMatching
  - name: (
    nameWithType: (
    fullName: (
  - uid: DulcisX.Core.Enums.NodeTypes
    name: NodeTypes
    nameWithType: NodeTypes
    fullName: DulcisX.Core.Enums.NodeTypes
  - name: )
    nameWithType: )
    fullName: )
- uid: DulcisX.Nodes.IBaseNode
  commentId: T:DulcisX.Nodes.IBaseNode
  parent: DulcisX.Nodes
  name: IBaseNode
  nameWithType: IBaseNode
  fullName: DulcisX.Nodes.IBaseNode
- uid: DulcisX.Nodes.INamedNode.GetDisplayName*
  commentId: Overload:DulcisX.Nodes.INamedNode.GetDisplayName
  name: GetDisplayName
  nameWithType: INamedNode.GetDisplayName
  fullName: DulcisX.Nodes.INamedNode.GetDisplayName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
